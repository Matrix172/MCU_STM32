
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005120  08005120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000070  08005198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005198  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc99  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207c  00000000  00000000  0002bd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ad  00000000  00000000  0002eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009614  00000000  00000000  0002f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003a18  00000000  00000000  00038a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003c48  00000000  00000000  0003c494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000070  00000000  00000000  000400dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004fe4 	.word	0x08004fe4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004fe4 	.word	0x08004fe4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 ff37 	bl	800133e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f96a 	bl	80007ac <MX_GPIO_Init>
	MX_TIM3_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_TIM3_Init>
	MX_SPI1_Init();
 80004dc:	f000 f8bc 	bl	8000658 <MX_SPI1_Init>
	MX_ADC_Init();
 80004e0:	f000 f854 	bl	800058c <MX_ADC_Init>
	/* USER CODE BEGIN 2 */

	affichemod();
 80004e4:	f000 f9fc 	bl	80008e0 <affichemod>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		fonctionmod();
 80004e8:	f000 fa14 	bl	8000914 <fonctionmod>
 80004ec:	e7fc      	b.n	80004e8 <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b092      	sub	sp, #72	; 0x48
 80004f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2234      	movs	r2, #52	; 0x34
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 ffde 	bl	80044c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <SystemClock_Config+0x98>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <SystemClock_Config+0x98>)
 800051c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000520:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800053a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800053c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4618      	mov	r0, r3
 8000548:	f001 ff46 	bl	80023d8 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000552:	f000 fccf 	bl	8000ef4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2303      	movs	r3, #3
 800055c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fa62 	bl	8002a38 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800057a:	f000 fcbb 	bl	8000ef4 <Error_Handler>
	}
}
 800057e:	bf00      	nop
 8000580:	3748      	adds	r7, #72	; 0x48
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40007000 	.word	0x40007000

0800058c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC_Init+0xc4>)
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <MX_ADC_Init+0xc8>)
 80005a0:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_ADC_Init+0xc4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC_Init+0xc4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC_Init+0xc4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC_Init+0xc4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_ADC_Init+0xc4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC_Init+0xc4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_ADC_Init+0xc4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC_Init+0xc4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC_Init+0xc4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 2;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_ADC_Init+0xc4>)
 80005dc:	2202      	movs	r2, #2
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC_Init+0xc4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC_Init+0xc4>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_ADC_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC_Init+0xc4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_ADC_Init+0xc4>)
 80005fe:	f000 ff2f 	bl	8001460 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8000608:	f000 fc74 	bl	8000ef4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8000614:	2307      	movs	r3, #7
 8000616:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_ADC_Init+0xc4>)
 800061e:	f001 f9eb 	bl	80019f8 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8000628:	f000 fc64 	bl	8000ef4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000630:	2302      	movs	r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC_Init+0xc4>)
 800063a:	f001 f9dd 	bl	80019f8 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC_Init+0xbc>
	{
		Error_Handler();
 8000644:	f000 fc56 	bl	8000ef4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000008c 	.word	0x2000008c
 8000654:	40012400 	.word	0x40012400

08000658 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_SPI1_Init+0x64>)
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_SPI1_Init+0x64>)
 8000664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000668:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_SPI1_Init+0x64>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_SPI1_Init+0x64>)
 80006aa:	f002 fc17 	bl	8002edc <HAL_SPI_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80006b4:	f000 fc1e 	bl	8000ef4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000e0 	.word	0x200000e0
 80006c0:	40013000 	.word	0x40013000

080006c4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TIM3_Init+0xe0>)
 80006f0:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <MX_TIM3_Init+0xe4>)
 80006f2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32000;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_TIM3_Init+0xe0>)
 80006f6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_TIM3_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TIM3_Init+0xe0>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000716:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000718:	f002 fe76 	bl	8003408 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 8000722:	f000 fbe7 	bl	8000ef4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	4619      	mov	r1, r3
 8000732:	481c      	ldr	r0, [pc, #112]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000734:	f003 f88e 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800073e:	f000 fbd9 	bl	8000ef4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000744:	f002 fe9f 	bl	8003486 <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 800074e:	f000 fbd1 	bl	8000ef4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000762:	f003 fb67 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 800076c:	f000 fbc2 	bl	8000ef4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000788:	f002 ffa2 	bl	80036d0 <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 8000792:	f000 fbaf 	bl	8000ef4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM3_Init+0xe0>)
 8000798:	f000 fcb0 	bl	80010fc <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000138 	.word	0x20000138
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_GPIO_Init+0xf0>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a35      	ldr	r2, [pc, #212]	; (800089c <MX_GPIO_Init+0xf0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <MX_GPIO_Init+0xf0>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_GPIO_Init+0xf0>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <MX_GPIO_Init+0xf0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_GPIO_Init+0xf0>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_GPIO_Init+0xf0>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a29      	ldr	r2, [pc, #164]	; (800089c <MX_GPIO_Init+0xf0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_GPIO_Init+0xf0>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000812:	f001 fdb0 	bl	8002376 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BTNCarte_Pin */
	GPIO_InitStruct.Pin = BTNCarte_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000820:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BTNCarte_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	481d      	ldr	r0, [pc, #116]	; (80008a4 <MX_GPIO_Init+0xf8>)
 800082e:	f001 fbfb 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8000832:	2360      	movs	r3, #96	; 0x60
 8000834:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <MX_GPIO_Init+0xf8>)
 8000846:	f001 fbef 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000864:	f001 fbe0 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000868:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800086c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <MX_GPIO_Init+0xf4>)
 800087e:	f001 fbd3 	bl	8002028 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2028      	movs	r0, #40	; 0x28
 8000888:	f001 fb97 	bl	8001fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088c:	2028      	movs	r0, #40	; 0x28
 800088e:	f001 fbb0 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800

080008a8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e009      	b.n	80008ce <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	60ba      	str	r2, [r7, #8]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdda 	bl	800047c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf1      	blt.n	80008ba <_write+0x12>
	}
	return len;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <affichemod>:



void affichemod(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 80008e4:	f003 fb53 	bl	8003f8e <MAX7219_Clear>
	MAX7219_Init();
 80008e8:	f003 fb1a 	bl	8003f20 <MAX7219_Init>
	MAX7219_DisplayChar(1,'S', 0); // Pas de point décimal
 80008ec:	2200      	movs	r2, #0
 80008ee:	2153      	movs	r1, #83	; 0x53
 80008f0:	2001      	movs	r0, #1
 80008f2:	f003 fb62 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2,'E', 0); // Avec point décimal
 80008f6:	2200      	movs	r2, #0
 80008f8:	2145      	movs	r1, #69	; 0x45
 80008fa:	2002      	movs	r0, #2
 80008fc:	f003 fb5d 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3,'T', 1); // Pas de point décimal
 8000900:	2201      	movs	r2, #1
 8000902:	2154      	movs	r1, #84	; 0x54
 8000904:	2003      	movs	r0, #3
 8000906:	f003 fb58 	bl	8003fba <MAX7219_DisplayChar>
	switchmode();
 800090a:	f000 f90f 	bl	8000b2c <switchmode>

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <fonctionmod>:





void fonctionmod(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	switch(mode){
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <fonctionmod+0x84>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d002      	beq.n	8000926 <fonctionmod+0x12>
 8000920:	2b02      	cmp	r3, #2
 8000922:	d00e      	beq.n	8000942 <fonctionmod+0x2e>
		}

		break;
	}

}
 8000924:	e035      	b.n	8000992 <fonctionmod+0x7e>
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET) {
 8000926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <fonctionmod+0x88>)
 800092c:	f001 fd0c 	bl	8002348 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d12a      	bne.n	800098c <fonctionmod+0x78>
			printf("Appui sur le bouton 1 \n");
 8000936:	481a      	ldr	r0, [pc, #104]	; (80009a0 <fonctionmod+0x8c>)
 8000938:	f003 fce2 	bl	8004300 <puts>
			chronometre();
 800093c:	f000 f83a 	bl	80009b4 <chronometre>
		break;
 8000940:	e024      	b.n	800098c <fonctionmod+0x78>
		if (valide == 0){
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <fonctionmod+0x90>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <fonctionmod+0x3e>
			adcfunction();
 800094a:	f000 f9bd 	bl	8000cc8 <adcfunction>
			affiche_num();
 800094e:	f000 f9d7 	bl	8000d00 <affiche_num>
		if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8000952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <fonctionmod+0x88>)
 8000958:	f001 fcf6 	bl	8002348 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d116      	bne.n	8000990 <fonctionmod+0x7c>
			HAL_ADC_Stop(&hadc);
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <fonctionmod+0x94>)
 8000964:	f000 ff22 	bl	80017ac <HAL_ADC_Stop>
			adccheck ++;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <fonctionmod+0x98>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <fonctionmod+0x98>)
 8000970:	6013      	str	r3, [r2, #0]
			printf("Temps validé !\n");
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <fonctionmod+0x9c>)
 8000974:	f003 fcc4 	bl	8004300 <puts>
			if (adccheck == 2){
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <fonctionmod+0x98>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d107      	bne.n	8000990 <fonctionmod+0x7c>
				valide = 1;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <fonctionmod+0x90>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
				minuteur();
 8000986:	f000 fa6f 	bl	8000e68 <minuteur>
		break;
 800098a:	e001      	b.n	8000990 <fonctionmod+0x7c>
		break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <fonctionmod+0x7e>
		break;
 8000990:	bf00      	nop
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	40020000 	.word	0x40020000
 80009a0:	08004ffc 	.word	0x08004ffc
 80009a4:	20000198 	.word	0x20000198
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	2000019c 	.word	0x2000019c
 80009b0:	08005014 	.word	0x08005014

080009b4 <chronometre>:





void chronometre() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 80009ba:	f003 fae8 	bl	8003f8e <MAX7219_Clear>
	MAX7219_Init();
 80009be:	f003 faaf 	bl	8003f20 <MAX7219_Init>
	stopchrono = 1 ;
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <chronometre+0x110>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]

	uint32_t start_time = HAL_GetTick(); // Temps de départ en millisecondes
 80009c8:	f000 fd1e 	bl	8001408 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]

	uint32_t minutes = 0; // Initialisation des minutes à 0
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
	uint32_t seconds = 0; // Initialisation des secondes à 0
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
	while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 80009d6:	e06a      	b.n	8000aae <chronometre+0xfa>
		uint32_t elapsed_time = HAL_GetTick() - start_time; // Temps écoulé depuis le début du chronomètre
 80009d8:	f000 fd16 	bl	8001408 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	603b      	str	r3, [r7, #0]

		// Calculez les minutes et les secondes
		minutes = (elapsed_time / (1000 * 60)) % 100; // Limiter les minutes à 99
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <chronometre+0x114>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0b9b      	lsrs	r3, r3, #14
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <chronometre+0x118>)
 80009f0:	fba2 1203 	umull	r1, r2, r2, r3
 80009f4:	0952      	lsrs	r2, r2, #5
 80009f6:	2164      	movs	r1, #100	; 0x64
 80009f8:	fb01 f202 	mul.w	r2, r1, r2
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
		seconds = (elapsed_time / 1000) % 60;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <chronometre+0x11c>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	099a      	lsrs	r2, r3, #6
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <chronometre+0x120>)
 8000a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a10:	0959      	lsrs	r1, r3, #5
 8000a12:	460b      	mov	r3, r1
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	1a5b      	subs	r3, r3, r1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	607b      	str	r3, [r7, #4]

		// Affichez les valeurs calculées sur les afficheurs 7 segments
		MAX7219_DisplayChar(1, minutes / 10 + '0', 0); // Affiche les dizaines de minutes
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <chronometre+0x124>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	3330      	adds	r3, #48	; 0x30
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f003 fac3 	bl	8003fba <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, minutes % 10 + '0', 1); // Affiche les minutes
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <chronometre+0x124>)
 8000a38:	fba3 2301 	umull	r2, r3, r3, r1
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	1aca      	subs	r2, r1, r3
 8000a48:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2002      	movs	r0, #2
 8000a52:	f003 fab2 	bl	8003fba <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, seconds / 10 + '0', 0); // Affiche les dizaines de secondes
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <chronometre+0x124>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	3330      	adds	r3, #48	; 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	2003      	movs	r0, #3
 8000a68:	f003 faa7 	bl	8003fba <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, seconds % 10 + '0', 0); // Affiche les secondes
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <chronometre+0x124>)
 8000a70:	fba3 2301 	umull	r2, r3, r3, r1
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1aca      	subs	r2, r1, r3
 8000a80:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f003 fa96 	bl	8003fba <MAX7219_DisplayChar>

		HAL_Delay(1000); // Attendez une seconde avant de mettre à jour l'affichage
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 fcc3 	bl	800141c <HAL_Delay>

		MAX7219_Clear(); // Effacez l'affichage une fois que 99 minutes se sont écoulées
 8000a96:	f003 fa7a 	bl	8003f8e <MAX7219_Clear>
		if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8000a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9e:	480f      	ldr	r0, [pc, #60]	; (8000adc <chronometre+0x128>)
 8000aa0:	f001 fc52 	bl	8002348 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <chronometre+0xfa>
			arreter_chronometre();
 8000aaa:	f000 f819 	bl	8000ae0 <arreter_chronometre>
	while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b62      	cmp	r3, #98	; 0x62
 8000ab2:	d803      	bhi.n	8000abc <chronometre+0x108>
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <chronometre+0x110>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d08d      	beq.n	80009d8 <chronometre+0x24>
		}
	}
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	45e7b273 	.word	0x45e7b273
 8000acc:	51eb851f 	.word	0x51eb851f
 8000ad0:	10624dd3 	.word	0x10624dd3
 8000ad4:	88888889 	.word	0x88888889
 8000ad8:	cccccccd 	.word	0xcccccccd
 8000adc:	40020000 	.word	0x40020000

08000ae0 <arreter_chronometre>:





void arreter_chronometre() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	// Arrêter la mise à jour de l'affichage
	stopchrono = 0;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <arreter_chronometre+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	printf("stopchrono = %d\n",stopchrono);
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <arreter_chronometre+0x44>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <arreter_chronometre+0x48>)
 8000af2:	f003 fb9f 	bl	8004234 <iprintf>
	MAX7219_DisplayChar(1, '0', 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2130      	movs	r1, #48	; 0x30
 8000afa:	2001      	movs	r0, #1
 8000afc:	f003 fa5d 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, '0', 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2130      	movs	r1, #48	; 0x30
 8000b04:	2002      	movs	r0, #2
 8000b06:	f003 fa58 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, '0', 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2130      	movs	r1, #48	; 0x30
 8000b0e:	2003      	movs	r0, #3
 8000b10:	f003 fa53 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, '0', 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2130      	movs	r1, #48	; 0x30
 8000b18:	2004      	movs	r0, #4
 8000b1a:	f003 fa4e 	bl	8003fba <MAX7219_DisplayChar>

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000004 	.word	0x20000004
 8000b28:	08005024 	.word	0x08005024

08000b2c <switchmode>:





void switchmode(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	switch(mode){
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <switchmode+0x58>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d822      	bhi.n	8000b80 <switchmode+0x54>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <switchmode+0x14>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b69 	.word	0x08000b69
 8000b4c:	08000b75 	.word	0x08000b75
	case 1:
		MAX7219_DisplayChar(4,'1', 0); // Pas de point décimal
 8000b50:	2200      	movs	r2, #0
 8000b52:	2131      	movs	r1, #49	; 0x31
 8000b54:	2004      	movs	r0, #4
 8000b56:	f003 fa30 	bl	8003fba <MAX7219_DisplayChar>
		break;
 8000b5a:	e011      	b.n	8000b80 <switchmode+0x54>
	case 2:
		MAX7219_DisplayChar(4,'2', 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2132      	movs	r1, #50	; 0x32
 8000b60:	2004      	movs	r0, #4
 8000b62:	f003 fa2a 	bl	8003fba <MAX7219_DisplayChar>
		break;
 8000b66:	e00b      	b.n	8000b80 <switchmode+0x54>
	case 3:
		MAX7219_DisplayChar(4,'3', 0); // Pas de point décimal
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2133      	movs	r1, #51	; 0x33
 8000b6c:	2004      	movs	r0, #4
 8000b6e:	f003 fa24 	bl	8003fba <MAX7219_DisplayChar>
		break;
 8000b72:	e005      	b.n	8000b80 <switchmode+0x54>
	case 4:
		MAX7219_DisplayChar(4,'4', 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2134      	movs	r1, #52	; 0x34
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f003 fa1e 	bl	8003fba <MAX7219_DisplayChar>
		break;
 8000b7e:	bf00      	nop
	}
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000

08000b88 <adcsecondes>:

void adcsecondes(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
	//Secondes
	HAL_ADC_Start(&hadc);
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <adcsecondes+0x88>)
 8000b90:	f000 fdac 	bl	80016ec <HAL_ADC_Start>
	ADC_ChannelConfTypeDef sConfig = {0}; // Réinitialisation de la structure sConfig
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481a      	ldr	r0, [pc, #104]	; (8000c10 <adcsecondes+0x88>)
 8000ba8:	f000 ff26 	bl	80019f8 <HAL_ADC_ConfigChannel>
	HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8000bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <adcsecondes+0x88>)
 8000bb4:	f000 feb6 	bl	8001924 <HAL_ADC_PollForEvent>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bbc:	4814      	ldr	r0, [pc, #80]	; (8000c10 <adcsecondes+0x88>)
 8000bbe:	f000 fe21 	bl	8001804 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 8000bc2:	4813      	ldr	r0, [pc, #76]	; (8000c10 <adcsecondes+0x88>)
 8000bc4:	f000 ff0b 	bl	80019de <HAL_ADC_GetValue>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <adcsecondes+0x8c>)
 8000bce:	601a      	str	r2, [r3, #0]
	valeur = analogValue / 68;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <adcsecondes+0x8c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <adcsecondes+0x90>)
 8000bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bda:	1152      	asrs	r2, r2, #5
 8000bdc:	17db      	asrs	r3, r3, #31
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <adcsecondes+0x94>)
 8000be2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc);
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <adcsecondes+0x88>)
 8000be6:	f000 fde1 	bl	80017ac <HAL_ADC_Stop>
	printf("ADC Value= %d\n", analogValue);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <adcsecondes+0x8c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <adcsecondes+0x98>)
 8000bf2:	f003 fb1f 	bl	8004234 <iprintf>
	printf("Valeur 60 : %d\n",valeur);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <adcsecondes+0x94>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <adcsecondes+0x9c>)
 8000bfe:	f003 fb19 	bl	8004234 <iprintf>
	HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f000 fc0a 	bl	800141c <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	20000178 	.word	0x20000178
 8000c18:	78787879 	.word	0x78787879
 8000c1c:	20000180 	.word	0x20000180
 8000c20:	08005038 	.word	0x08005038
 8000c24:	08005048 	.word	0x08005048

08000c28 <adcminutes>:

void adcminutes(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
	// Minutes
	HAL_ADC_Start(&hadc);
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <adcminutes+0x88>)
 8000c30:	f000 fd5c 	bl	80016ec <HAL_ADC_Start>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1; // Réaffectation du canal ADC
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <adcminutes+0x88>)
 8000c48:	f000 fed6 	bl	80019f8 <HAL_ADC_ConfigChannel>
	HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8000c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c50:	2101      	movs	r1, #1
 8000c52:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <adcminutes+0x88>)
 8000c54:	f000 fe66 	bl	8001924 <HAL_ADC_PollForEvent>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <adcminutes+0x88>)
 8000c5e:	f000 fdd1 	bl	8001804 <HAL_ADC_PollForConversion>
	analogValueMin = HAL_ADC_GetValue(&hadc);
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <adcminutes+0x88>)
 8000c64:	f000 febb 	bl	80019de <HAL_ADC_GetValue>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <adcminutes+0x8c>)
 8000c6e:	601a      	str	r2, [r3, #0]
	valeurMin = analogValueMin / 41;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <adcminutes+0x8c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <adcminutes+0x90>)
 8000c76:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7a:	1112      	asrs	r2, r2, #4
 8000c7c:	17db      	asrs	r3, r3, #31
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <adcminutes+0x94>)
 8000c82:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc);
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <adcminutes+0x88>)
 8000c86:	f000 fd91 	bl	80017ac <HAL_ADC_Stop>
	printf("ADC ValueMin= %d\n", analogValueMin);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <adcminutes+0x8c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <adcminutes+0x98>)
 8000c92:	f003 facf 	bl	8004234 <iprintf>
	printf("Valeur 100 : %d\n",valeurMin);
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <adcminutes+0x94>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <adcminutes+0x9c>)
 8000c9e:	f003 fac9 	bl	8004234 <iprintf>
	HAL_Delay(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 fbba 	bl	800141c <HAL_Delay>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000008c 	.word	0x2000008c
 8000cb4:	2000017c 	.word	0x2000017c
 8000cb8:	63e7063f 	.word	0x63e7063f
 8000cbc:	20000184 	.word	0x20000184
 8000cc0:	08005058 	.word	0x08005058
 8000cc4:	0800506c 	.word	0x0800506c

08000cc8 <adcfunction>:

void adcfunction(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0}; // Réinitialisation de la structure sConfig
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
	if (adccheck == 0){
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <adcfunction+0x34>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <adcfunction+0x1e>
		adcsecondes();
 8000ce0:	f7ff ff52 	bl	8000b88 <adcsecondes>
	}
	else if (adccheck == 1){
		adcminutes();
	}
}
 8000ce4:	e005      	b.n	8000cf2 <adcfunction+0x2a>
	else if (adccheck == 1){
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <adcfunction+0x34>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <adcfunction+0x2a>
		adcminutes();
 8000cee:	f7ff ff9b 	bl	8000c28 <adcminutes>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000019c 	.word	0x2000019c

08000d00 <affiche_num>:

void affiche_num(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000d04:	f003 f943 	bl	8003f8e <MAX7219_Clear>
	MAX7219_Init();
 8000d08:	f003 f90a 	bl	8003f20 <MAX7219_Init>

	dizainesminutes = valeurMin / 10;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <affiche_num+0xb4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <affiche_num+0xb8>)
 8000d12:	fb82 1203 	smull	r1, r2, r2, r3
 8000d16:	1092      	asrs	r2, r2, #2
 8000d18:	17db      	asrs	r3, r3, #31
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <affiche_num+0xbc>)
 8000d1e:	6013      	str	r3, [r2, #0]
	minutes = valeurMin % 10;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <affiche_num+0xb4>)
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <affiche_num+0xb8>)
 8000d26:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2a:	109a      	asrs	r2, r3, #2
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <affiche_num+0xc0>)
 8000d3c:	601a      	str	r2, [r3, #0]
	dizaines = valeur / 10;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <affiche_num+0xc4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <affiche_num+0xb8>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	1092      	asrs	r2, r2, #2
 8000d4a:	17db      	asrs	r3, r3, #31
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <affiche_num+0xc8>)
 8000d50:	6013      	str	r3, [r2, #0]
	unites = valeur % 10;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <affiche_num+0xc4>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <affiche_num+0xb8>)
 8000d58:	fb83 2301 	smull	r2, r3, r3, r1
 8000d5c:	109a      	asrs	r2, r3, #2
 8000d5e:	17cb      	asrs	r3, r1, #31
 8000d60:	1ad2      	subs	r2, r2, r3
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <affiche_num+0xcc>)
 8000d6e:	601a      	str	r2, [r3, #0]

	MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <affiche_num+0xbc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3330      	adds	r3, #48	; 0x30
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f003 f91d 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, minutes + '0', 1);
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <affiche_num+0xc0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3330      	adds	r3, #48	; 0x30
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f003 f915 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <affiche_num+0xc8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3330      	adds	r3, #48	; 0x30
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f003 f90d 	bl	8003fba <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, unites + '0', 0);
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <affiche_num+0xcc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3330      	adds	r3, #48	; 0x30
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	2004      	movs	r0, #4
 8000dac:	f003 f905 	bl	8003fba <MAX7219_DisplayChar>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000184 	.word	0x20000184
 8000db8:	66666667 	.word	0x66666667
 8000dbc:	20000190 	.word	0x20000190
 8000dc0:	20000194 	.word	0x20000194
 8000dc4:	20000180 	.word	0x20000180
 8000dc8:	20000188 	.word	0x20000188
 8000dcc:	2000018c 	.word	0x2000018c

08000dd0 <decrementunites>:

void decrementunites(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	while (unites > 0){
 8000dd4:	e010      	b.n	8000df8 <decrementunites+0x28>
		unites --;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <decrementunites+0x38>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <decrementunites+0x38>)
 8000dde:	6013      	str	r3, [r2, #0]
		MAX7219_DisplayChar(4, unites + '0', 0);
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <decrementunites+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3330      	adds	r3, #48	; 0x30
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	2004      	movs	r0, #4
 8000dec:	f003 f8e5 	bl	8003fba <MAX7219_DisplayChar>
		HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f000 fb12 	bl	800141c <HAL_Delay>
	while (unites > 0){
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <decrementunites+0x38>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dcea      	bgt.n	8000dd6 <decrementunites+0x6>
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000018c 	.word	0x2000018c

08000e0c <decrementdizaines>:

void decrementdizaines(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	while (dizaines > 0){
 8000e10:	e01f      	b.n	8000e52 <decrementdizaines+0x46>
		decrementunites();
 8000e12:	f7ff ffdd 	bl	8000dd0 <decrementunites>
		dizaines --;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <decrementdizaines+0x54>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <decrementdizaines+0x54>)
 8000e1e:	6013      	str	r3, [r2, #0]
		unites = 9;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <decrementdizaines+0x58>)
 8000e22:	2209      	movs	r2, #9
 8000e24:	601a      	str	r2, [r3, #0]
		MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <decrementdizaines+0x54>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3330      	adds	r3, #48	; 0x30
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2003      	movs	r0, #3
 8000e32:	f003 f8c2 	bl	8003fba <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, unites + '0', 0);
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <decrementdizaines+0x58>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3330      	adds	r3, #48	; 0x30
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2004      	movs	r0, #4
 8000e42:	f003 f8ba 	bl	8003fba <MAX7219_DisplayChar>
		HAL_Delay(1000);
 8000e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4a:	f000 fae7 	bl	800141c <HAL_Delay>
		decrementunites();
 8000e4e:	f7ff ffbf 	bl	8000dd0 <decrementunites>
	while (dizaines > 0){
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <decrementdizaines+0x54>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dcdb      	bgt.n	8000e12 <decrementdizaines+0x6>

	}
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000188 	.word	0x20000188
 8000e64:	2000018c 	.word	0x2000018c

08000e68 <minuteur>:

void minuteur(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	while ((dizaines != 0) && (unites !=0)){
 8000e6c:	e001      	b.n	8000e72 <minuteur+0xa>
		decrementdizaines();
 8000e6e:	f7ff ffcd 	bl	8000e0c <decrementdizaines>
	while ((dizaines != 0) && (unites !=0)){
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <minuteur+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <minuteur+0x1a>
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <minuteur+0x28>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f5      	bne.n	8000e6e <minuteur+0x6>
	}
	valide = 0;
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <minuteur+0x2c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000188 	.word	0x20000188
 8000e90:	2000018c 	.word	0x2000018c
 8000e94:	20000198 	.word	0x20000198

08000e98 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin){
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea8:	d11b      	bne.n	8000ee2 <HAL_GPIO_EXTI_Callback+0x4a>
	case BTNCarte_Pin :
		if (mode < 4){
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	dc0b      	bgt.n	8000eca <HAL_GPIO_EXTI_Callback+0x32>
			mode ++;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000eba:	6013      	str	r3, [r2, #0]
			printf("Mode : %d\n", mode);
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ec4:	f003 f9b6 	bl	8004234 <iprintf>
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_EXTI_Callback+0x44>
		}
		else{
			mode = 1;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
			printf("Mode : %d\n", mode);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_GPIO_EXTI_Callback+0x54>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ed8:	f003 f9ac 	bl	8004234 <iprintf>
		}
		affichemod();
 8000edc:	f7ff fd00 	bl	80008e0 <affichemod>


		break;
 8000ee0:	bf00      	nop
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	08005080 	.word	0x08005080

08000ef4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>
	...

08000f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_MspInit+0x58>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_MspInit+0x58>)
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f10:	6253      	str	r3, [r2, #36]	; 0x24
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_MspInit+0x58>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_MspInit+0x58>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_MspInit+0x58>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_MspInit+0x58>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_MspInit+0x58>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_MspInit+0x58>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6253      	str	r3, [r2, #36]	; 0x24
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_MspInit+0x58>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <HAL_ADC_MspInit+0x74>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d123      	bne.n	8000fc6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f88:	6213      	str	r3, [r2, #32]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_ADC_MspInit+0x78>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = RV1_Pin|RV2_Pin;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_ADC_MspInit+0x7c>)
 8000fc2:	f001 f831 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012400 	.word	0x40012400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0x7c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d127      	bne.n	800104e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_SPI_MspInit+0x80>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_SPI_MspInit+0x80>)
 8001004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_SPI_MspInit+0x80>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_SPI_MspInit+0x80>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_SPI_MspInit+0x80>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_SPI_MspInit+0x80>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800102e:	23e0      	movs	r3, #224	; 0xe0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103e:	2305      	movs	r3, #5
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_SPI_MspInit+0x84>)
 800104a:	f000 ffed 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40013000 	.word	0x40013000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_TIM_Base_MspInit+0x8c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12f      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_TIM_Base_MspInit+0x90>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x94>)
 80010d2:	f000 ffa9 	bl	8002028 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	201d      	movs	r0, #29
 80010dc:	f000 ff6d 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010e0:	201d      	movs	r0, #29
 80010e2:	f000 ff86 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40000400 	.word	0x40000400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020800 	.word	0x40020800

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_TIM_MspPostInit+0x64>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11b      	bne.n	8001156 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MOT_Pin;
 8001136:	2310      	movs	r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_TIM_MspPostInit+0x6c>)
 8001152:	f000 ff69 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40000400 	.word	0x40000400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 f917 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM3_IRQHandler+0x10>)
 80011c2:	f002 f9a8 	bl	8003516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000138 	.word	0x20000138

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTNCarte_Pin);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f001 f8e6 	bl	80023a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00a      	b.n	8001208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f2:	f3af 8000 	nop.w
 80011f6:	4601      	mov	r1, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf0      	blt.n	80011f2 <_read+0x12>
  }

  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:
  }
  return len;
}

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001240:	605a      	str	r2, [r3, #4]
  return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <_isatty>:

int _isatty(int file)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f003 f956 	bl	800455c <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20014000 	.word	0x20014000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	200001a0 	.word	0x200001a0
 80012e4:	200002f8 	.word	0x200002f8

080012e8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f4:	f7ff fff8 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012fa:	490c      	ldr	r1, [pc, #48]	; (800132c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001310:	4c09      	ldr	r4, [pc, #36]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 f923 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001322:	f7ff f8d1 	bl	80004c8 <main>
  bx lr
 8001326:	4770      	bx	lr
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001330:	08005128 	.word	0x08005128
  ldr r2, =_sbss
 8001334:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001338:	200002f4 	.word	0x200002f4

0800133c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_IRQHandler>

0800133e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 fe2b 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f80e 	bl	8001370 <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	e001      	b.n	8001364 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001360:	f7ff fdce 	bl	8000f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001364:	79fb      	ldrb	r3, [r7, #7]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_InitTick+0x68>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d022      	beq.n	80013ca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_InitTick+0x6c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_InitTick+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001390:	fbb1 f3f3 	udiv	r3, r1, r3
 8001394:	fbb2 f3f3 	udiv	r3, r2, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fe38 	bl	800200e <HAL_SYSTICK_Config>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d809      	bhi.n	80013be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013aa:	2200      	movs	r2, #0
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295
 80013b2:	f000 fe02 	bl	8001fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_InitTick+0x70>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e007      	b.n	80013ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e004      	b.n	80013ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000010 	.word	0x20000010
 80013dc:	20000008 	.word	0x20000008
 80013e0:	2000000c 	.word	0x2000000c

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x1c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x20>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_IncTick+0x1c>)
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001a4 	.word	0x200001a4
 8001404:	20000010 	.word	0x20000010

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_GetTick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	200001a4 	.word	0x200001a4

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fff0 	bl	8001408 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d004      	beq.n	8001440 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_Delay+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001440:	bf00      	nop
 8001442:	f7ff ffe1 	bl	8001408 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	429a      	cmp	r2, r3
 8001450:	d8f7      	bhi.n	8001442 <HAL_Delay+0x26>
  {
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000010 	.word	0x20000010

08001460 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e127      	b.n	80016d0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <HAL_ADC_Init+0x278>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a8d      	ldr	r2, [pc, #564]	; (80016d8 <HAL_ADC_Init+0x278>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_ADC_Init+0x278>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fd51 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80ff 	bne.w	80016c6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d0:	f023 0302 	bic.w	r3, r3, #2
 80014d4:	f043 0202 	orr.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80014dc:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_ADC_Init+0x27c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	497c      	ldr	r1, [pc, #496]	; (80016dc <HAL_ADC_Init+0x27c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014f6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fe:	4619      	mov	r1, r3
 8001500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001504:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800151a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001520:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001542:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001546:	4313      	orrs	r3, r2
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	2b10      	cmp	r3, #16
 8001550:	d007      	beq.n	8001562 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800155a:	4313      	orrs	r3, r2
 800155c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800155e:	4313      	orrs	r3, r2
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d04f      	beq.n	8001610 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001576:	4313      	orrs	r3, r2
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001582:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6912      	ldr	r2, [r2, #16]
 8001588:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800158c:	d003      	beq.n	8001596 <HAL_ADC_Init+0x136>
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6912      	ldr	r2, [r2, #16]
 8001592:	2a01      	cmp	r2, #1
 8001594:	d102      	bne.n	800159c <HAL_ADC_Init+0x13c>
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	e000      	b.n	800159e <HAL_ADC_Init+0x13e>
 800159c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800159e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80015a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a2:	4313      	orrs	r3, r2
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d125      	bne.n	80015fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	3b01      	subs	r3, #1
 80015c0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80015c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	fa92 f2a2 	rbit	r2, r2
 80015cc:	617a      	str	r2, [r7, #20]
  return result;
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	fab2 f282 	clz	r2, r2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015de:	4313      	orrs	r3, r2
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
 80015e2:	e00b      	b.n	80015fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f043 0220 	orr.w	r2, r3, #32
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_ADC_Init+0x280>)
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800160c:	430b      	orrs	r3, r1
 800160e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_ADC_Init+0x284>)
 8001618:	4013      	ands	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001620:	430b      	orrs	r3, r1
 8001622:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800162c:	d003      	beq.n	8001636 <HAL_ADC_Init+0x1d6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d119      	bne.n	800166a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800164a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	60fa      	str	r2, [r7, #12]
  return result;
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	fa03 f202 	lsl.w	r2, r3, r2
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
 8001668:	e007      	b.n	800167a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_ADC_Init+0x288>)
 8001682:	4013      	ands	r3, r2
 8001684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001686:	429a      	cmp	r2, r3
 8001688:	d10b      	bne.n	80016a2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a0:	e014      	b.n	80016cc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f023 0312 	bic.w	r3, r3, #18
 80016aa:	f043 0210 	orr.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016c4:	e002      	b.n	80016cc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3738      	adds	r7, #56	; 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40012700 	.word	0x40012700
 80016e0:	fcfc16ff 	.word	0xfcfc16ff
 80016e4:	c0fff189 	.word	0xc0fff189
 80016e8:	bf80fffe 	.word	0xbf80fffe

080016ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Start+0x1a>
 8001702:	2302      	movs	r3, #2
 8001704:	e04e      	b.n	80017a4 <HAL_ADC_Start+0xb8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fade 	bl	8001cd0 <ADC_Enable>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d141      	bne.n	80017a2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001748:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175c:	d106      	bne.n	800176c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	f023 0206 	bic.w	r2, r3, #6
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
 800176a:	e002      	b.n	8001772 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001782:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Stop+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e01a      	b.n	80017fc <HAL_ADC_Stop+0x50>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fada 	bl	8001d88 <ADC_ConversionStop_Disable>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d113      	bne.n	800184a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800182c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001830:	d10b      	bne.n	800184a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f043 0220 	orr.w	r2, r3, #32
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e068      	b.n	800191c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800184a:	f7ff fddd 	bl	8001408 <HAL_GetTick>
 800184e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001850:	e021      	b.n	8001896 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d01d      	beq.n	8001896 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_ADC_PollForConversion+0x6c>
 8001860:	f7ff fdd2 	bl	8001408 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d212      	bcs.n	8001896 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10b      	bne.n	8001896 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f043 0204 	orr.w	r2, r3, #4
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e042      	b.n	800191c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0d6      	beq.n	8001852 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0212 	mvn.w	r2, #18
 80018b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d124      	bne.n	800191a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11f      	bne.n	800191a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d111      	bne.n	800191a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_ADC_PollForEvent>:
  *            @arg ADC_OVR_EVENT: ADC Overrun event.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001934:	f7ff fd68 	bl	8001408 <HAL_GetTick>
 8001938:	6178      	str	r0, [r7, #20]
  
  /* Check selected event flag */
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 800193a:	e022      	b.n	8001982 <HAL_ADC_PollForEvent+0x5e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001942:	d01e      	beq.n	8001982 <HAL_ADC_PollForEvent+0x5e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ADC_PollForEvent+0x36>
 800194a:	f7ff fd5d 	bl	8001408 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d213      	bcs.n	8001982 <HAL_ADC_PollForEvent+0x5e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4013      	ands	r3, r2
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d00b      	beq.n	8001982 <HAL_ADC_PollForEvent+0x5e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f043 0204 	orr.w	r2, r3, #4
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e029      	b.n	80019d6 <HAL_ADC_PollForEvent+0xb2>
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4013      	ands	r3, r2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d1d4      	bne.n	800193c <HAL_ADC_PollForEvent+0x18>
        }
      }
    }
  }
  
  switch(EventType)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_PollForEvent+0x8c>
  {
  /* Analog watchdog (level out of window) event */
  case ADC_AWD_EVENT:
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	64da      	str	r2, [r3, #76]	; 0x4c
      
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0201 	mvn.w	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
    break;
 80019ae:	e011      	b.n	80019d4 <HAL_ADC_PollForEvent+0xb0>
    /* Note: On STM32L1, ADC overrun can be set through other parameters      */
    /*       refer to description of parameter "EOCSelection" for more        */
    /*       details.                                                         */

    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0220 	mvn.w	r2, #32
 80019d0:	601a      	str	r2, [r3, #0]
    break;
 80019d2:	bf00      	nop
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x20>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e14f      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x2c0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d81c      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b05      	subs	r3, #5
 8001a3a:	221f      	movs	r2, #31
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b05      	subs	r3, #5
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a60:	e07e      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d81c      	bhi.n	8001aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b23      	subs	r3, #35	; 0x23
 8001a7c:	221f      	movs	r2, #31
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4019      	ands	r1, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b23      	subs	r3, #35	; 0x23
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa2:	e05d      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d81c      	bhi.n	8001ae6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b41      	subs	r3, #65	; 0x41
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b41      	subs	r3, #65	; 0x41
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae4:	e03c      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d81c      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b5f      	subs	r3, #95	; 0x5f
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4019      	ands	r1, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b5f      	subs	r3, #95	; 0x5f
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	e01b      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b7d      	subs	r3, #125	; 0x7d
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b7d      	subs	r3, #125	; 0x7d
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d81a      	bhi.n	8001b9e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6959      	ldr	r1, [r3, #20]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	2207      	movs	r2, #7
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4019      	ands	r1, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6898      	ldr	r0, [r3, #8]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	e05d      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b13      	cmp	r3, #19
 8001ba4:	d81c      	bhi.n	8001be0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	4019      	ands	r1, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6898      	ldr	r0, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e03c      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b1d      	cmp	r3, #29
 8001be6:	d81c      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b3c      	subs	r3, #60	; 0x3c
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b3c      	subs	r3, #60	; 0x3c
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e01b      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	3b5a      	subs	r3, #90	; 0x5a
 8001c34:	2207      	movs	r2, #7
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6898      	ldr	r0, [r3, #8]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b5a      	subs	r3, #90	; 0x5a
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c66:	2b11      	cmp	r3, #17
 8001c68:	d121      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c80:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d111      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_ADC_ConfigChannel+0x2d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_ADC_ConfigChannel+0x2d4>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9a      	lsrs	r2, r3, #18
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40012700 	.word	0x40012700
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	431bde83 	.word	0x431bde83

08001cd0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d043      	beq.n	8001d76 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <ADC_Enable+0xb0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <ADC_Enable+0xb4>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9a      	lsrs	r2, r3, #18
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d12:	e002      	b.n	8001d1a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001d20:	f7ff fb72 	bl	8001408 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d26:	e01f      	b.n	8001d68 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001d28:	f7ff fb6e 	bl	8001408 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d918      	bls.n	8001d68 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d011      	beq.n	8001d68 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f043 0210 	orr.w	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e007      	b.n	8001d78 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b40      	cmp	r3, #64	; 0x40
 8001d74:	d1d8      	bne.n	8001d28 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000008 	.word	0x20000008
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d12e      	bne.n	8001e00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001db2:	f7ff fb29 	bl	8001408 <HAL_GetTick>
 8001db6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001db8:	e01b      	b.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001dba:	f7ff fb25 	bl	8001408 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d914      	bls.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d10d      	bne.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f043 0210 	orr.w	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e007      	b.n	8001e02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d0dc      	beq.n	8001dba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <__NVIC_SetPriorityGrouping>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4906      	ldr	r1, [pc, #24]	; (8001ea4 <__NVIC_EnableIRQ+0x34>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Config>:
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff90 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff2d 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff42 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff90 	bl	8001efc <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5f 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff35 	bl	8001e70 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800203e:	e160      	b.n	8002302 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8152 	beq.w	80022fc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0201 	and.w	r2, r3, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d017      	beq.n	800210e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d123      	bne.n	8002162 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80ac 	beq.w	80022fc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_GPIO_Init+0x2f8>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_GPIO_Init+0x2f8>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_GPIO_Init+0x2f8>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x300>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d025      	beq.n	8002234 <HAL_GPIO_Init+0x20c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x304>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_Init+0x208>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x308>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_Init+0x204>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <HAL_GPIO_Init+0x30c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x200>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_GPIO_Init+0x310>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1fc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_GPIO_Init+0x314>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1f8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <HAL_GPIO_Init+0x318>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1f4>
 8002218:	2306      	movs	r3, #6
 800221a:	e00c      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 800221c:	2307      	movs	r3, #7
 800221e:	e00a      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 8002220:	2305      	movs	r3, #5
 8002222:	e008      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 8002224:	2304      	movs	r3, #4
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 8002228:	2303      	movs	r3, #3
 800222a:	e004      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 800222c:	2302      	movs	r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_GPIO_Init+0x20e>
 8002234:	2300      	movs	r3, #0
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	0092      	lsls	r2, r2, #2
 800223e:	4093      	lsls	r3, r2
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002246:	4937      	ldr	r1, [pc, #220]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_GPIO_Init+0x31c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002278:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_GPIO_Init+0x31c>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_GPIO_Init+0x31c>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_GPIO_Init+0x31c>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_GPIO_Init+0x31c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_GPIO_Init+0x31c>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_GPIO_Init+0x31c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022f6:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_GPIO_Init+0x31c>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f ae97 	bne.w	8002040 <HAL_GPIO_Init+0x18>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40010000 	.word	0x40010000
 8002328:	40020000 	.word	0x40020000
 800232c:	40020400 	.word	0x40020400
 8002330:	40020800 	.word	0x40020800
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40021000 	.word	0x40021000
 800233c:	40021400 	.word	0x40021400
 8002340:	40021800 	.word	0x40021800
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e001      	b.n	800236a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]
 8002382:	4613      	mov	r3, r2
 8002384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002386:	787b      	ldrb	r3, [r7, #1]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002392:	e003      	b.n	800239c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fd66 	bl	8000e98 <HAL_GPIO_EXTI_Callback>
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e31d      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f4:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07b      	beq.n	8002502 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d006      	beq.n	800241e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b87      	ldr	r3, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d06a      	beq.n	8002500 <HAL_RCC_OscConfig+0x128>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d166      	bne.n	8002500 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e2f7      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x74>
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7e      	ldr	r2, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e02d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x96>
 8002454:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a78      	ldr	r2, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x264>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0xd0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xb8>
 8002476:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a70      	ldr	r2, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x264>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd0>
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x264>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe ffaa 	bl	8001408 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe ffa6 	bl	8001408 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e2ad      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ca:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe ff96 	bl	8001408 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe ff92 	bl	8001408 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e299      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x108>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d05a      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d119      	bne.n	800254e <HAL_RCC_OscConfig+0x176>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x160>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e276      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x264>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	493d      	ldr	r1, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254c:	e03a      	b.n	80025c4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_RCC_OscConfig+0x268>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe ff54 	bl	8001408 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe ff50 	bl	8001408 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e257      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	492a      	ldr	r1, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
 8002596:	e015      	b.n	80025c4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0x268>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe ff33 	bl	8001408 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a6:	f7fe ff2f 	bl	8001408 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e236      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80b8 	beq.w	8002742 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d170      	bne.n	80026ba <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x218>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e21a      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_OscConfig+0x264>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d921      	bls.n	8002644 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fc09 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e208      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4901      	ldr	r1, [pc, #4]	; (800263c <HAL_RCC_OscConfig+0x264>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e020      	b.n	800267e <HAL_RCC_OscConfig+0x2a6>
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002644:	4b99      	ldr	r3, [pc, #612]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4996      	ldr	r1, [pc, #600]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002656:	4b95      	ldr	r3, [pc, #596]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	4991      	ldr	r1, [pc, #580]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fbd4 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1d3      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	0b5b      	lsrs	r3, r3, #13
 8002684:	3301      	adds	r3, #1
 8002686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800268e:	4a87      	ldr	r2, [pc, #540]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002690:	6892      	ldr	r2, [r2, #8]
 8002692:	0912      	lsrs	r2, r2, #4
 8002694:	f002 020f 	and.w	r2, r2, #15
 8002698:	4985      	ldr	r1, [pc, #532]	; (80028b0 <HAL_RCC_OscConfig+0x4d8>)
 800269a:	5c8a      	ldrb	r2, [r1, r2]
 800269c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800269e:	4a85      	ldr	r2, [pc, #532]	; (80028b4 <HAL_RCC_OscConfig+0x4dc>)
 80026a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x4e0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fe62 	bl	8001370 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d045      	beq.n	8002742 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	e1b5      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d029      	beq.n	8002716 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026c2:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x4e4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fe9e 	bl	8001408 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d0:	f7fe fe9a 	bl	8001408 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1a1      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ee:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	496c      	ldr	r1, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	4967      	ldr	r1, [pc, #412]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002716:	4b69      	ldr	r3, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x4e4>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fe74 	bl	8001408 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002724:	f7fe fe70 	bl	8001408 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e177      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d030      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe fe54 	bl	8001408 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fe50 	bl	8001408 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e157      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x38c>
 8002782:	e015      	b.n	80027b0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fe3d 	bl	8001408 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fe39 	bl	8001408 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e140      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a4:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b5 	beq.w	8002928 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4a36      	ldr	r2, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6253      	str	r3, [r2, #36]	; 0x24
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fe01 	bl	8001408 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fdfd 	bl	8001408 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e104      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x466>
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6353      	str	r3, [r2, #52]	; 0x34
 800283c:	e02d      	b.n	800289a <HAL_RCC_OscConfig+0x4c2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x488>
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	6353      	str	r3, [r2, #52]	; 0x34
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285c:	6353      	str	r3, [r2, #52]	; 0x34
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x4c2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x4aa>
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6353      	str	r3, [r2, #52]	; 0x34
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6353      	str	r3, [r2, #52]	; 0x34
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x4c2>
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	6353      	str	r3, [r2, #52]	; 0x34
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	4a06      	ldr	r2, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 8002894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002898:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fdb1 	bl	8001408 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a8:	e019      	b.n	80028de <HAL_RCC_OscConfig+0x506>
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08005098 	.word	0x08005098
 80028b4:	20000008 	.word	0x20000008
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	42470020 	.word	0x42470020
 80028c0:	42470680 	.word	0x42470680
 80028c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fd9e 	bl	8001408 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0a3      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ee      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4f0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fd8c 	bl	8001408 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f4:	f7fe fd88 	bl	8001408 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e08d      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ee      	bne.n	80028f4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	4a43      	ldr	r2, [pc, #268]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d079      	beq.n	8002a24 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d056      	beq.n	80029e4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b02      	cmp	r3, #2
 800293c:	d13b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_OscConfig+0x65c>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fd60 	bl	8001408 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fd5c 	bl	8001408 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e063      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295e:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4319      	orrs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	430b      	orrs	r3, r1
 8002982:	492b      	ldr	r1, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x65c>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fd3b 	bl	8001408 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fd37 	bl	8001408 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e03e      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x5be>
 80029b4:	e036      	b.n	8002a24 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_RCC_OscConfig+0x65c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fd24 	bl	8001408 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fd20 	bl	8001408 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e027      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5ec>
 80029e2:	e01f      	b.n	8002a24 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e01a      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCC_OscConfig+0x658>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470060 	.word	0x42470060

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e11a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b8f      	ldr	r3, [pc, #572]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d919      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x34>
 8002a60:	4b8a      	ldr	r3, [pc, #552]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a89      	ldr	r2, [pc, #548]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b87      	ldr	r3, [pc, #540]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 0201 	bic.w	r2, r3, #1
 8002a74:	4985      	ldr	r1, [pc, #532]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7c:	4b83      	ldr	r3, [pc, #524]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0f9      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	497a      	ldr	r1, [pc, #488]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 808e 	beq.w	8002bd6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d121      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0d7      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d115      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0cb      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0bf      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0b7      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	495c      	ldr	r1, [pc, #368]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b24:	f7fe fc70 	bl	8001408 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d112      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fc68 	bl	8001408 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e09b      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xfc>
 8002b56:	e03e      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d112      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7fe fc51 	bl	8001408 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e084      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x12a>
 8002b84:	e027      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11d      	bne.n	8002bca <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe fc3a 	bl	8001408 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e06d      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x158>
 8002bb2:	e010      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fc28 	bl	8001408 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e05b      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d219      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x1be>
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	4923      	ldr	r1, [pc, #140]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_ClockConfig+0x254>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e034      	b.n	8002c82 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4917      	ldr	r1, [pc, #92]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490f      	ldr	r1, [pc, #60]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f823 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCC_ClockConfig+0x258>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490b      	ldr	r1, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fb7a 	bl	8001370 <HAL_InitTick>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c80:	7afb      	ldrb	r3, [r7, #11]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08005098 	.word	0x08005098
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b08e      	sub	sp, #56	; 0x38
 8002ca6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ca8:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	f200 8092 	bhi.w	8002de2 <HAL_RCC_GetSysClockFreq+0x142>
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x28>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x2e>
 8002cc6:	e08c      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b51      	ldr	r3, [pc, #324]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x170>)
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ccc:	e097      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x174>)
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd2:	e094      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x178>)
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	0d9b      	lsrs	r3, r3, #22
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	61fa      	str	r2, [r7, #28]
 8002d02:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x174>)
 8002d04:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002d08:	464a      	mov	r2, r9
 8002d0a:	fb03 f202 	mul.w	r2, r3, r2
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4644      	mov	r4, r8
 8002d12:	fb04 f303 	mul.w	r3, r4, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x174>)
 8002d1a:	4644      	mov	r4, r8
 8002d1c:	fba4 0102 	umull	r0, r1, r4, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	4619      	mov	r1, r3
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2200      	movs	r2, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	617a      	str	r2, [r7, #20]
 8002d2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d30:	f7fd fa24 	bl	800017c <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	e04e      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	2200      	movs	r2, #0
 8002d42:	469a      	mov	sl, r3
 8002d44:	4693      	mov	fp, r2
 8002d46:	4652      	mov	r2, sl
 8002d48:	465b      	mov	r3, fp
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d62:	eb63 090b 	sbc.w	r9, r3, fp
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	00eb      	lsls	r3, r5, #3
 8002d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d90:	00e2      	lsls	r2, r4, #3
 8002d92:	4614      	mov	r4, r2
 8002d94:	461d      	mov	r5, r3
 8002d96:	eb14 030a 	adds.w	r3, r4, sl
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	eb45 030b 	adc.w	r3, r5, fp
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	4604      	mov	r4, r0
 8002db8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd0:	f7fd f9d4 	bl	800017c <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002de0:	e00d      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0b5b      	lsrs	r3, r3, #13
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	3301      	adds	r3, #1
 8002df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3738      	adds	r7, #56	; 0x38
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	016e3600 	.word	0x016e3600
 8002e18:	0800508c 	.word	0x0800508c

08002e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12c      	bne.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e40:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e016      	b.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6253      	str	r3, [r2, #36]	; 0x24
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e80:	d105      	bne.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e88:	d101      	bne.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 0201 	bic.w	r2, r3, #1
 8002ea8:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	40023c00 	.word	0x40023c00

08002edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e07b      	b.n	8002fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d009      	beq.n	8002f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
 8002f06:	e005      	b.n	8002f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f854 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	ea42 0103 	orr.w	r1, r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0104 	and.w	r1, r3, #4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f003 0210 	and.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b088      	sub	sp, #32
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_SPI_Transmit+0x22>
 800300c:	2302      	movs	r3, #2
 800300e:	e12d      	b.n	800326c <HAL_SPI_Transmit+0x27e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003018:	f7fe f9f6 	bl	8001408 <HAL_GetTick>
 800301c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003032:	e116      	b.n	8003262 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Transmit+0x52>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003044:	e10d      	b.n	8003262 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	d10f      	bne.n	80030ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d007      	beq.n	80030cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d4:	d14f      	bne.n	8003176 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0xf6>
 80030de:	8afb      	ldrh	r3, [r7, #22]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d142      	bne.n	800316a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003108:	e02f      	b.n	800316a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d112      	bne.n	800313e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	86da      	strh	r2, [r3, #54]	; 0x36
 800313c:	e015      	b.n	800316a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313e:	f7fe f963 	bl	8001408 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d803      	bhi.n	8003156 <HAL_SPI_Transmit+0x168>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x16e>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003168:	e07b      	b.n	8003262 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ca      	bne.n	800310a <HAL_SPI_Transmit+0x11c>
 8003174:	e050      	b.n	8003218 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_Transmit+0x196>
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d144      	bne.n	800320e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031aa:	e030      	b.n	800320e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d113      	bne.n	80031e2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	; 0x36
 80031e0:	e015      	b.n	800320e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e2:	f7fe f911 	bl	8001408 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d803      	bhi.n	80031fa <HAL_SPI_Transmit+0x20c>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Transmit+0x212>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800320c:	e029      	b.n	8003262 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1c9      	bne.n	80031ac <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f8b1 	bl	8003384 <SPI_EndRxTxTransaction>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e003      	b.n	8003262 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800326a:	7ffb      	ldrb	r3, [r7, #31]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fe f8c0 	bl	8001408 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fe f8b8 	bl	8001408 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fe f8a8 	bl	8001408 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008

08003384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <SPI_EndRxTxTransaction+0x7c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <SPI_EndRxTxTransaction+0x80>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0d5b      	lsrs	r3, r3, #21
 800339c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d112      	bne.n	80033d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff5a 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00f      	b.n	80033f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3b01      	subs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d0f2      	beq.n	80033d6 <SPI_EndRxTxTransaction+0x52>
 80033f0:	e000      	b.n	80033f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80033f2:	bf00      	nop
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008
 8003404:	165e9f81 	.word	0x165e9f81

08003408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e031      	b.n	800347e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fe18 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 faf8 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e031      	b.n	80034fc <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f829 	bl	8003504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f000 fab9 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d122      	bne.n	8003572 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d11b      	bne.n	8003572 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f06f 0202 	mvn.w	r2, #2
 8003542:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa54 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 800355e:	e005      	b.n	800356c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa47 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa56 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d122      	bne.n	80035c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d11b      	bne.n	80035c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0204 	mvn.w	r2, #4
 8003596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa2a 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 80035b2:	e005      	b.n	80035c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa1d 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fa2c 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d122      	bne.n	800361a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d11b      	bne.n	800361a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0208 	mvn.w	r2, #8
 80035ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2204      	movs	r2, #4
 80035f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa00 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 8003606:	e005      	b.n	8003614 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f9f3 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa02 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d122      	bne.n	800366e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b10      	cmp	r3, #16
 8003634:	d11b      	bne.n	800366e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f06f 0210 	mvn.w	r2, #16
 800363e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2208      	movs	r2, #8
 8003644:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f9d6 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 800365a:	e005      	b.n	8003668 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f9c9 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9d8 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0201 	mvn.w	r2, #1
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9a4 	bl	80039e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f9b2 	bl	8003a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0ae      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	f200 809f 	bhi.w	800383c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003739 	.word	0x08003739
 8003708:	0800383d 	.word	0x0800383d
 800370c:	0800383d 	.word	0x0800383d
 8003710:	0800383d 	.word	0x0800383d
 8003714:	08003779 	.word	0x08003779
 8003718:	0800383d 	.word	0x0800383d
 800371c:	0800383d 	.word	0x0800383d
 8003720:	0800383d 	.word	0x0800383d
 8003724:	080037bb 	.word	0x080037bb
 8003728:	0800383d 	.word	0x0800383d
 800372c:	0800383d 	.word	0x0800383d
 8003730:	0800383d 	.word	0x0800383d
 8003734:	080037fb 	.word	0x080037fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f9ec 	bl	8003b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	619a      	str	r2, [r3, #24]
      break;
 8003776:	e064      	b.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa08 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
      break;
 80037b8:	e043      	b.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fa25 	bl	8003c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0208 	orr.w	r2, r2, #8
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0204 	bic.w	r2, r2, #4
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
      break;
 80037f8:	e023      	b.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa42 	bl	8003c8a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
      break;
 800383a:	e002      	b.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
      break;
 8003840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIM_ConfigClockSource+0x1c>
 800386c:	2302      	movs	r3, #2
 800386e:	e0b4      	b.n	80039da <HAL_TIM_ConfigClockSource+0x186>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800388e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a8:	d03e      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0xd4>
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	f200 8087 	bhi.w	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	f000 8086 	beq.w	80039c6 <HAL_TIM_ConfigClockSource+0x172>
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038be:	d87f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b70      	cmp	r3, #112	; 0x70
 80038c2:	d01a      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xa6>
 80038c4:	2b70      	cmp	r3, #112	; 0x70
 80038c6:	d87b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b60      	cmp	r3, #96	; 0x60
 80038ca:	d050      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x11a>
 80038cc:	2b60      	cmp	r3, #96	; 0x60
 80038ce:	d877      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b50      	cmp	r3, #80	; 0x50
 80038d2:	d03c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xfa>
 80038d4:	2b50      	cmp	r3, #80	; 0x50
 80038d6:	d873      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d058      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x13a>
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d86f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b30      	cmp	r3, #48	; 0x30
 80038e2:	d064      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d86b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d060      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d867      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05c      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d05a      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038f8:	e062      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	f000 fa73 	bl	8003df4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800391c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
      break;
 8003926:	e04f      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	f000 fa5c 	bl	8003df4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e03c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	461a      	mov	r2, r3
 800395c:	f000 f9d3 	bl	8003d06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2150      	movs	r1, #80	; 0x50
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fa2a 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 800396c:	e02c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	461a      	mov	r2, r3
 800397c:	f000 f9f1 	bl	8003d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2160      	movs	r1, #96	; 0x60
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fa1a 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 800398c:	e01c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 f9b3 	bl	8003d06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2140      	movs	r1, #64	; 0x40
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fa0a 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e00c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 fa01 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 80039be:	e003      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      break;
 80039c4:	e000      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <TIM_Base_SetConfig+0xc8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <TIM_Base_SetConfig+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d017      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <TIM_Base_SetConfig+0xc8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <TIM_Base_SetConfig+0xcc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <TIM_Base_SetConfig+0xd8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x82>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <TIM_Base_SetConfig+0xdc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010800 	.word	0x40010800
 8003b14:	40010c00 	.word	0x40010c00
 8003b18:	40011000 	.word	0x40011000

08003b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0201 	bic.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 0210 	bic.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0320 	bic.w	r3, r3, #32
 8003bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	031b      	lsls	r3, r3, #12
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0201 	bic.w	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 030a 	bic.w	r3, r3, #10
 8003d42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b087      	sub	sp, #28
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f023 0210 	bic.w	r2, r3, #16
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f043 0307 	orr.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e046      	b.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a10      	ldr	r2, [pc, #64]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10c      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40010800 	.word	0x40010800

08003ef0 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003efa:	4802      	ldr	r0, [pc, #8]	; (8003f04 <SPI_CS_High+0x14>)
 8003efc:	f7fe fa3b 	bl	8002376 <HAL_GPIO_WritePin>
}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40020000 	.word	0x40020000

08003f08 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f12:	4802      	ldr	r0, [pc, #8]	; (8003f1c <SPI_CS_Low+0x14>)
 8003f14:	f7fe fa2f 	bl	8002376 <HAL_GPIO_WritePin>
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40020000 	.word	0x40020000

08003f20 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8003f24:	2107      	movs	r1, #7
 8003f26:	200b      	movs	r0, #11
 8003f28:	f000 f896 	bl	8004058 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2009      	movs	r0, #9
 8003f30:	f000 f892 	bl	8004058 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8003f34:	f000 f809 	bl	8003f4a <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8003f38:	f000 f80f 	bl	8003f5a <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8003f3c:	f000 f827 	bl	8003f8e <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8003f40:	200f      	movs	r0, #15
 8003f42:	f000 f812 	bl	8003f6a <MAX7219_SetBrightness>
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8003f4e:	2101      	movs	r1, #1
 8003f50:	200c      	movs	r0, #12
 8003f52:	f000 f881 	bl	8004058 <MAX7219_Write>
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8003f5e:	2100      	movs	r1, #0
 8003f60:	200f      	movs	r0, #15
 8003f62:	f000 f879 	bl	8004058 <MAX7219_Write>
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	200a      	movs	r0, #10
 8003f82:	f000 f869 	bl	8004058 <MAX7219_Write>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	e007      	b.n	8003faa <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f85a 	bl	8004058 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	71fb      	strb	r3, [r7, #7]
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d9f4      	bls.n	8003f9a <MAX7219_Clear+0xc>
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <MAX7219_DisplayChar>:
* Arguments  : digit = digit number (0-7)
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character, char dp) {
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	71fb      	strb	r3, [r7, #7]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	71bb      	strb	r3, [r7, #6]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	717b      	strb	r3, [r7, #5]
    if (dp) {
 8003fcc:	797b      	ldrb	r3, [r7, #5]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <MAX7219_DisplayChar+0x34>
        MAX7219_Write(digit, MAX7219_LookupCode(character) | 0x80); // Active le bit 7 pour le point décimal
 8003fd2:	79bb      	ldrb	r3, [r7, #6]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f819 	bl	800400c <MAX7219_LookupCode>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f836 	bl	8004058 <MAX7219_Write>
    } else {
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
    }
}
 8003fec:	e00a      	b.n	8004004 <MAX7219_DisplayChar+0x4a>
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
 8003fee:	79bb      	ldrb	r3, [r7, #6]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f80b 	bl	800400c <MAX7219_LookupCode>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f82a 	bl	8004058 <MAX7219_Write>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e00f      	b.n	800403c <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <MAX7219_LookupCode+0x48>)
 8004020:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004024:	79fa      	ldrb	r2, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d105      	bne.n	8004036 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	4a09      	ldr	r2, [pc, #36]	; (8004054 <MAX7219_LookupCode+0x48>)
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	e009      	b.n	800404a <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	3301      	adds	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <MAX7219_LookupCode+0x48>)
 8004040:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e9      	bne.n	800401c <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	080050a8 	.word	0x080050a8

08004058 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	460a      	mov	r2, r1
 8004062:	71fb      	strb	r3, [r7, #7]
 8004064:	4613      	mov	r3, r2
 8004066:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8004068:	f7ff ff4e 	bl	8003f08 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f80c 	bl	800408c <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8004074:	79bb      	ldrb	r3, [r7, #6]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f808 	bl	800408c <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 800407c:	f7ff ff38 	bl	8003ef0 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8004080:	f7ff ff42 	bl	8003f08 <SPI_CS_Low>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8004096:	1df9      	adds	r1, r7, #7
 8004098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800409c:	2201      	movs	r2, #1
 800409e:	4803      	ldr	r0, [pc, #12]	; (80040ac <MAX7219_SendByte+0x20>)
 80040a0:	f7fe ffa5 	bl	8002fee <HAL_SPI_Transmit>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	200000e0 	.word	0x200000e0

080040b0 <std>:
 80040b0:	2300      	movs	r3, #0
 80040b2:	b510      	push	{r4, lr}
 80040b4:	4604      	mov	r4, r0
 80040b6:	e9c0 3300 	strd	r3, r3, [r0]
 80040ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040be:	6083      	str	r3, [r0, #8]
 80040c0:	8181      	strh	r1, [r0, #12]
 80040c2:	6643      	str	r3, [r0, #100]	; 0x64
 80040c4:	81c2      	strh	r2, [r0, #14]
 80040c6:	6183      	str	r3, [r0, #24]
 80040c8:	4619      	mov	r1, r3
 80040ca:	2208      	movs	r2, #8
 80040cc:	305c      	adds	r0, #92	; 0x5c
 80040ce:	f000 f9f7 	bl	80044c0 <memset>
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <std+0x58>)
 80040d4:	6224      	str	r4, [r4, #32]
 80040d6:	6263      	str	r3, [r4, #36]	; 0x24
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <std+0x5c>)
 80040da:	62a3      	str	r3, [r4, #40]	; 0x28
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <std+0x60>)
 80040de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <std+0x64>)
 80040e2:	6323      	str	r3, [r4, #48]	; 0x30
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <std+0x68>)
 80040e6:	429c      	cmp	r4, r3
 80040e8:	d006      	beq.n	80040f8 <std+0x48>
 80040ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80040ee:	4294      	cmp	r4, r2
 80040f0:	d002      	beq.n	80040f8 <std+0x48>
 80040f2:	33d0      	adds	r3, #208	; 0xd0
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d105      	bne.n	8004104 <std+0x54>
 80040f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004100:	f000 ba56 	b.w	80045b0 <__retarget_lock_init_recursive>
 8004104:	bd10      	pop	{r4, pc}
 8004106:	bf00      	nop
 8004108:	08004311 	.word	0x08004311
 800410c:	08004333 	.word	0x08004333
 8004110:	0800436b 	.word	0x0800436b
 8004114:	0800438f 	.word	0x0800438f
 8004118:	200001a8 	.word	0x200001a8

0800411c <stdio_exit_handler>:
 800411c:	4a02      	ldr	r2, [pc, #8]	; (8004128 <stdio_exit_handler+0xc>)
 800411e:	4903      	ldr	r1, [pc, #12]	; (800412c <stdio_exit_handler+0x10>)
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <stdio_exit_handler+0x14>)
 8004122:	f000 b869 	b.w	80041f8 <_fwalk_sglue>
 8004126:	bf00      	nop
 8004128:	20000014 	.word	0x20000014
 800412c:	08004e51 	.word	0x08004e51
 8004130:	20000020 	.word	0x20000020

08004134 <cleanup_stdio>:
 8004134:	6841      	ldr	r1, [r0, #4]
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <cleanup_stdio+0x34>)
 8004138:	b510      	push	{r4, lr}
 800413a:	4299      	cmp	r1, r3
 800413c:	4604      	mov	r4, r0
 800413e:	d001      	beq.n	8004144 <cleanup_stdio+0x10>
 8004140:	f000 fe86 	bl	8004e50 <_fflush_r>
 8004144:	68a1      	ldr	r1, [r4, #8]
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <cleanup_stdio+0x38>)
 8004148:	4299      	cmp	r1, r3
 800414a:	d002      	beq.n	8004152 <cleanup_stdio+0x1e>
 800414c:	4620      	mov	r0, r4
 800414e:	f000 fe7f 	bl	8004e50 <_fflush_r>
 8004152:	68e1      	ldr	r1, [r4, #12]
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <cleanup_stdio+0x3c>)
 8004156:	4299      	cmp	r1, r3
 8004158:	d004      	beq.n	8004164 <cleanup_stdio+0x30>
 800415a:	4620      	mov	r0, r4
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f000 be76 	b.w	8004e50 <_fflush_r>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	200001a8 	.word	0x200001a8
 800416c:	20000210 	.word	0x20000210
 8004170:	20000278 	.word	0x20000278

08004174 <global_stdio_init.part.0>:
 8004174:	b510      	push	{r4, lr}
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <global_stdio_init.part.0+0x30>)
 8004178:	4c0b      	ldr	r4, [pc, #44]	; (80041a8 <global_stdio_init.part.0+0x34>)
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <global_stdio_init.part.0+0x38>)
 800417c:	4620      	mov	r0, r4
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	2104      	movs	r1, #4
 8004182:	2200      	movs	r2, #0
 8004184:	f7ff ff94 	bl	80040b0 <std>
 8004188:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800418c:	2201      	movs	r2, #1
 800418e:	2109      	movs	r1, #9
 8004190:	f7ff ff8e 	bl	80040b0 <std>
 8004194:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004198:	2202      	movs	r2, #2
 800419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800419e:	2112      	movs	r1, #18
 80041a0:	f7ff bf86 	b.w	80040b0 <std>
 80041a4:	200002e0 	.word	0x200002e0
 80041a8:	200001a8 	.word	0x200001a8
 80041ac:	0800411d 	.word	0x0800411d

080041b0 <__sfp_lock_acquire>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__sfp_lock_acquire+0x8>)
 80041b2:	f000 b9fe 	b.w	80045b2 <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	200002e9 	.word	0x200002e9

080041bc <__sfp_lock_release>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__sfp_lock_release+0x8>)
 80041be:	f000 b9f9 	b.w	80045b4 <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	200002e9 	.word	0x200002e9

080041c8 <__sinit>:
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	f7ff fff0 	bl	80041b0 <__sfp_lock_acquire>
 80041d0:	6a23      	ldr	r3, [r4, #32]
 80041d2:	b11b      	cbz	r3, 80041dc <__sinit+0x14>
 80041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d8:	f7ff bff0 	b.w	80041bc <__sfp_lock_release>
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <__sinit+0x28>)
 80041de:	6223      	str	r3, [r4, #32]
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__sinit+0x2c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f5      	bne.n	80041d4 <__sinit+0xc>
 80041e8:	f7ff ffc4 	bl	8004174 <global_stdio_init.part.0>
 80041ec:	e7f2      	b.n	80041d4 <__sinit+0xc>
 80041ee:	bf00      	nop
 80041f0:	08004135 	.word	0x08004135
 80041f4:	200002e0 	.word	0x200002e0

080041f8 <_fwalk_sglue>:
 80041f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041fc:	4607      	mov	r7, r0
 80041fe:	4688      	mov	r8, r1
 8004200:	4614      	mov	r4, r2
 8004202:	2600      	movs	r6, #0
 8004204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004208:	f1b9 0901 	subs.w	r9, r9, #1
 800420c:	d505      	bpl.n	800421a <_fwalk_sglue+0x22>
 800420e:	6824      	ldr	r4, [r4, #0]
 8004210:	2c00      	cmp	r4, #0
 8004212:	d1f7      	bne.n	8004204 <_fwalk_sglue+0xc>
 8004214:	4630      	mov	r0, r6
 8004216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800421a:	89ab      	ldrh	r3, [r5, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d907      	bls.n	8004230 <_fwalk_sglue+0x38>
 8004220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004224:	3301      	adds	r3, #1
 8004226:	d003      	beq.n	8004230 <_fwalk_sglue+0x38>
 8004228:	4629      	mov	r1, r5
 800422a:	4638      	mov	r0, r7
 800422c:	47c0      	blx	r8
 800422e:	4306      	orrs	r6, r0
 8004230:	3568      	adds	r5, #104	; 0x68
 8004232:	e7e9      	b.n	8004208 <_fwalk_sglue+0x10>

08004234 <iprintf>:
 8004234:	b40f      	push	{r0, r1, r2, r3}
 8004236:	b507      	push	{r0, r1, r2, lr}
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <iprintf+0x20>)
 800423a:	ab04      	add	r3, sp, #16
 800423c:	6808      	ldr	r0, [r1, #0]
 800423e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004242:	6881      	ldr	r1, [r0, #8]
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f000 fad3 	bl	80047f0 <_vfiprintf_r>
 800424a:	b003      	add	sp, #12
 800424c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004250:	b004      	add	sp, #16
 8004252:	4770      	bx	lr
 8004254:	2000006c 	.word	0x2000006c

08004258 <_puts_r>:
 8004258:	6a03      	ldr	r3, [r0, #32]
 800425a:	b570      	push	{r4, r5, r6, lr}
 800425c:	4605      	mov	r5, r0
 800425e:	460e      	mov	r6, r1
 8004260:	6884      	ldr	r4, [r0, #8]
 8004262:	b90b      	cbnz	r3, 8004268 <_puts_r+0x10>
 8004264:	f7ff ffb0 	bl	80041c8 <__sinit>
 8004268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800426a:	07db      	lsls	r3, r3, #31
 800426c:	d405      	bmi.n	800427a <_puts_r+0x22>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	0598      	lsls	r0, r3, #22
 8004272:	d402      	bmi.n	800427a <_puts_r+0x22>
 8004274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004276:	f000 f99c 	bl	80045b2 <__retarget_lock_acquire_recursive>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	0719      	lsls	r1, r3, #28
 800427e:	d513      	bpl.n	80042a8 <_puts_r+0x50>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	b18b      	cbz	r3, 80042a8 <_puts_r+0x50>
 8004284:	3e01      	subs	r6, #1
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800428c:	3b01      	subs	r3, #1
 800428e:	60a3      	str	r3, [r4, #8]
 8004290:	b9e9      	cbnz	r1, 80042ce <_puts_r+0x76>
 8004292:	2b00      	cmp	r3, #0
 8004294:	da2e      	bge.n	80042f4 <_puts_r+0x9c>
 8004296:	4622      	mov	r2, r4
 8004298:	210a      	movs	r1, #10
 800429a:	4628      	mov	r0, r5
 800429c:	f000 f87b 	bl	8004396 <__swbuf_r>
 80042a0:	3001      	adds	r0, #1
 80042a2:	d007      	beq.n	80042b4 <_puts_r+0x5c>
 80042a4:	250a      	movs	r5, #10
 80042a6:	e007      	b.n	80042b8 <_puts_r+0x60>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f8b0 	bl	8004410 <__swsetup_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0e7      	beq.n	8004284 <_puts_r+0x2c>
 80042b4:	f04f 35ff 	mov.w	r5, #4294967295
 80042b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ba:	07da      	lsls	r2, r3, #31
 80042bc:	d405      	bmi.n	80042ca <_puts_r+0x72>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	059b      	lsls	r3, r3, #22
 80042c2:	d402      	bmi.n	80042ca <_puts_r+0x72>
 80042c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042c6:	f000 f975 	bl	80045b4 <__retarget_lock_release_recursive>
 80042ca:	4628      	mov	r0, r5
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da04      	bge.n	80042dc <_puts_r+0x84>
 80042d2:	69a2      	ldr	r2, [r4, #24]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dc06      	bgt.n	80042e6 <_puts_r+0x8e>
 80042d8:	290a      	cmp	r1, #10
 80042da:	d004      	beq.n	80042e6 <_puts_r+0x8e>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	6022      	str	r2, [r4, #0]
 80042e2:	7019      	strb	r1, [r3, #0]
 80042e4:	e7cf      	b.n	8004286 <_puts_r+0x2e>
 80042e6:	4622      	mov	r2, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f854 	bl	8004396 <__swbuf_r>
 80042ee:	3001      	adds	r0, #1
 80042f0:	d1c9      	bne.n	8004286 <_puts_r+0x2e>
 80042f2:	e7df      	b.n	80042b4 <_puts_r+0x5c>
 80042f4:	250a      	movs	r5, #10
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	6022      	str	r2, [r4, #0]
 80042fc:	701d      	strb	r5, [r3, #0]
 80042fe:	e7db      	b.n	80042b8 <_puts_r+0x60>

08004300 <puts>:
 8004300:	4b02      	ldr	r3, [pc, #8]	; (800430c <puts+0xc>)
 8004302:	4601      	mov	r1, r0
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	f7ff bfa7 	b.w	8004258 <_puts_r>
 800430a:	bf00      	nop
 800430c:	2000006c 	.word	0x2000006c

08004310 <__sread>:
 8004310:	b510      	push	{r4, lr}
 8004312:	460c      	mov	r4, r1
 8004314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004318:	f000 f8fc 	bl	8004514 <_read_r>
 800431c:	2800      	cmp	r0, #0
 800431e:	bfab      	itete	ge
 8004320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004322:	89a3      	ldrhlt	r3, [r4, #12]
 8004324:	181b      	addge	r3, r3, r0
 8004326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800432a:	bfac      	ite	ge
 800432c:	6563      	strge	r3, [r4, #84]	; 0x54
 800432e:	81a3      	strhlt	r3, [r4, #12]
 8004330:	bd10      	pop	{r4, pc}

08004332 <__swrite>:
 8004332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004336:	461f      	mov	r7, r3
 8004338:	898b      	ldrh	r3, [r1, #12]
 800433a:	4605      	mov	r5, r0
 800433c:	05db      	lsls	r3, r3, #23
 800433e:	460c      	mov	r4, r1
 8004340:	4616      	mov	r6, r2
 8004342:	d505      	bpl.n	8004350 <__swrite+0x1e>
 8004344:	2302      	movs	r3, #2
 8004346:	2200      	movs	r2, #0
 8004348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434c:	f000 f8d0 	bl	80044f0 <_lseek_r>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	4632      	mov	r2, r6
 8004354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	4628      	mov	r0, r5
 800435c:	463b      	mov	r3, r7
 800435e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004366:	f000 b8e7 	b.w	8004538 <_write_r>

0800436a <__sseek>:
 800436a:	b510      	push	{r4, lr}
 800436c:	460c      	mov	r4, r1
 800436e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004372:	f000 f8bd 	bl	80044f0 <_lseek_r>
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	bf15      	itete	ne
 800437c:	6560      	strne	r0, [r4, #84]	; 0x54
 800437e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004386:	81a3      	strheq	r3, [r4, #12]
 8004388:	bf18      	it	ne
 800438a:	81a3      	strhne	r3, [r4, #12]
 800438c:	bd10      	pop	{r4, pc}

0800438e <__sclose>:
 800438e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004392:	f000 b89d 	b.w	80044d0 <_close_r>

08004396 <__swbuf_r>:
 8004396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004398:	460e      	mov	r6, r1
 800439a:	4614      	mov	r4, r2
 800439c:	4605      	mov	r5, r0
 800439e:	b118      	cbz	r0, 80043a8 <__swbuf_r+0x12>
 80043a0:	6a03      	ldr	r3, [r0, #32]
 80043a2:	b90b      	cbnz	r3, 80043a8 <__swbuf_r+0x12>
 80043a4:	f7ff ff10 	bl	80041c8 <__sinit>
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	60a3      	str	r3, [r4, #8]
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	071a      	lsls	r2, r3, #28
 80043b0:	d525      	bpl.n	80043fe <__swbuf_r+0x68>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	b31b      	cbz	r3, 80043fe <__swbuf_r+0x68>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	6922      	ldr	r2, [r4, #16]
 80043ba:	b2f6      	uxtb	r6, r6
 80043bc:	1a98      	subs	r0, r3, r2
 80043be:	6963      	ldr	r3, [r4, #20]
 80043c0:	4637      	mov	r7, r6
 80043c2:	4283      	cmp	r3, r0
 80043c4:	dc04      	bgt.n	80043d0 <__swbuf_r+0x3a>
 80043c6:	4621      	mov	r1, r4
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 fd41 	bl	8004e50 <_fflush_r>
 80043ce:	b9e0      	cbnz	r0, 800440a <__swbuf_r+0x74>
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	701e      	strb	r6, [r3, #0]
 80043de:	6962      	ldr	r2, [r4, #20]
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d004      	beq.n	80043f0 <__swbuf_r+0x5a>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	07db      	lsls	r3, r3, #31
 80043ea:	d506      	bpl.n	80043fa <__swbuf_r+0x64>
 80043ec:	2e0a      	cmp	r6, #10
 80043ee:	d104      	bne.n	80043fa <__swbuf_r+0x64>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 fd2c 	bl	8004e50 <_fflush_r>
 80043f8:	b938      	cbnz	r0, 800440a <__swbuf_r+0x74>
 80043fa:	4638      	mov	r0, r7
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fe:	4621      	mov	r1, r4
 8004400:	4628      	mov	r0, r5
 8004402:	f000 f805 	bl	8004410 <__swsetup_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	d0d5      	beq.n	80043b6 <__swbuf_r+0x20>
 800440a:	f04f 37ff 	mov.w	r7, #4294967295
 800440e:	e7f4      	b.n	80043fa <__swbuf_r+0x64>

08004410 <__swsetup_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <__swsetup_r+0xac>)
 8004414:	4605      	mov	r5, r0
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	460c      	mov	r4, r1
 800441a:	b118      	cbz	r0, 8004424 <__swsetup_r+0x14>
 800441c:	6a03      	ldr	r3, [r0, #32]
 800441e:	b90b      	cbnz	r3, 8004424 <__swsetup_r+0x14>
 8004420:	f7ff fed2 	bl	80041c8 <__sinit>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800442a:	0718      	lsls	r0, r3, #28
 800442c:	d422      	bmi.n	8004474 <__swsetup_r+0x64>
 800442e:	06d9      	lsls	r1, r3, #27
 8004430:	d407      	bmi.n	8004442 <__swsetup_r+0x32>
 8004432:	2309      	movs	r3, #9
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800443a:	f04f 30ff 	mov.w	r0, #4294967295
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	e034      	b.n	80044ac <__swsetup_r+0x9c>
 8004442:	0758      	lsls	r0, r3, #29
 8004444:	d512      	bpl.n	800446c <__swsetup_r+0x5c>
 8004446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004448:	b141      	cbz	r1, 800445c <__swsetup_r+0x4c>
 800444a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800444e:	4299      	cmp	r1, r3
 8004450:	d002      	beq.n	8004458 <__swsetup_r+0x48>
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f8b0 	bl	80045b8 <_free_r>
 8004458:	2300      	movs	r3, #0
 800445a:	6363      	str	r3, [r4, #52]	; 0x34
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	2300      	movs	r3, #0
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	b94b      	cbnz	r3, 800448c <__swsetup_r+0x7c>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800447e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004482:	d003      	beq.n	800448c <__swsetup_r+0x7c>
 8004484:	4621      	mov	r1, r4
 8004486:	4628      	mov	r0, r5
 8004488:	f000 fd2f 	bl	8004eea <__smakebuf_r>
 800448c:	89a0      	ldrh	r0, [r4, #12]
 800448e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004492:	f010 0301 	ands.w	r3, r0, #1
 8004496:	d00a      	beq.n	80044ae <__swsetup_r+0x9e>
 8004498:	2300      	movs	r3, #0
 800449a:	60a3      	str	r3, [r4, #8]
 800449c:	6963      	ldr	r3, [r4, #20]
 800449e:	425b      	negs	r3, r3
 80044a0:	61a3      	str	r3, [r4, #24]
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	b943      	cbnz	r3, 80044b8 <__swsetup_r+0xa8>
 80044a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044aa:	d1c4      	bne.n	8004436 <__swsetup_r+0x26>
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	0781      	lsls	r1, r0, #30
 80044b0:	bf58      	it	pl
 80044b2:	6963      	ldrpl	r3, [r4, #20]
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	e7f4      	b.n	80044a2 <__swsetup_r+0x92>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7f7      	b.n	80044ac <__swsetup_r+0x9c>
 80044bc:	2000006c 	.word	0x2000006c

080044c0 <memset>:
 80044c0:	4603      	mov	r3, r0
 80044c2:	4402      	add	r2, r0
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d100      	bne.n	80044ca <memset+0xa>
 80044c8:	4770      	bx	lr
 80044ca:	f803 1b01 	strb.w	r1, [r3], #1
 80044ce:	e7f9      	b.n	80044c4 <memset+0x4>

080044d0 <_close_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	2300      	movs	r3, #0
 80044d4:	4d05      	ldr	r5, [pc, #20]	; (80044ec <_close_r+0x1c>)
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	f7fc fe9d 	bl	800121a <_close>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_close_r+0x1a>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_close_r+0x1a>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	200002e4 	.word	0x200002e4

080044f0 <_lseek_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	2200      	movs	r2, #0
 80044fa:	4d05      	ldr	r5, [pc, #20]	; (8004510 <_lseek_r+0x20>)
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc feaf 	bl	8001262 <_lseek>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_lseek_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_lseek_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	200002e4 	.word	0x200002e4

08004514 <_read_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	2200      	movs	r2, #0
 800451e:	4d05      	ldr	r5, [pc, #20]	; (8004534 <_read_r+0x20>)
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc fe5c 	bl	80011e0 <_read>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_read_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_read_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	200002e4 	.word	0x200002e4

08004538 <_write_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	2200      	movs	r2, #0
 8004542:	4d05      	ldr	r5, [pc, #20]	; (8004558 <_write_r+0x20>)
 8004544:	602a      	str	r2, [r5, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f7fc f9ae 	bl	80008a8 <_write>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_write_r+0x1e>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_write_r+0x1e>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200002e4 	.word	0x200002e4

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000006c 	.word	0x2000006c

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	2600      	movs	r6, #0
 800456c:	4d0c      	ldr	r5, [pc, #48]	; (80045a0 <__libc_init_array+0x38>)
 800456e:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	f000 fd34 	bl	8004fe4 <_init>
 800457c:	2600      	movs	r6, #0
 800457e:	4d0a      	ldr	r5, [pc, #40]	; (80045a8 <__libc_init_array+0x40>)
 8004580:	4c0a      	ldr	r4, [pc, #40]	; (80045ac <__libc_init_array+0x44>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08005120 	.word	0x08005120
 80045a4:	08005120 	.word	0x08005120
 80045a8:	08005120 	.word	0x08005120
 80045ac:	08005124 	.word	0x08005124

080045b0 <__retarget_lock_init_recursive>:
 80045b0:	4770      	bx	lr

080045b2 <__retarget_lock_acquire_recursive>:
 80045b2:	4770      	bx	lr

080045b4 <__retarget_lock_release_recursive>:
 80045b4:	4770      	bx	lr
	...

080045b8 <_free_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	2900      	cmp	r1, #0
 80045be:	d040      	beq.n	8004642 <_free_r+0x8a>
 80045c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c4:	1f0c      	subs	r4, r1, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfb8      	it	lt
 80045ca:	18e4      	addlt	r4, r4, r3
 80045cc:	f000 f8dc 	bl	8004788 <__malloc_lock>
 80045d0:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <_free_r+0x8c>)
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	b933      	cbnz	r3, 80045e4 <_free_r+0x2c>
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	6014      	str	r4, [r2, #0]
 80045da:	4628      	mov	r0, r5
 80045dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e0:	f000 b8d8 	b.w	8004794 <__malloc_unlock>
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d908      	bls.n	80045fa <_free_r+0x42>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	1821      	adds	r1, r4, r0
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf01      	itttt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	1809      	addeq	r1, r1, r0
 80045f6:	6021      	streq	r1, [r4, #0]
 80045f8:	e7ed      	b.n	80045d6 <_free_r+0x1e>
 80045fa:	461a      	mov	r2, r3
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b10b      	cbz	r3, 8004604 <_free_r+0x4c>
 8004600:	42a3      	cmp	r3, r4
 8004602:	d9fa      	bls.n	80045fa <_free_r+0x42>
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	1850      	adds	r0, r2, r1
 8004608:	42a0      	cmp	r0, r4
 800460a:	d10b      	bne.n	8004624 <_free_r+0x6c>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	4401      	add	r1, r0
 8004610:	1850      	adds	r0, r2, r1
 8004612:	4283      	cmp	r3, r0
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	d1e0      	bne.n	80045da <_free_r+0x22>
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4408      	add	r0, r1
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	6053      	str	r3, [r2, #4]
 8004622:	e7da      	b.n	80045da <_free_r+0x22>
 8004624:	d902      	bls.n	800462c <_free_r+0x74>
 8004626:	230c      	movs	r3, #12
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	e7d6      	b.n	80045da <_free_r+0x22>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	1821      	adds	r1, r4, r0
 8004630:	428b      	cmp	r3, r1
 8004632:	bf01      	itttt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	6054      	str	r4, [r2, #4]
 8004640:	e7cb      	b.n	80045da <_free_r+0x22>
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	200002ec 	.word	0x200002ec

08004648 <sbrk_aligned>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4e0e      	ldr	r6, [pc, #56]	; (8004684 <sbrk_aligned+0x3c>)
 800464c:	460c      	mov	r4, r1
 800464e:	6831      	ldr	r1, [r6, #0]
 8004650:	4605      	mov	r5, r0
 8004652:	b911      	cbnz	r1, 800465a <sbrk_aligned+0x12>
 8004654:	f000 fca8 	bl	8004fa8 <_sbrk_r>
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 fca3 	bl	8004fa8 <_sbrk_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	d00a      	beq.n	800467c <sbrk_aligned+0x34>
 8004666:	1cc4      	adds	r4, r0, #3
 8004668:	f024 0403 	bic.w	r4, r4, #3
 800466c:	42a0      	cmp	r0, r4
 800466e:	d007      	beq.n	8004680 <sbrk_aligned+0x38>
 8004670:	1a21      	subs	r1, r4, r0
 8004672:	4628      	mov	r0, r5
 8004674:	f000 fc98 	bl	8004fa8 <_sbrk_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d101      	bne.n	8004680 <sbrk_aligned+0x38>
 800467c:	f04f 34ff 	mov.w	r4, #4294967295
 8004680:	4620      	mov	r0, r4
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	200002f0 	.word	0x200002f0

08004688 <_malloc_r>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	1ccd      	adds	r5, r1, #3
 800468e:	f025 0503 	bic.w	r5, r5, #3
 8004692:	3508      	adds	r5, #8
 8004694:	2d0c      	cmp	r5, #12
 8004696:	bf38      	it	cc
 8004698:	250c      	movcc	r5, #12
 800469a:	2d00      	cmp	r5, #0
 800469c:	4607      	mov	r7, r0
 800469e:	db01      	blt.n	80046a4 <_malloc_r+0x1c>
 80046a0:	42a9      	cmp	r1, r5
 80046a2:	d905      	bls.n	80046b0 <_malloc_r+0x28>
 80046a4:	230c      	movs	r3, #12
 80046a6:	2600      	movs	r6, #0
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4630      	mov	r0, r6
 80046ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004784 <_malloc_r+0xfc>
 80046b4:	f000 f868 	bl	8004788 <__malloc_lock>
 80046b8:	f8d8 3000 	ldr.w	r3, [r8]
 80046bc:	461c      	mov	r4, r3
 80046be:	bb5c      	cbnz	r4, 8004718 <_malloc_r+0x90>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4638      	mov	r0, r7
 80046c4:	f7ff ffc0 	bl	8004648 <sbrk_aligned>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	4604      	mov	r4, r0
 80046cc:	d155      	bne.n	800477a <_malloc_r+0xf2>
 80046ce:	f8d8 4000 	ldr.w	r4, [r8]
 80046d2:	4626      	mov	r6, r4
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	d145      	bne.n	8004764 <_malloc_r+0xdc>
 80046d8:	2c00      	cmp	r4, #0
 80046da:	d048      	beq.n	800476e <_malloc_r+0xe6>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	4631      	mov	r1, r6
 80046e0:	4638      	mov	r0, r7
 80046e2:	eb04 0903 	add.w	r9, r4, r3
 80046e6:	f000 fc5f 	bl	8004fa8 <_sbrk_r>
 80046ea:	4581      	cmp	r9, r0
 80046ec:	d13f      	bne.n	800476e <_malloc_r+0xe6>
 80046ee:	6821      	ldr	r1, [r4, #0]
 80046f0:	4638      	mov	r0, r7
 80046f2:	1a6d      	subs	r5, r5, r1
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7ff ffa7 	bl	8004648 <sbrk_aligned>
 80046fa:	3001      	adds	r0, #1
 80046fc:	d037      	beq.n	800476e <_malloc_r+0xe6>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	442b      	add	r3, r5
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	f8d8 3000 	ldr.w	r3, [r8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d038      	beq.n	800477e <_malloc_r+0xf6>
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	42a2      	cmp	r2, r4
 8004710:	d12b      	bne.n	800476a <_malloc_r+0xe2>
 8004712:	2200      	movs	r2, #0
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e00f      	b.n	8004738 <_malloc_r+0xb0>
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	1b52      	subs	r2, r2, r5
 800471c:	d41f      	bmi.n	800475e <_malloc_r+0xd6>
 800471e:	2a0b      	cmp	r2, #11
 8004720:	d917      	bls.n	8004752 <_malloc_r+0xca>
 8004722:	1961      	adds	r1, r4, r5
 8004724:	42a3      	cmp	r3, r4
 8004726:	6025      	str	r5, [r4, #0]
 8004728:	bf18      	it	ne
 800472a:	6059      	strne	r1, [r3, #4]
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	bf08      	it	eq
 8004730:	f8c8 1000 	streq.w	r1, [r8]
 8004734:	5162      	str	r2, [r4, r5]
 8004736:	604b      	str	r3, [r1, #4]
 8004738:	4638      	mov	r0, r7
 800473a:	f104 060b 	add.w	r6, r4, #11
 800473e:	f000 f829 	bl	8004794 <__malloc_unlock>
 8004742:	f026 0607 	bic.w	r6, r6, #7
 8004746:	1d23      	adds	r3, r4, #4
 8004748:	1af2      	subs	r2, r6, r3
 800474a:	d0ae      	beq.n	80046aa <_malloc_r+0x22>
 800474c:	1b9b      	subs	r3, r3, r6
 800474e:	50a3      	str	r3, [r4, r2]
 8004750:	e7ab      	b.n	80046aa <_malloc_r+0x22>
 8004752:	42a3      	cmp	r3, r4
 8004754:	6862      	ldr	r2, [r4, #4]
 8004756:	d1dd      	bne.n	8004714 <_malloc_r+0x8c>
 8004758:	f8c8 2000 	str.w	r2, [r8]
 800475c:	e7ec      	b.n	8004738 <_malloc_r+0xb0>
 800475e:	4623      	mov	r3, r4
 8004760:	6864      	ldr	r4, [r4, #4]
 8004762:	e7ac      	b.n	80046be <_malloc_r+0x36>
 8004764:	4634      	mov	r4, r6
 8004766:	6876      	ldr	r6, [r6, #4]
 8004768:	e7b4      	b.n	80046d4 <_malloc_r+0x4c>
 800476a:	4613      	mov	r3, r2
 800476c:	e7cc      	b.n	8004708 <_malloc_r+0x80>
 800476e:	230c      	movs	r3, #12
 8004770:	4638      	mov	r0, r7
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	f000 f80e 	bl	8004794 <__malloc_unlock>
 8004778:	e797      	b.n	80046aa <_malloc_r+0x22>
 800477a:	6025      	str	r5, [r4, #0]
 800477c:	e7dc      	b.n	8004738 <_malloc_r+0xb0>
 800477e:	605b      	str	r3, [r3, #4]
 8004780:	deff      	udf	#255	; 0xff
 8004782:	bf00      	nop
 8004784:	200002ec 	.word	0x200002ec

08004788 <__malloc_lock>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__malloc_lock+0x8>)
 800478a:	f7ff bf12 	b.w	80045b2 <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	200002e8 	.word	0x200002e8

08004794 <__malloc_unlock>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__malloc_unlock+0x8>)
 8004796:	f7ff bf0d 	b.w	80045b4 <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	200002e8 	.word	0x200002e8

080047a0 <__sfputc_r>:
 80047a0:	6893      	ldr	r3, [r2, #8]
 80047a2:	b410      	push	{r4}
 80047a4:	3b01      	subs	r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	da07      	bge.n	80047bc <__sfputc_r+0x1c>
 80047ac:	6994      	ldr	r4, [r2, #24]
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	db01      	blt.n	80047b6 <__sfputc_r+0x16>
 80047b2:	290a      	cmp	r1, #10
 80047b4:	d102      	bne.n	80047bc <__sfputc_r+0x1c>
 80047b6:	bc10      	pop	{r4}
 80047b8:	f7ff bded 	b.w	8004396 <__swbuf_r>
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	1c58      	adds	r0, r3, #1
 80047c0:	6010      	str	r0, [r2, #0]
 80047c2:	7019      	strb	r1, [r3, #0]
 80047c4:	4608      	mov	r0, r1
 80047c6:	bc10      	pop	{r4}
 80047c8:	4770      	bx	lr

080047ca <__sfputs_r>:
 80047ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047cc:	4606      	mov	r6, r0
 80047ce:	460f      	mov	r7, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	18d5      	adds	r5, r2, r3
 80047d4:	42ac      	cmp	r4, r5
 80047d6:	d101      	bne.n	80047dc <__sfputs_r+0x12>
 80047d8:	2000      	movs	r0, #0
 80047da:	e007      	b.n	80047ec <__sfputs_r+0x22>
 80047dc:	463a      	mov	r2, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e4:	f7ff ffdc 	bl	80047a0 <__sfputc_r>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d1f3      	bne.n	80047d4 <__sfputs_r+0xa>
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047f0 <_vfiprintf_r>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	460d      	mov	r5, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	4698      	mov	r8, r3
 80047fa:	4606      	mov	r6, r0
 80047fc:	b09d      	sub	sp, #116	; 0x74
 80047fe:	b118      	cbz	r0, 8004808 <_vfiprintf_r+0x18>
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	b90b      	cbnz	r3, 8004808 <_vfiprintf_r+0x18>
 8004804:	f7ff fce0 	bl	80041c8 <__sinit>
 8004808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800480a:	07d9      	lsls	r1, r3, #31
 800480c:	d405      	bmi.n	800481a <_vfiprintf_r+0x2a>
 800480e:	89ab      	ldrh	r3, [r5, #12]
 8004810:	059a      	lsls	r2, r3, #22
 8004812:	d402      	bmi.n	800481a <_vfiprintf_r+0x2a>
 8004814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004816:	f7ff fecc 	bl	80045b2 <__retarget_lock_acquire_recursive>
 800481a:	89ab      	ldrh	r3, [r5, #12]
 800481c:	071b      	lsls	r3, r3, #28
 800481e:	d501      	bpl.n	8004824 <_vfiprintf_r+0x34>
 8004820:	692b      	ldr	r3, [r5, #16]
 8004822:	b99b      	cbnz	r3, 800484c <_vfiprintf_r+0x5c>
 8004824:	4629      	mov	r1, r5
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff fdf2 	bl	8004410 <__swsetup_r>
 800482c:	b170      	cbz	r0, 800484c <_vfiprintf_r+0x5c>
 800482e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004830:	07dc      	lsls	r4, r3, #31
 8004832:	d504      	bpl.n	800483e <_vfiprintf_r+0x4e>
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	b01d      	add	sp, #116	; 0x74
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	89ab      	ldrh	r3, [r5, #12]
 8004840:	0598      	lsls	r0, r3, #22
 8004842:	d4f7      	bmi.n	8004834 <_vfiprintf_r+0x44>
 8004844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004846:	f7ff feb5 	bl	80045b4 <__retarget_lock_release_recursive>
 800484a:	e7f3      	b.n	8004834 <_vfiprintf_r+0x44>
 800484c:	2300      	movs	r3, #0
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	2320      	movs	r3, #32
 8004852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f04f 0901 	mov.w	r9, #1
 800485c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004860:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004a10 <_vfiprintf_r+0x220>
 8004864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004868:	4623      	mov	r3, r4
 800486a:	469a      	mov	sl, r3
 800486c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004870:	b10a      	cbz	r2, 8004876 <_vfiprintf_r+0x86>
 8004872:	2a25      	cmp	r2, #37	; 0x25
 8004874:	d1f9      	bne.n	800486a <_vfiprintf_r+0x7a>
 8004876:	ebba 0b04 	subs.w	fp, sl, r4
 800487a:	d00b      	beq.n	8004894 <_vfiprintf_r+0xa4>
 800487c:	465b      	mov	r3, fp
 800487e:	4622      	mov	r2, r4
 8004880:	4629      	mov	r1, r5
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ffa1 	bl	80047ca <__sfputs_r>
 8004888:	3001      	adds	r0, #1
 800488a:	f000 80a9 	beq.w	80049e0 <_vfiprintf_r+0x1f0>
 800488e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004890:	445a      	add	r2, fp
 8004892:	9209      	str	r2, [sp, #36]	; 0x24
 8004894:	f89a 3000 	ldrb.w	r3, [sl]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a1 	beq.w	80049e0 <_vfiprintf_r+0x1f0>
 800489e:	2300      	movs	r3, #0
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a8:	f10a 0a01 	add.w	sl, sl, #1
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9307      	str	r3, [sp, #28]
 80048b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b4:	931a      	str	r3, [sp, #104]	; 0x68
 80048b6:	4654      	mov	r4, sl
 80048b8:	2205      	movs	r2, #5
 80048ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048be:	4854      	ldr	r0, [pc, #336]	; (8004a10 <_vfiprintf_r+0x220>)
 80048c0:	f000 fb82 	bl	8004fc8 <memchr>
 80048c4:	9a04      	ldr	r2, [sp, #16]
 80048c6:	b9d8      	cbnz	r0, 8004900 <_vfiprintf_r+0x110>
 80048c8:	06d1      	lsls	r1, r2, #27
 80048ca:	bf44      	itt	mi
 80048cc:	2320      	movmi	r3, #32
 80048ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d2:	0713      	lsls	r3, r2, #28
 80048d4:	bf44      	itt	mi
 80048d6:	232b      	movmi	r3, #43	; 0x2b
 80048d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048dc:	f89a 3000 	ldrb.w	r3, [sl]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d015      	beq.n	8004910 <_vfiprintf_r+0x120>
 80048e4:	4654      	mov	r4, sl
 80048e6:	2000      	movs	r0, #0
 80048e8:	f04f 0c0a 	mov.w	ip, #10
 80048ec:	9a07      	ldr	r2, [sp, #28]
 80048ee:	4621      	mov	r1, r4
 80048f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f4:	3b30      	subs	r3, #48	; 0x30
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d94d      	bls.n	8004996 <_vfiprintf_r+0x1a6>
 80048fa:	b1b0      	cbz	r0, 800492a <_vfiprintf_r+0x13a>
 80048fc:	9207      	str	r2, [sp, #28]
 80048fe:	e014      	b.n	800492a <_vfiprintf_r+0x13a>
 8004900:	eba0 0308 	sub.w	r3, r0, r8
 8004904:	fa09 f303 	lsl.w	r3, r9, r3
 8004908:	4313      	orrs	r3, r2
 800490a:	46a2      	mov	sl, r4
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	e7d2      	b.n	80048b6 <_vfiprintf_r+0xc6>
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	1d19      	adds	r1, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	9103      	str	r1, [sp, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfbb      	ittet	lt
 800491c:	425b      	neglt	r3, r3
 800491e:	f042 0202 	orrlt.w	r2, r2, #2
 8004922:	9307      	strge	r3, [sp, #28]
 8004924:	9307      	strlt	r3, [sp, #28]
 8004926:	bfb8      	it	lt
 8004928:	9204      	strlt	r2, [sp, #16]
 800492a:	7823      	ldrb	r3, [r4, #0]
 800492c:	2b2e      	cmp	r3, #46	; 0x2e
 800492e:	d10c      	bne.n	800494a <_vfiprintf_r+0x15a>
 8004930:	7863      	ldrb	r3, [r4, #1]
 8004932:	2b2a      	cmp	r3, #42	; 0x2a
 8004934:	d134      	bne.n	80049a0 <_vfiprintf_r+0x1b0>
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	3402      	adds	r4, #2
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	9203      	str	r2, [sp, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	bfb8      	it	lt
 8004944:	f04f 33ff 	movlt.w	r3, #4294967295
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a14 <_vfiprintf_r+0x224>
 800494e:	2203      	movs	r2, #3
 8004950:	4650      	mov	r0, sl
 8004952:	7821      	ldrb	r1, [r4, #0]
 8004954:	f000 fb38 	bl	8004fc8 <memchr>
 8004958:	b138      	cbz	r0, 800496a <_vfiprintf_r+0x17a>
 800495a:	2240      	movs	r2, #64	; 0x40
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	eba0 000a 	sub.w	r0, r0, sl
 8004962:	4082      	lsls	r2, r0
 8004964:	4313      	orrs	r3, r2
 8004966:	3401      	adds	r4, #1
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496e:	2206      	movs	r2, #6
 8004970:	4829      	ldr	r0, [pc, #164]	; (8004a18 <_vfiprintf_r+0x228>)
 8004972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004976:	f000 fb27 	bl	8004fc8 <memchr>
 800497a:	2800      	cmp	r0, #0
 800497c:	d03f      	beq.n	80049fe <_vfiprintf_r+0x20e>
 800497e:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <_vfiprintf_r+0x22c>)
 8004980:	bb1b      	cbnz	r3, 80049ca <_vfiprintf_r+0x1da>
 8004982:	9b03      	ldr	r3, [sp, #12]
 8004984:	3307      	adds	r3, #7
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	3308      	adds	r3, #8
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	443b      	add	r3, r7
 8004992:	9309      	str	r3, [sp, #36]	; 0x24
 8004994:	e768      	b.n	8004868 <_vfiprintf_r+0x78>
 8004996:	460c      	mov	r4, r1
 8004998:	2001      	movs	r0, #1
 800499a:	fb0c 3202 	mla	r2, ip, r2, r3
 800499e:	e7a6      	b.n	80048ee <_vfiprintf_r+0xfe>
 80049a0:	2300      	movs	r3, #0
 80049a2:	f04f 0c0a 	mov.w	ip, #10
 80049a6:	4619      	mov	r1, r3
 80049a8:	3401      	adds	r4, #1
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	4620      	mov	r0, r4
 80049ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b2:	3a30      	subs	r2, #48	; 0x30
 80049b4:	2a09      	cmp	r2, #9
 80049b6:	d903      	bls.n	80049c0 <_vfiprintf_r+0x1d0>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0c6      	beq.n	800494a <_vfiprintf_r+0x15a>
 80049bc:	9105      	str	r1, [sp, #20]
 80049be:	e7c4      	b.n	800494a <_vfiprintf_r+0x15a>
 80049c0:	4604      	mov	r4, r0
 80049c2:	2301      	movs	r3, #1
 80049c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c8:	e7f0      	b.n	80049ac <_vfiprintf_r+0x1bc>
 80049ca:	ab03      	add	r3, sp, #12
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	462a      	mov	r2, r5
 80049d0:	4630      	mov	r0, r6
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <_vfiprintf_r+0x230>)
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	f3af 8000 	nop.w
 80049da:	4607      	mov	r7, r0
 80049dc:	1c78      	adds	r0, r7, #1
 80049de:	d1d6      	bne.n	800498e <_vfiprintf_r+0x19e>
 80049e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e2:	07d9      	lsls	r1, r3, #31
 80049e4:	d405      	bmi.n	80049f2 <_vfiprintf_r+0x202>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	059a      	lsls	r2, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_vfiprintf_r+0x202>
 80049ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ee:	f7ff fde1 	bl	80045b4 <__retarget_lock_release_recursive>
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	065b      	lsls	r3, r3, #25
 80049f6:	f53f af1d 	bmi.w	8004834 <_vfiprintf_r+0x44>
 80049fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049fc:	e71c      	b.n	8004838 <_vfiprintf_r+0x48>
 80049fe:	ab03      	add	r3, sp, #12
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	462a      	mov	r2, r5
 8004a04:	4630      	mov	r0, r6
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <_vfiprintf_r+0x230>)
 8004a08:	a904      	add	r1, sp, #16
 8004a0a:	f000 f87d 	bl	8004b08 <_printf_i>
 8004a0e:	e7e4      	b.n	80049da <_vfiprintf_r+0x1ea>
 8004a10:	080050e2 	.word	0x080050e2
 8004a14:	080050e8 	.word	0x080050e8
 8004a18:	080050ec 	.word	0x080050ec
 8004a1c:	00000000 	.word	0x00000000
 8004a20:	080047cb 	.word	0x080047cb

08004a24 <_printf_common>:
 8004a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	4616      	mov	r6, r2
 8004a2a:	4699      	mov	r9, r3
 8004a2c:	688a      	ldr	r2, [r1, #8]
 8004a2e:	690b      	ldr	r3, [r1, #16]
 8004a30:	4607      	mov	r7, r0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bfb8      	it	lt
 8004a36:	4613      	movlt	r3, r2
 8004a38:	6033      	str	r3, [r6, #0]
 8004a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a3e:	460c      	mov	r4, r1
 8004a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a44:	b10a      	cbz	r2, 8004a4a <_printf_common+0x26>
 8004a46:	3301      	adds	r3, #1
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	0699      	lsls	r1, r3, #26
 8004a4e:	bf42      	ittt	mi
 8004a50:	6833      	ldrmi	r3, [r6, #0]
 8004a52:	3302      	addmi	r3, #2
 8004a54:	6033      	strmi	r3, [r6, #0]
 8004a56:	6825      	ldr	r5, [r4, #0]
 8004a58:	f015 0506 	ands.w	r5, r5, #6
 8004a5c:	d106      	bne.n	8004a6c <_printf_common+0x48>
 8004a5e:	f104 0a19 	add.w	sl, r4, #25
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	6832      	ldr	r2, [r6, #0]
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	42ab      	cmp	r3, r5
 8004a6a:	dc2b      	bgt.n	8004ac4 <_printf_common+0xa0>
 8004a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a70:	1e13      	subs	r3, r2, #0
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	bf18      	it	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	0692      	lsls	r2, r2, #26
 8004a7a:	d430      	bmi.n	8004ade <_printf_common+0xba>
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a84:	47c0      	blx	r8
 8004a86:	3001      	adds	r0, #1
 8004a88:	d023      	beq.n	8004ad2 <_printf_common+0xae>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	6922      	ldr	r2, [r4, #16]
 8004a8e:	f003 0306 	and.w	r3, r3, #6
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	bf14      	ite	ne
 8004a96:	2500      	movne	r5, #0
 8004a98:	6833      	ldreq	r3, [r6, #0]
 8004a9a:	f04f 0600 	mov.w	r6, #0
 8004a9e:	bf08      	it	eq
 8004aa0:	68e5      	ldreq	r5, [r4, #12]
 8004aa2:	f104 041a 	add.w	r4, r4, #26
 8004aa6:	bf08      	it	eq
 8004aa8:	1aed      	subeq	r5, r5, r3
 8004aaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004aae:	bf08      	it	eq
 8004ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bfc4      	itt	gt
 8004ab8:	1a9b      	subgt	r3, r3, r2
 8004aba:	18ed      	addgt	r5, r5, r3
 8004abc:	42b5      	cmp	r5, r6
 8004abe:	d11a      	bne.n	8004af6 <_printf_common+0xd2>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e008      	b.n	8004ad6 <_printf_common+0xb2>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4652      	mov	r2, sl
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d103      	bne.n	8004ada <_printf_common+0xb6>
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ada:	3501      	adds	r5, #1
 8004adc:	e7c1      	b.n	8004a62 <_printf_common+0x3e>
 8004ade:	2030      	movs	r0, #48	; 0x30
 8004ae0:	18e1      	adds	r1, r4, r3
 8004ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aec:	4422      	add	r2, r4
 8004aee:	3302      	adds	r3, #2
 8004af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af4:	e7c2      	b.n	8004a7c <_printf_common+0x58>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4622      	mov	r2, r4
 8004afa:	4649      	mov	r1, r9
 8004afc:	4638      	mov	r0, r7
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d0e6      	beq.n	8004ad2 <_printf_common+0xae>
 8004b04:	3601      	adds	r6, #1
 8004b06:	e7d9      	b.n	8004abc <_printf_common+0x98>

08004b08 <_printf_i>:
 8004b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	7e0f      	ldrb	r7, [r1, #24]
 8004b0e:	4691      	mov	r9, r2
 8004b10:	2f78      	cmp	r7, #120	; 0x78
 8004b12:	4680      	mov	r8, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	469a      	mov	sl, r3
 8004b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b1e:	d807      	bhi.n	8004b30 <_printf_i+0x28>
 8004b20:	2f62      	cmp	r7, #98	; 0x62
 8004b22:	d80a      	bhi.n	8004b3a <_printf_i+0x32>
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	f000 80d5 	beq.w	8004cd4 <_printf_i+0x1cc>
 8004b2a:	2f58      	cmp	r7, #88	; 0x58
 8004b2c:	f000 80c1 	beq.w	8004cb2 <_printf_i+0x1aa>
 8004b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b38:	e03a      	b.n	8004bb0 <_printf_i+0xa8>
 8004b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b3e:	2b15      	cmp	r3, #21
 8004b40:	d8f6      	bhi.n	8004b30 <_printf_i+0x28>
 8004b42:	a101      	add	r1, pc, #4	; (adr r1, 8004b48 <_printf_i+0x40>)
 8004b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b48:	08004ba1 	.word	0x08004ba1
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004b31 	.word	0x08004b31
 8004b54:	08004b31 	.word	0x08004b31
 8004b58:	08004b31 	.word	0x08004b31
 8004b5c:	08004b31 	.word	0x08004b31
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004b31 	.word	0x08004b31
 8004b68:	08004b31 	.word	0x08004b31
 8004b6c:	08004b31 	.word	0x08004b31
 8004b70:	08004b31 	.word	0x08004b31
 8004b74:	08004cbb 	.word	0x08004cbb
 8004b78:	08004be1 	.word	0x08004be1
 8004b7c:	08004c75 	.word	0x08004c75
 8004b80:	08004b31 	.word	0x08004b31
 8004b84:	08004b31 	.word	0x08004b31
 8004b88:	08004cdd 	.word	0x08004cdd
 8004b8c:	08004b31 	.word	0x08004b31
 8004b90:	08004be1 	.word	0x08004be1
 8004b94:	08004b31 	.word	0x08004b31
 8004b98:	08004b31 	.word	0x08004b31
 8004b9c:	08004c7d 	.word	0x08004c7d
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a0      	b.n	8004cf6 <_printf_i+0x1ee>
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	0607      	lsls	r7, r0, #24
 8004bba:	f103 0104 	add.w	r1, r3, #4
 8004bbe:	6029      	str	r1, [r5, #0]
 8004bc0:	d501      	bpl.n	8004bc6 <_printf_i+0xbe>
 8004bc2:	681e      	ldr	r6, [r3, #0]
 8004bc4:	e003      	b.n	8004bce <_printf_i+0xc6>
 8004bc6:	0646      	lsls	r6, r0, #25
 8004bc8:	d5fb      	bpl.n	8004bc2 <_printf_i+0xba>
 8004bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	da03      	bge.n	8004bda <_printf_i+0xd2>
 8004bd2:	232d      	movs	r3, #45	; 0x2d
 8004bd4:	4276      	negs	r6, r6
 8004bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bda:	230a      	movs	r3, #10
 8004bdc:	4859      	ldr	r0, [pc, #356]	; (8004d44 <_printf_i+0x23c>)
 8004bde:	e012      	b.n	8004c06 <_printf_i+0xfe>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	1d19      	adds	r1, r3, #4
 8004be6:	6029      	str	r1, [r5, #0]
 8004be8:	0605      	lsls	r5, r0, #24
 8004bea:	d501      	bpl.n	8004bf0 <_printf_i+0xe8>
 8004bec:	681e      	ldr	r6, [r3, #0]
 8004bee:	e002      	b.n	8004bf6 <_printf_i+0xee>
 8004bf0:	0641      	lsls	r1, r0, #25
 8004bf2:	d5fb      	bpl.n	8004bec <_printf_i+0xe4>
 8004bf4:	881e      	ldrh	r6, [r3, #0]
 8004bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2308      	moveq	r3, #8
 8004bfc:	230a      	movne	r3, #10
 8004bfe:	4851      	ldr	r0, [pc, #324]	; (8004d44 <_printf_i+0x23c>)
 8004c00:	2100      	movs	r1, #0
 8004c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c06:	6865      	ldr	r5, [r4, #4]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	bfa8      	it	ge
 8004c0c:	6821      	ldrge	r1, [r4, #0]
 8004c0e:	60a5      	str	r5, [r4, #8]
 8004c10:	bfa4      	itt	ge
 8004c12:	f021 0104 	bicge.w	r1, r1, #4
 8004c16:	6021      	strge	r1, [r4, #0]
 8004c18:	b90e      	cbnz	r6, 8004c1e <_printf_i+0x116>
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	d04b      	beq.n	8004cb6 <_printf_i+0x1ae>
 8004c1e:	4615      	mov	r5, r2
 8004c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c24:	fb03 6711 	mls	r7, r3, r1, r6
 8004c28:	5dc7      	ldrb	r7, [r0, r7]
 8004c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c2e:	4637      	mov	r7, r6
 8004c30:	42bb      	cmp	r3, r7
 8004c32:	460e      	mov	r6, r1
 8004c34:	d9f4      	bls.n	8004c20 <_printf_i+0x118>
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d10b      	bne.n	8004c52 <_printf_i+0x14a>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	07de      	lsls	r6, r3, #31
 8004c3e:	d508      	bpl.n	8004c52 <_printf_i+0x14a>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	6861      	ldr	r1, [r4, #4]
 8004c44:	4299      	cmp	r1, r3
 8004c46:	bfde      	ittt	le
 8004c48:	2330      	movle	r3, #48	; 0x30
 8004c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c52:	1b52      	subs	r2, r2, r5
 8004c54:	6122      	str	r2, [r4, #16]
 8004c56:	464b      	mov	r3, r9
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f8cd a000 	str.w	sl, [sp]
 8004c60:	aa03      	add	r2, sp, #12
 8004c62:	f7ff fedf 	bl	8004a24 <_printf_common>
 8004c66:	3001      	adds	r0, #1
 8004c68:	d14a      	bne.n	8004d00 <_printf_i+0x1f8>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	b004      	add	sp, #16
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	f043 0320 	orr.w	r3, r3, #32
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	2778      	movs	r7, #120	; 0x78
 8004c7e:	4832      	ldr	r0, [pc, #200]	; (8004d48 <_printf_i+0x240>)
 8004c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	061f      	lsls	r7, r3, #24
 8004c8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c8e:	d402      	bmi.n	8004c96 <_printf_i+0x18e>
 8004c90:	065f      	lsls	r7, r3, #25
 8004c92:	bf48      	it	mi
 8004c94:	b2b6      	uxthmi	r6, r6
 8004c96:	07df      	lsls	r7, r3, #31
 8004c98:	bf48      	it	mi
 8004c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c9e:	6029      	str	r1, [r5, #0]
 8004ca0:	bf48      	it	mi
 8004ca2:	6023      	strmi	r3, [r4, #0]
 8004ca4:	b91e      	cbnz	r6, 8004cae <_printf_i+0x1a6>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	f023 0320 	bic.w	r3, r3, #32
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	2310      	movs	r3, #16
 8004cb0:	e7a6      	b.n	8004c00 <_printf_i+0xf8>
 8004cb2:	4824      	ldr	r0, [pc, #144]	; (8004d44 <_printf_i+0x23c>)
 8004cb4:	e7e4      	b.n	8004c80 <_printf_i+0x178>
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	e7bd      	b.n	8004c36 <_printf_i+0x12e>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	6826      	ldr	r6, [r4, #0]
 8004cbe:	1d18      	adds	r0, r3, #4
 8004cc0:	6961      	ldr	r1, [r4, #20]
 8004cc2:	6028      	str	r0, [r5, #0]
 8004cc4:	0635      	lsls	r5, r6, #24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	d501      	bpl.n	8004cce <_printf_i+0x1c6>
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	e002      	b.n	8004cd4 <_printf_i+0x1cc>
 8004cce:	0670      	lsls	r0, r6, #25
 8004cd0:	d5fb      	bpl.n	8004cca <_printf_i+0x1c2>
 8004cd2:	8019      	strh	r1, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4615      	mov	r5, r2
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	e7bc      	b.n	8004c56 <_printf_i+0x14e>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	602a      	str	r2, [r5, #0]
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 f96d 	bl	8004fc8 <memchr>
 8004cee:	b108      	cbz	r0, 8004cf4 <_printf_i+0x1ec>
 8004cf0:	1b40      	subs	r0, r0, r5
 8004cf2:	6060      	str	r0, [r4, #4]
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfe:	e7aa      	b.n	8004c56 <_printf_i+0x14e>
 8004d00:	462a      	mov	r2, r5
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	47d0      	blx	sl
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0ad      	beq.n	8004c6a <_printf_i+0x162>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	079b      	lsls	r3, r3, #30
 8004d12:	d413      	bmi.n	8004d3c <_printf_i+0x234>
 8004d14:	68e0      	ldr	r0, [r4, #12]
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	bfb8      	it	lt
 8004d1c:	4618      	movlt	r0, r3
 8004d1e:	e7a6      	b.n	8004c6e <_printf_i+0x166>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4632      	mov	r2, r6
 8004d24:	4649      	mov	r1, r9
 8004d26:	4640      	mov	r0, r8
 8004d28:	47d0      	blx	sl
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d09d      	beq.n	8004c6a <_printf_i+0x162>
 8004d2e:	3501      	adds	r5, #1
 8004d30:	68e3      	ldr	r3, [r4, #12]
 8004d32:	9903      	ldr	r1, [sp, #12]
 8004d34:	1a5b      	subs	r3, r3, r1
 8004d36:	42ab      	cmp	r3, r5
 8004d38:	dcf2      	bgt.n	8004d20 <_printf_i+0x218>
 8004d3a:	e7eb      	b.n	8004d14 <_printf_i+0x20c>
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	f104 0619 	add.w	r6, r4, #25
 8004d42:	e7f5      	b.n	8004d30 <_printf_i+0x228>
 8004d44:	080050f3 	.word	0x080050f3
 8004d48:	08005104 	.word	0x08005104

08004d4c <__sflush_r>:
 8004d4c:	898a      	ldrh	r2, [r1, #12]
 8004d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d50:	4605      	mov	r5, r0
 8004d52:	0710      	lsls	r0, r2, #28
 8004d54:	460c      	mov	r4, r1
 8004d56:	d457      	bmi.n	8004e08 <__sflush_r+0xbc>
 8004d58:	684b      	ldr	r3, [r1, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	dc04      	bgt.n	8004d68 <__sflush_r+0x1c>
 8004d5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dc01      	bgt.n	8004d68 <__sflush_r+0x1c>
 8004d64:	2000      	movs	r0, #0
 8004d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d0fa      	beq.n	8004d64 <__sflush_r+0x18>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d74:	682f      	ldr	r7, [r5, #0]
 8004d76:	6a21      	ldr	r1, [r4, #32]
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	d032      	beq.n	8004de2 <__sflush_r+0x96>
 8004d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	075a      	lsls	r2, r3, #29
 8004d82:	d505      	bpl.n	8004d90 <__sflush_r+0x44>
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	1ac0      	subs	r0, r0, r3
 8004d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d8a:	b10b      	cbz	r3, 8004d90 <__sflush_r+0x44>
 8004d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d8e:	1ac0      	subs	r0, r0, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	4602      	mov	r2, r0
 8004d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d96:	4628      	mov	r0, r5
 8004d98:	6a21      	ldr	r1, [r4, #32]
 8004d9a:	47b0      	blx	r6
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	d106      	bne.n	8004db0 <__sflush_r+0x64>
 8004da2:	6829      	ldr	r1, [r5, #0]
 8004da4:	291d      	cmp	r1, #29
 8004da6:	d82b      	bhi.n	8004e00 <__sflush_r+0xb4>
 8004da8:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <__sflush_r+0x100>)
 8004daa:	410a      	asrs	r2, r1
 8004dac:	07d6      	lsls	r6, r2, #31
 8004dae:	d427      	bmi.n	8004e00 <__sflush_r+0xb4>
 8004db0:	2200      	movs	r2, #0
 8004db2:	6062      	str	r2, [r4, #4]
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	04d9      	lsls	r1, r3, #19
 8004db8:	6022      	str	r2, [r4, #0]
 8004dba:	d504      	bpl.n	8004dc6 <__sflush_r+0x7a>
 8004dbc:	1c42      	adds	r2, r0, #1
 8004dbe:	d101      	bne.n	8004dc4 <__sflush_r+0x78>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b903      	cbnz	r3, 8004dc6 <__sflush_r+0x7a>
 8004dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8004dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc8:	602f      	str	r7, [r5, #0]
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d0ca      	beq.n	8004d64 <__sflush_r+0x18>
 8004dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd2:	4299      	cmp	r1, r3
 8004dd4:	d002      	beq.n	8004ddc <__sflush_r+0x90>
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7ff fbee 	bl	80045b8 <_free_r>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	6360      	str	r0, [r4, #52]	; 0x34
 8004de0:	e7c1      	b.n	8004d66 <__sflush_r+0x1a>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b0      	blx	r6
 8004de8:	1c41      	adds	r1, r0, #1
 8004dea:	d1c8      	bne.n	8004d7e <__sflush_r+0x32>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0c5      	beq.n	8004d7e <__sflush_r+0x32>
 8004df2:	2b1d      	cmp	r3, #29
 8004df4:	d001      	beq.n	8004dfa <__sflush_r+0xae>
 8004df6:	2b16      	cmp	r3, #22
 8004df8:	d101      	bne.n	8004dfe <__sflush_r+0xb2>
 8004dfa:	602f      	str	r7, [r5, #0]
 8004dfc:	e7b2      	b.n	8004d64 <__sflush_r+0x18>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	e7ae      	b.n	8004d66 <__sflush_r+0x1a>
 8004e08:	690f      	ldr	r7, [r1, #16]
 8004e0a:	2f00      	cmp	r7, #0
 8004e0c:	d0aa      	beq.n	8004d64 <__sflush_r+0x18>
 8004e0e:	0793      	lsls	r3, r2, #30
 8004e10:	bf18      	it	ne
 8004e12:	2300      	movne	r3, #0
 8004e14:	680e      	ldr	r6, [r1, #0]
 8004e16:	bf08      	it	eq
 8004e18:	694b      	ldreq	r3, [r1, #20]
 8004e1a:	1bf6      	subs	r6, r6, r7
 8004e1c:	600f      	str	r7, [r1, #0]
 8004e1e:	608b      	str	r3, [r1, #8]
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	dd9f      	ble.n	8004d64 <__sflush_r+0x18>
 8004e24:	4633      	mov	r3, r6
 8004e26:	463a      	mov	r2, r7
 8004e28:	4628      	mov	r0, r5
 8004e2a:	6a21      	ldr	r1, [r4, #32]
 8004e2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004e30:	47e0      	blx	ip
 8004e32:	2800      	cmp	r0, #0
 8004e34:	dc06      	bgt.n	8004e44 <__sflush_r+0xf8>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	e790      	b.n	8004d66 <__sflush_r+0x1a>
 8004e44:	4407      	add	r7, r0
 8004e46:	1a36      	subs	r6, r6, r0
 8004e48:	e7ea      	b.n	8004e20 <__sflush_r+0xd4>
 8004e4a:	bf00      	nop
 8004e4c:	dfbffffe 	.word	0xdfbffffe

08004e50 <_fflush_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	690b      	ldr	r3, [r1, #16]
 8004e54:	4605      	mov	r5, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	b913      	cbnz	r3, 8004e60 <_fflush_r+0x10>
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	b118      	cbz	r0, 8004e6a <_fflush_r+0x1a>
 8004e62:	6a03      	ldr	r3, [r0, #32]
 8004e64:	b90b      	cbnz	r3, 8004e6a <_fflush_r+0x1a>
 8004e66:	f7ff f9af 	bl	80041c8 <__sinit>
 8004e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f3      	beq.n	8004e5a <_fflush_r+0xa>
 8004e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e74:	07d0      	lsls	r0, r2, #31
 8004e76:	d404      	bmi.n	8004e82 <_fflush_r+0x32>
 8004e78:	0599      	lsls	r1, r3, #22
 8004e7a:	d402      	bmi.n	8004e82 <_fflush_r+0x32>
 8004e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7e:	f7ff fb98 	bl	80045b2 <__retarget_lock_acquire_recursive>
 8004e82:	4628      	mov	r0, r5
 8004e84:	4621      	mov	r1, r4
 8004e86:	f7ff ff61 	bl	8004d4c <__sflush_r>
 8004e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	07da      	lsls	r2, r3, #31
 8004e90:	d4e4      	bmi.n	8004e5c <_fflush_r+0xc>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	059b      	lsls	r3, r3, #22
 8004e96:	d4e1      	bmi.n	8004e5c <_fflush_r+0xc>
 8004e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9a:	f7ff fb8b 	bl	80045b4 <__retarget_lock_release_recursive>
 8004e9e:	e7dd      	b.n	8004e5c <_fflush_r+0xc>

08004ea0 <__swhatbuf_r>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	461e      	mov	r6, r3
 8004eae:	b096      	sub	sp, #88	; 0x58
 8004eb0:	da0c      	bge.n	8004ecc <__swhatbuf_r+0x2c>
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004eba:	bf0c      	ite	eq
 8004ebc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ec0:	2340      	movne	r3, #64	; 0x40
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	6031      	str	r1, [r6, #0]
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	b016      	add	sp, #88	; 0x58
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	466a      	mov	r2, sp
 8004ece:	f000 f849 	bl	8004f64 <_fstat_r>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	dbed      	blt.n	8004eb2 <__swhatbuf_r+0x12>
 8004ed6:	9901      	ldr	r1, [sp, #4]
 8004ed8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004edc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ee0:	4259      	negs	r1, r3
 8004ee2:	4159      	adcs	r1, r3
 8004ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee8:	e7eb      	b.n	8004ec2 <__swhatbuf_r+0x22>

08004eea <__smakebuf_r>:
 8004eea:	898b      	ldrh	r3, [r1, #12]
 8004eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eee:	079d      	lsls	r5, r3, #30
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	d507      	bpl.n	8004f06 <__smakebuf_r+0x1c>
 8004ef6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	6123      	str	r3, [r4, #16]
 8004efe:	2301      	movs	r3, #1
 8004f00:	6163      	str	r3, [r4, #20]
 8004f02:	b002      	add	sp, #8
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	466a      	mov	r2, sp
 8004f08:	ab01      	add	r3, sp, #4
 8004f0a:	f7ff ffc9 	bl	8004ea0 <__swhatbuf_r>
 8004f0e:	9900      	ldr	r1, [sp, #0]
 8004f10:	4605      	mov	r5, r0
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff fbb8 	bl	8004688 <_malloc_r>
 8004f18:	b948      	cbnz	r0, 8004f2e <__smakebuf_r+0x44>
 8004f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1e:	059a      	lsls	r2, r3, #22
 8004f20:	d4ef      	bmi.n	8004f02 <__smakebuf_r+0x18>
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	e7e3      	b.n	8004ef6 <__smakebuf_r+0xc>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	6020      	str	r0, [r4, #0]
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	9b00      	ldr	r3, [sp, #0]
 8004f3a:	6120      	str	r0, [r4, #16]
 8004f3c:	6163      	str	r3, [r4, #20]
 8004f3e:	9b01      	ldr	r3, [sp, #4]
 8004f40:	b15b      	cbz	r3, 8004f5a <__smakebuf_r+0x70>
 8004f42:	4630      	mov	r0, r6
 8004f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f48:	f000 f81e 	bl	8004f88 <_isatty_r>
 8004f4c:	b128      	cbz	r0, 8004f5a <__smakebuf_r+0x70>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f023 0303 	bic.w	r3, r3, #3
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	431d      	orrs	r5, r3
 8004f5e:	81a5      	strh	r5, [r4, #12]
 8004f60:	e7cf      	b.n	8004f02 <__smakebuf_r+0x18>
	...

08004f64 <_fstat_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	2300      	movs	r3, #0
 8004f68:	4d06      	ldr	r5, [pc, #24]	; (8004f84 <_fstat_r+0x20>)
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	f7fc f95d 	bl	8001230 <_fstat>
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	d102      	bne.n	8004f80 <_fstat_r+0x1c>
 8004f7a:	682b      	ldr	r3, [r5, #0]
 8004f7c:	b103      	cbz	r3, 8004f80 <_fstat_r+0x1c>
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	bf00      	nop
 8004f84:	200002e4 	.word	0x200002e4

08004f88 <_isatty_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4d05      	ldr	r5, [pc, #20]	; (8004fa4 <_isatty_r+0x1c>)
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	f7fc f95b 	bl	800124e <_isatty>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_isatty_r+0x1a>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_isatty_r+0x1a>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	200002e4 	.word	0x200002e4

08004fa8 <_sbrk_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	2300      	movs	r3, #0
 8004fac:	4d05      	ldr	r5, [pc, #20]	; (8004fc4 <_sbrk_r+0x1c>)
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fc f962 	bl	800127c <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_sbrk_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_sbrk_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200002e4 	.word	0x200002e4

08004fc8 <memchr>:
 8004fc8:	4603      	mov	r3, r0
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	b2c9      	uxtb	r1, r1
 8004fce:	4402      	add	r2, r0
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	d101      	bne.n	8004fda <memchr+0x12>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e003      	b.n	8004fe2 <memchr+0x1a>
 8004fda:	7804      	ldrb	r4, [r0, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	428c      	cmp	r4, r1
 8004fe0:	d1f6      	bne.n	8004fd0 <memchr+0x8>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
