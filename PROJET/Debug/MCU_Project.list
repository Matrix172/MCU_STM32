
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c0  080063c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c8  080063c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08006440  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006440  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da1c  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002477  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afa  00000000  00000000  00030de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca6  00000000  00000000  000318da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000041ce  00000000  00000000  0003c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000431c  00000000  00000000  00040750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000070  00000000  00000000  00044a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080061f8 	.word	0x080061f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080061f8 	.word	0x080061f8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80004cc:	f001 faeb 	bl	8001aa6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f810 	bl	80004f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f9ea 	bl	80008ac <MX_GPIO_Init>
	MX_TIM3_Init();
 80004d8:	f000 f966 	bl	80007a8 <MX_TIM3_Init>
	MX_SPI1_Init();
 80004dc:	f000 f92e 	bl	800073c <MX_SPI1_Init>
	MX_ADC_Init();
 80004e0:	f000 f86c 	bl	80005bc <MX_ADC_Init>
	MX_RTC_Init();
 80004e4:	f000 f8d0 	bl	8000688 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	affichemod();
 80004e8:	f000 fa8e 	bl	8000a08 <affichemod>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		fonctionmod();
 80004ec:	f000 fba6 	bl	8000c3c <fonctionmod>
 80004f0:	e7fc      	b.n	80004ec <main+0x24>
	...

080004f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	; 0x58
 80004f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fe:	2234      	movs	r2, #52	; 0x34
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f005 f8e6 	bl	80056d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xc4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800052a:	4a23      	ldr	r2, [pc, #140]	; (80005b8 <SystemClock_Config+0xc4>)
 800052c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000530:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000532:	230a      	movs	r3, #10
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000546:	2300      	movs	r3, #0
 8000548:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800054a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800054e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000550:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4618      	mov	r0, r3
 800055c:	f002 faf0 	bl	8002b40 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x76>
	{
		Error_Handler();
 8000566:	f001 f86b 	bl	8001640 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	613b      	str	r3, [r7, #16]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fe0b 	bl	80031a0 <HAL_RCC_ClockConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8000590:	f001 f856 	bl	8001640 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000594:	2301      	movs	r3, #1
 8000596:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800059c:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f84f 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 80005ac:	f001 f848 	bl	8001640 <Error_Handler>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3758      	adds	r7, #88	; 0x58
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <MX_ADC_Init+0xc4>)
 80005ce:	4a2d      	ldr	r2, [pc, #180]	; (8000684 <MX_ADC_Init+0xc8>)
 80005d0:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_ADC_Init+0xc4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <MX_ADC_Init+0xc4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_ADC_Init+0xc4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <MX_ADC_Init+0xc4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_ADC_Init+0xc4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <MX_ADC_Init+0xc4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_ADC_Init+0xc4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <MX_ADC_Init+0xc4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC_Init+0xc4>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 2;
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC_Init+0xc4>)
 800060c:	2202      	movs	r2, #2
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_ADC_Init+0xc4>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC_Init+0xc4>)
 800061a:	2210      	movs	r2, #16
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_ADC_Init+0xc4>)
 8000620:	2200      	movs	r2, #0
 8000622:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_ADC_Init+0xc4>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_ADC_Init+0xc4>)
 800062e:	f001 facb 	bl	8001bc8 <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8000638:	f001 f802 	bl	8001640 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000640:	2301      	movs	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8000644:	2307      	movs	r3, #7
 8000646:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_ADC_Init+0xc4>)
 800064e:	f001 fd87 	bl	8002160 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8000658:	f000 fff2 	bl	8001640 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC_Init+0xc4>)
 800066a:	f001 fd79 	bl	8002160 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0xbc>
	{
		Error_Handler();
 8000674:	f000 ffe4 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000008c 	.word	0x2000008c
 8000684:	40012400 	.word	0x40012400

08000688 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_RTC_Init+0xac>)
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_RTC_Init+0xb0>)
 80006a4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_RTC_Init+0xac>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_RTC_Init+0xac>)
 80006ae:	227f      	movs	r2, #127	; 0x7f
 80006b0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_RTC_Init+0xac>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_RTC_Init+0xac>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_RTC_Init+0xac>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_RTC_Init+0xac>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ca:	481a      	ldr	r0, [pc, #104]	; (8000734 <MX_RTC_Init+0xac>)
 80006cc:	f003 f8c4 	bl	8003858 <HAL_RTC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_RTC_Init+0x52>
	{
		Error_Handler();
 80006d6:	f000 ffb3 	bl	8001640 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x13;
 80006da:	2313      	movs	r3, #19
 80006dc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x14;
 80006de:	2314      	movs	r3, #20
 80006e0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	480f      	ldr	r0, [pc, #60]	; (8000734 <MX_RTC_Init+0xac>)
 80006f6:	f003 f932 	bl	800395e <HAL_RTC_SetTime>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 8000700:	f000 ff9e 	bl	8001640 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000704:	2304      	movs	r3, #4
 8000706:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000708:	2302      	movs	r3, #2
 800070a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x22;
 800070c:	2322      	movs	r3, #34	; 0x22
 800070e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24;
 8000710:	2324      	movs	r3, #36	; 0x24
 8000712:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2201      	movs	r2, #1
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_RTC_Init+0xac>)
 800071c:	f003 fa17 	bl	8003b4e <HAL_RTC_SetDate>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 8000726:	f000 ff8b 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000e0 	.word	0x200000e0
 8000738:	40002800 	.word	0x40002800

0800073c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000788:	220a      	movs	r2, #10
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_SPI1_Init+0x64>)
 800078e:	f003 fb6c 	bl	8003e6a <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000798:	f000 ff52 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000100 	.word	0x20000100
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007d4:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <MX_TIM3_Init+0x100>)
 80007d6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32000;
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007da:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80007de:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <MX_TIM3_Init+0xfc>)
 80007fc:	f003 fdcc 	bl	8004398 <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 8000806:	f000 ff1b 	bl	8001640 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_TIM3_Init+0xfc>)
 8000818:	f004 f902 	bl	8004a20 <HAL_TIM_ConfigClockSource>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 8000822:	f000 ff0d 	bl	8001640 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000826:	481f      	ldr	r0, [pc, #124]	; (80008a4 <MX_TIM3_Init+0xfc>)
 8000828:	f003 fe40 	bl	80044ac <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 8000832:	f000 ff05 	bl	8001640 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <MX_TIM3_Init+0xfc>)
 8000846:	f004 fbff 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 8000850:	f000 fef6 	bl	8001640 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	; 0x60
 8000856:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <MX_TIM3_Init+0xfc>)
 800086c:	f004 f816 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 8000876:	f000 fee3 	bl	8001640 <Error_Handler>
	}
	sConfigOC.Pulse = 500;
 800087a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800087e:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2204      	movs	r2, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM3_Init+0xfc>)
 8000888:	f004 f808 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 8000892:	f000 fed5 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM3_Init+0xfc>)
 8000898:	f000 ffc6 	bl	8001828 <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000158 	.word	0x20000158
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a3e      	ldr	r2, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b3c      	ldr	r3, [pc, #240]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x114>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <MX_GPIO_Init+0x114>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2106      	movs	r1, #6
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x118>)
 8000910:	f002 f8e5 	bl	8002ade <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <MX_GPIO_Init+0x11c>)
 800091c:	f002 f8df 	bl	8002ade <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BTNCarte_Pin */
	GPIO_InitStruct.Pin = BTNCarte_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BTNCarte_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x120>)
 8000938:	f001 ff2a 	bl	8002790 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	481f      	ldr	r0, [pc, #124]	; (80009cc <MX_GPIO_Init+0x120>)
 8000950:	f001 ff1e 	bl	8002790 <HAL_GPIO_Init>

	/*Configure GPIO pins : L0_Pin L1_Pin */
	GPIO_InitStruct.Pin = L0_Pin|L1_Pin;
 8000954:	2306      	movs	r3, #6
 8000956:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4816      	ldr	r0, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x118>)
 800096c:	f001 ff10 	bl	8002790 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000974:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097a:	2301      	movs	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <MX_GPIO_Init+0x11c>)
 800098a:	f001 ff01 	bl	8002790 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800098e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000992:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_GPIO_Init+0x11c>)
 80009a4:	f001 fef4 	bl	8002790 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2028      	movs	r0, #40	; 0x28
 80009ae:	f001 feb8 	bl	8002722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b2:	2028      	movs	r0, #40	; 0x28
 80009b4:	f001 fed1 	bl	800275a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020800 	.word	0x40020800

080009d0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e009      	b.n	80009f6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	60ba      	str	r2, [r7, #8]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fd46 	bl	800047c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbf1      	blt.n	80009e2 <_write+0x12>
	}
	return len;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <affichemod>:



void affichemod(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000a0c:	f004 fbc9 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8000a10:	f004 fb90 	bl	8005134 <MAX7219_Init>
	MAX7219_DisplayChar(1,'S', 0); // Pas de point décimal
 8000a14:	2200      	movs	r2, #0
 8000a16:	2153      	movs	r1, #83	; 0x53
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f004 fbd8 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2,'E', 0); // Avec point décimal
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2145      	movs	r1, #69	; 0x45
 8000a22:	2002      	movs	r0, #2
 8000a24:	f004 fbd3 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3,'T', 1); // Pas de point décimal
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2154      	movs	r1, #84	; 0x54
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f004 fbce 	bl	80051ce <MAX7219_DisplayChar>
	switchmode();
 8000a32:	f000 fa5b 	bl	8000eec <switchmode>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <affiche_num>:

void affiche_num(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000a40:	f004 fbaf 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8000a44:	f004 fb76 	bl	8005134 <MAX7219_Init>

	dizainesminutes = valeurMin / 10;
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <affiche_num+0xb4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <affiche_num+0xb8>)
 8000a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a52:	1092      	asrs	r2, r2, #2
 8000a54:	17db      	asrs	r3, r3, #31
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <affiche_num+0xbc>)
 8000a5a:	6013      	str	r3, [r2, #0]
	minutes = valeurMin % 10;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <affiche_num+0xb4>)
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <affiche_num+0xb8>)
 8000a62:	fb83 2301 	smull	r2, r3, r3, r1
 8000a66:	109a      	asrs	r2, r3, #2
 8000a68:	17cb      	asrs	r3, r1, #31
 8000a6a:	1ad2      	subs	r2, r2, r3
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	1aca      	subs	r2, r1, r3
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <affiche_num+0xc0>)
 8000a78:	601a      	str	r2, [r3, #0]
	dizaines = valeur / 10;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <affiche_num+0xc4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <affiche_num+0xb8>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	1092      	asrs	r2, r2, #2
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <affiche_num+0xc8>)
 8000a8c:	6013      	str	r3, [r2, #0]
	unites = valeur % 10;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <affiche_num+0xc4>)
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <affiche_num+0xb8>)
 8000a94:	fb83 2301 	smull	r2, r3, r3, r1
 8000a98:	109a      	asrs	r2, r3, #2
 8000a9a:	17cb      	asrs	r3, r1, #31
 8000a9c:	1ad2      	subs	r2, r2, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1aca      	subs	r2, r1, r3
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <affiche_num+0xcc>)
 8000aaa:	601a      	str	r2, [r3, #0]

	MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <affiche_num+0xbc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3330      	adds	r3, #48	; 0x30
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f004 fb89 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, minutes + '0', 1);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <affiche_num+0xc0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3330      	adds	r3, #48	; 0x30
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f004 fb81 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <affiche_num+0xc8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3330      	adds	r3, #48	; 0x30
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f004 fb79 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, unites + '0', 0);
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <affiche_num+0xcc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3330      	adds	r3, #48	; 0x30
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f004 fb71 	bl	80051ce <MAX7219_DisplayChar>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001a4 	.word	0x200001a4
 8000af4:	66666667 	.word	0x66666667
 8000af8:	200001b0 	.word	0x200001b0
 8000afc:	200001b4 	.word	0x200001b4
 8000b00:	200001a0 	.word	0x200001a0
 8000b04:	200001a8 	.word	0x200001a8
 8000b08:	200001ac 	.word	0x200001ac

08000b0c <affiche_horloge>:

void affiche_horloge(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000b10:	f004 fb47 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8000b14:	f004 fb0e 	bl	8005134 <MAX7219_Init>

	dizainesminutes = valeurMin / 10;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <affiche_horloge+0xb4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <affiche_horloge+0xb8>)
 8000b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b22:	1092      	asrs	r2, r2, #2
 8000b24:	17db      	asrs	r3, r3, #31
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <affiche_horloge+0xbc>)
 8000b2a:	6013      	str	r3, [r2, #0]
	minutes = valeurMin % 10;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <affiche_horloge+0xb4>)
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <affiche_horloge+0xb8>)
 8000b32:	fb83 2301 	smull	r2, r3, r3, r1
 8000b36:	109a      	asrs	r2, r3, #2
 8000b38:	17cb      	asrs	r3, r1, #31
 8000b3a:	1ad2      	subs	r2, r2, r3
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	1aca      	subs	r2, r1, r3
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <affiche_horloge+0xc0>)
 8000b48:	601a      	str	r2, [r3, #0]
	dizainesheures = valeur / 10;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <affiche_horloge+0xc4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <affiche_horloge+0xb8>)
 8000b50:	fb82 1203 	smull	r1, r2, r2, r3
 8000b54:	1092      	asrs	r2, r2, #2
 8000b56:	17db      	asrs	r3, r3, #31
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <affiche_horloge+0xc8>)
 8000b5c:	6013      	str	r3, [r2, #0]
	heures = valeur % 10;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <affiche_horloge+0xc4>)
 8000b60:	6819      	ldr	r1, [r3, #0]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <affiche_horloge+0xb8>)
 8000b64:	fb83 2301 	smull	r2, r3, r3, r1
 8000b68:	109a      	asrs	r2, r3, #2
 8000b6a:	17cb      	asrs	r3, r1, #31
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	1aca      	subs	r2, r1, r3
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <affiche_horloge+0xcc>)
 8000b7a:	601a      	str	r2, [r3, #0]

	MAX7219_DisplayChar(1, dizainesheures + '0', 0);
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <affiche_horloge+0xc8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3330      	adds	r3, #48	; 0x30
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	f004 fb21 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, heures + '0', 1);
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <affiche_horloge+0xcc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3330      	adds	r3, #48	; 0x30
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 fb19 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizainesminutes + '0', 0);
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <affiche_horloge+0xbc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3330      	adds	r3, #48	; 0x30
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f004 fb11 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, minutes + '0', 0);
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <affiche_horloge+0xc0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3330      	adds	r3, #48	; 0x30
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2004      	movs	r0, #4
 8000bb8:	f004 fb09 	bl	80051ce <MAX7219_DisplayChar>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001a4 	.word	0x200001a4
 8000bc4:	66666667 	.word	0x66666667
 8000bc8:	200001b0 	.word	0x200001b0
 8000bcc:	200001b4 	.word	0x200001b4
 8000bd0:	200001a0 	.word	0x200001a0
 8000bd4:	200001bc 	.word	0x200001bc
 8000bd8:	200001b8 	.word	0x200001b8

08000bdc <affiche_clear>:

void affiche_clear(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000be0:	f004 fadf 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8000be4:	f004 faa6 	bl	8005134 <MAX7219_Init>
	MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <affiche_clear+0x50>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3330      	adds	r3, #48	; 0x30
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f004 faeb 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, minutes + '0', 1);
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <affiche_clear+0x54>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3330      	adds	r3, #48	; 0x30
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	2002      	movs	r0, #2
 8000c04:	f004 fae3 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <affiche_clear+0x58>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3330      	adds	r3, #48	; 0x30
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	2003      	movs	r0, #3
 8000c14:	f004 fadb 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, unites + '0', 0);
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <affiche_clear+0x5c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3330      	adds	r3, #48	; 0x30
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	2004      	movs	r0, #4
 8000c24:	f004 fad3 	bl	80051ce <MAX7219_DisplayChar>

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001b0 	.word	0x200001b0
 8000c30:	200001b4 	.word	0x200001b4
 8000c34:	200001a8 	.word	0x200001a8
 8000c38:	200001ac 	.word	0x200001ac

08000c3c <fonctionmod>:





void fonctionmod(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	switch(mode){
 8000c40:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <fonctionmod+0x140>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	f200 8090 	bhi.w	8000d6c <fonctionmod+0x130>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <fonctionmod+0x18>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000ce3 	.word	0x08000ce3
 8000c60:	08000d6d 	.word	0x08000d6d
	case 1:
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET) {
 8000c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c68:	4845      	ldr	r0, [pc, #276]	; (8000d80 <fonctionmod+0x144>)
 8000c6a:	f001 ff21 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d17d      	bne.n	8000d70 <fonctionmod+0x134>
			printf("Lancement du chronometre \n");
 8000c74:	4843      	ldr	r0, [pc, #268]	; (8000d84 <fonctionmod+0x148>)
 8000c76:	f004 fc4d 	bl	8005514 <puts>
			chronometre();
 8000c7a:	f000 f895 	bl	8000da8 <chronometre>
		}
		break;
 8000c7e:	e077      	b.n	8000d70 <fonctionmod+0x134>

	case 2:
		HAL_Delay(200);
 8000c80:	20c8      	movs	r0, #200	; 0xc8
 8000c82:	f000 ff7f 	bl	8001b84 <HAL_Delay>
		if (mode == 2){
 8000c86:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <fonctionmod+0x140>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d129      	bne.n	8000ce2 <fonctionmod+0xa6>
			if (valide == 0){
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <fonctionmod+0x14c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d106      	bne.n	8000ca4 <fonctionmod+0x68>
				//Faire un getTickCount pour eviter de spam le terminal.
				printf("Réglage du minuteur\n");
 8000c96:	483d      	ldr	r0, [pc, #244]	; (8000d8c <fonctionmod+0x150>)
 8000c98:	f004 fc3c 	bl	8005514 <puts>
				adcfunction();
 8000c9c:	f000 fa22 	bl	80010e4 <adcfunction>
				affiche_num();
 8000ca0:	f7ff fecc 	bl	8000a3c <affiche_num>
			}
			if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET){
 8000ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <fonctionmod+0x144>)
 8000caa:	f001 ff01 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d116      	bne.n	8000ce2 <fonctionmod+0xa6>
				HAL_ADC_Stop(&hadc);
 8000cb4:	4836      	ldr	r0, [pc, #216]	; (8000d90 <fonctionmod+0x154>)
 8000cb6:	f001 f92d 	bl	8001f14 <HAL_ADC_Stop>
				adccheck ++;
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <fonctionmod+0x158>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a34      	ldr	r2, [pc, #208]	; (8000d94 <fonctionmod+0x158>)
 8000cc2:	6013      	str	r3, [r2, #0]
				printf("Temps validé !\n");
 8000cc4:	4834      	ldr	r0, [pc, #208]	; (8000d98 <fonctionmod+0x15c>)
 8000cc6:	f004 fc25 	bl	8005514 <puts>
				if (adccheck == 2){
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <fonctionmod+0x158>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d107      	bne.n	8000ce2 <fonctionmod+0xa6>
					valide = 1;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <fonctionmod+0x14c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
					printf("Lancement du minuteur\n");
 8000cd8:	4830      	ldr	r0, [pc, #192]	; (8000d9c <fonctionmod+0x160>)
 8000cda:	f004 fc1b 	bl	8005514 <puts>
					minuteur();
 8000cde:	f000 fb45 	bl	800136c <minuteur>
				}
			}
		}

	case 3:
		HAL_Delay(200);
 8000ce2:	20c8      	movs	r0, #200	; 0xc8
 8000ce4:	f000 ff4e 	bl	8001b84 <HAL_Delay>
		if (mode == 3){
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <fonctionmod+0x140>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d141      	bne.n	8000d74 <fonctionmod+0x138>
			if (valide == 0){
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <fonctionmod+0x14c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11c      	bne.n	8000d32 <fonctionmod+0xf6>
				if (horlogevar != 0){
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <fonctionmod+0x164>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <fonctionmod+0xd4>
					printf("Reglage de l'alarme\n");
 8000d00:	4828      	ldr	r0, [pc, #160]	; (8000da4 <fonctionmod+0x168>)
 8000d02:	f004 fc07 	bl	8005514 <puts>
					adchorloge();
 8000d06:	f000 fa09 	bl	800111c <adchorloge>
					affiche_horloge();
 8000d0a:	f7ff feff 	bl	8000b0c <affiche_horloge>
 8000d0e:	e005      	b.n	8000d1c <fonctionmod+0xe0>
				}
				else{
					horloge();
 8000d10:	f000 fb8e 	bl	8001430 <horloge>
					HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d18:	f000 ff34 	bl	8001b84 <HAL_Delay>
				}
				if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <fonctionmod+0x144>)
 8000d22:	f001 fec5 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <fonctionmod+0xf6>
					horlogevar = 1;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <fonctionmod+0x164>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
				}
			}
			if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET){
 8000d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <fonctionmod+0x144>)
 8000d38:	f001 feba 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10a      	bne.n	8000d58 <fonctionmod+0x11c>
				HAL_ADC_Stop(&hadc);
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <fonctionmod+0x154>)
 8000d44:	f001 f8e6 	bl	8001f14 <HAL_ADC_Stop>
				adccheck ++;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <fonctionmod+0x158>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <fonctionmod+0x158>)
 8000d50:	6013      	str	r3, [r2, #0]
				printf("Temps validé !\n");
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <fonctionmod+0x15c>)
 8000d54:	f004 fbde 	bl	8005514 <puts>
			}
			if (adccheck >= 2){
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <fonctionmod+0x158>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	dd09      	ble.n	8000d74 <fonctionmod+0x138>
				valide =1;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <fonctionmod+0x14c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
				checkhorloge();
 8000d66:	f000 fbc3 	bl	80014f0 <checkhorloge>
			}
		}

		break;
 8000d6a:	e003      	b.n	8000d74 <fonctionmod+0x138>
	case 4:
		break;
	default :
		break;
 8000d6c:	bf00      	nop
 8000d6e:	e002      	b.n	8000d76 <fonctionmod+0x13a>
		break;
 8000d70:	bf00      	nop
 8000d72:	e000      	b.n	8000d76 <fonctionmod+0x13a>
		break;
 8000d74:	bf00      	nop

		break;
	}
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	40020000 	.word	0x40020000
 8000d84:	08006210 	.word	0x08006210
 8000d88:	200001c0 	.word	0x200001c0
 8000d8c:	0800622c 	.word	0x0800622c
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	200001c4 	.word	0x200001c4
 8000d98:	08006244 	.word	0x08006244
 8000d9c:	08006254 	.word	0x08006254
 8000da0:	200001c8 	.word	0x200001c8
 8000da4:	0800626c 	.word	0x0800626c

08000da8 <chronometre>:





void chronometre() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000dae:	f004 f9f8 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8000db2:	f004 f9bf 	bl	8005134 <MAX7219_Init>
	stopchrono = 1 ;
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <chronometre+0x10c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

	uint32_t start_time = HAL_GetTick(); // Temps de départ en millisecondes
 8000dbc:	f000 fed8 	bl	8001b70 <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]

	uint32_t minutes = 0; // Initialisation des minutes à 0
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
	uint32_t seconds = 0; // Initialisation des secondes à 0
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
	while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 8000dca:	e068      	b.n	8000e9e <chronometre+0xf6>
		uint32_t elapsed_time = HAL_GetTick() - start_time; // Temps écoulé depuis le début du chronomètre
 8000dcc:	f000 fed0 	bl	8001b70 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	603b      	str	r3, [r7, #0]

		// Calculez les minutes et les secondes
		minutes = (elapsed_time / (1000 * 60)) % 100; // Limiter les minutes à 99
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <chronometre+0x110>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	0b9b      	lsrs	r3, r3, #14
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <chronometre+0x114>)
 8000de4:	fba2 1203 	umull	r1, r2, r2, r3
 8000de8:	0952      	lsrs	r2, r2, #5
 8000dea:	2164      	movs	r1, #100	; 0x64
 8000dec:	fb01 f202 	mul.w	r2, r1, r2
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
		seconds = (elapsed_time / 1000) % 60;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <chronometre+0x118>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	099a      	lsrs	r2, r3, #6
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <chronometre+0x11c>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	0959      	lsrs	r1, r3, #5
 8000e06:	460b      	mov	r3, r1
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]

		// Affichez les valeurs calculées sur les afficheurs 7 segments
		MAX7219_DisplayChar(1, minutes / 10 + '0', 0); // Affiche les dizaines de minutes
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <chronometre+0x120>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	3330      	adds	r3, #48	; 0x30
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	f004 f9d3 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, minutes % 10 + '0', 1); // Affiche les minutes
 8000e28:	68f9      	ldr	r1, [r7, #12]
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <chronometre+0x120>)
 8000e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	1aca      	subs	r2, r1, r3
 8000e3c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	2002      	movs	r0, #2
 8000e46:	f004 f9c2 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, seconds / 10 + '0', 0); // Affiche les dizaines de secondes
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <chronometre+0x120>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	3330      	adds	r3, #48	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f004 f9b7 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, seconds % 10 + '0', 0); // Affiche les secondes
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <chronometre+0x120>)
 8000e64:	fba3 2301 	umull	r2, r3, r3, r1
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1aca      	subs	r2, r1, r3
 8000e74:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f004 f9a6 	bl	80051ce <MAX7219_DisplayChar>

		HAL_Delay(1000); // Attendez une seconde avant de mettre à jour l'affichage
 8000e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e86:	f000 fe7d 	bl	8001b84 <HAL_Delay>

		//MAX7219_Clear(); // Effacez l'affichage une fois que 99 minutes se sont écoulées
		if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	480f      	ldr	r0, [pc, #60]	; (8000ecc <chronometre+0x124>)
 8000e90:	f001 fe0e 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <chronometre+0xf6>
			arreter_chronometre();
 8000e9a:	f000 f819 	bl	8000ed0 <arreter_chronometre>
	while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b62      	cmp	r3, #98	; 0x62
 8000ea2:	d803      	bhi.n	8000eac <chronometre+0x104>
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <chronometre+0x10c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d08f      	beq.n	8000dcc <chronometre+0x24>
		}
	}
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	45e7b273 	.word	0x45e7b273
 8000ebc:	51eb851f 	.word	0x51eb851f
 8000ec0:	10624dd3 	.word	0x10624dd3
 8000ec4:	88888889 	.word	0x88888889
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <arreter_chronometre>:





void arreter_chronometre() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	printf("Arret du chronometre\n");
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <arreter_chronometre+0x14>)
 8000ed6:	f004 fb1d 	bl	8005514 <puts>
	stopchrono = 0;
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <arreter_chronometre+0x18>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
	//MAX7219_DisplayChar(2, '0', 1);
	//MAX7219_DisplayChar(3, '0', 0);
	//MAX7219_DisplayChar(4, '0', 0);
	// Maintenant c'est dans la fonction affiche_clear();

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	08006280 	.word	0x08006280
 8000ee8:	20000004 	.word	0x20000004

08000eec <switchmode>:

void switchmode(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	switch(mode){
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <switchmode+0x58>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d822      	bhi.n	8000f40 <switchmode+0x54>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <switchmode+0x14>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f29 	.word	0x08000f29
 8000f0c:	08000f35 	.word	0x08000f35
	case 1:
		MAX7219_DisplayChar(4,'1', 0); // Pas de point décimal
 8000f10:	2200      	movs	r2, #0
 8000f12:	2131      	movs	r1, #49	; 0x31
 8000f14:	2004      	movs	r0, #4
 8000f16:	f004 f95a 	bl	80051ce <MAX7219_DisplayChar>
		break;
 8000f1a:	e011      	b.n	8000f40 <switchmode+0x54>
	case 2:
		MAX7219_DisplayChar(4,'2', 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2132      	movs	r1, #50	; 0x32
 8000f20:	2004      	movs	r0, #4
 8000f22:	f004 f954 	bl	80051ce <MAX7219_DisplayChar>
		break;
 8000f26:	e00b      	b.n	8000f40 <switchmode+0x54>
	case 3:
		MAX7219_DisplayChar(4,'3', 0); // Pas de point décimal
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2133      	movs	r1, #51	; 0x33
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f004 f94e 	bl	80051ce <MAX7219_DisplayChar>
		break;
 8000f32:	e005      	b.n	8000f40 <switchmode+0x54>
	case 4:
		MAX7219_DisplayChar(4,'4', 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2134      	movs	r1, #52	; 0x34
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f004 f948 	bl	80051ce <MAX7219_DisplayChar>
		break;
 8000f3e:	bf00      	nop
	}
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000

08000f48 <adcsecondes>:

void adcsecondes(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
	//Secondes
	HAL_ADC_Start(&hadc);
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <adcsecondes+0x70>)
 8000f50:	f000 ff80 	bl	8001e54 <HAL_ADC_Start>
	ADC_ChannelConfTypeDef sConfig = {0}; // Réinitialisation de la structure sConfig
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <adcsecondes+0x70>)
 8000f68:	f001 f8fa 	bl	8002160 <HAL_ADC_ConfigChannel>
	HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8000f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f70:	2101      	movs	r1, #1
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <adcsecondes+0x70>)
 8000f74:	f001 f88a 	bl	800208c <HAL_ADC_PollForEvent>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000f78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <adcsecondes+0x70>)
 8000f7e:	f000 fff5 	bl	8001f6c <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <adcsecondes+0x70>)
 8000f84:	f001 f8df 	bl	8002146 <HAL_ADC_GetValue>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <adcsecondes+0x74>)
 8000f8e:	601a      	str	r2, [r3, #0]
	valeur = analogValue / 68;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <adcsecondes+0x74>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <adcsecondes+0x78>)
 8000f96:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9a:	1152      	asrs	r2, r2, #5
 8000f9c:	17db      	asrs	r3, r3, #31
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <adcsecondes+0x7c>)
 8000fa2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc);
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <adcsecondes+0x70>)
 8000fa6:	f000 ffb5 	bl	8001f14 <HAL_ADC_Stop>
	//printf("ADC Value= %d\n", analogValue);
	//printf("Valeur 60 : %d\n",valeur);
	HAL_Delay(50);
 8000faa:	2032      	movs	r0, #50	; 0x32
 8000fac:	f000 fdea 	bl	8001b84 <HAL_Delay>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	20000198 	.word	0x20000198
 8000fc0:	78787879 	.word	0x78787879
 8000fc4:	200001a0 	.word	0x200001a0

08000fc8 <adcminutes>:

void adcminutes(int conversion){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	// Minutes
	HAL_ADC_Start(&hadc);
 8000fd0:	481c      	ldr	r0, [pc, #112]	; (8001044 <adcminutes+0x7c>)
 8000fd2:	f000 ff3f 	bl	8001e54 <HAL_ADC_Start>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1; // Réaffectation du canal ADC
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	; (8001044 <adcminutes+0x7c>)
 8000fee:	f001 f8b7 	bl	8002160 <HAL_ADC_ConfigChannel>
	HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <adcminutes+0x7c>)
 8000ffa:	f001 f847 	bl	800208c <HAL_ADC_PollForEvent>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000ffe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <adcminutes+0x7c>)
 8001004:	f000 ffb2 	bl	8001f6c <HAL_ADC_PollForConversion>
	analogValueMin = HAL_ADC_GetValue(&hadc);
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <adcminutes+0x7c>)
 800100a:	f001 f89c 	bl	8002146 <HAL_ADC_GetValue>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <adcminutes+0x80>)
 8001014:	601a      	str	r2, [r3, #0]
	valeurMin = analogValueMin / conversion;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <adcminutes+0x80>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <adcminutes+0x84>)
 8001022:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc);
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <adcminutes+0x7c>)
 8001026:	f000 ff75 	bl	8001f14 <HAL_ADC_Stop>
	//printf("ADC ValueMin= %d\n", analogValueMin);
	printf("Minutes : %d\n",valeurMin);
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <adcminutes+0x84>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <adcminutes+0x88>)
 8001032:	f004 fa09 	bl	8005448 <iprintf>
	HAL_Delay(50);
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f000 fda4 	bl	8001b84 <HAL_Delay>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000008c 	.word	0x2000008c
 8001048:	2000019c 	.word	0x2000019c
 800104c:	200001a4 	.word	0x200001a4
 8001050:	08006298 	.word	0x08006298

08001054 <adcheures>:

void adcheures(){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
	// Heures
	HAL_ADC_Start(&hadc);
 800105a:	481d      	ldr	r0, [pc, #116]	; (80010d0 <adcheures+0x7c>)
 800105c:	f000 fefa 	bl	8001e54 <HAL_ADC_Start>
	ADC_ChannelConfTypeDef sConfig = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1; // Réaffectation du canal ADC
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <adcheures+0x7c>)
 8001074:	f001 f874 	bl	8002160 <HAL_ADC_ConfigChannel>
	HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8001078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107c:	2101      	movs	r1, #1
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <adcheures+0x7c>)
 8001080:	f001 f804 	bl	800208c <HAL_ADC_PollForEvent>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <adcheures+0x7c>)
 800108a:	f000 ff6f 	bl	8001f6c <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <adcheures+0x7c>)
 8001090:	f001 f859 	bl	8002146 <HAL_ADC_GetValue>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <adcheures+0x80>)
 800109a:	601a      	str	r2, [r3, #0]
	valeur = analogValue / 170;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <adcheures+0x80>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <adcheures+0x84>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	1192      	asrs	r2, r2, #6
 80010a8:	17db      	asrs	r3, r3, #31
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <adcheures+0x88>)
 80010ae:	6013      	str	r3, [r2, #0]

	printf("Heures : %d\n",valeur);
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <adcheures+0x88>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <adcheures+0x8c>)
 80010b8:	f004 f9c6 	bl	8005448 <iprintf>

	HAL_ADC_Stop(&hadc);
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <adcheures+0x7c>)
 80010be:	f000 ff29 	bl	8001f14 <HAL_ADC_Stop>
	HAL_Delay(50);
 80010c2:	2032      	movs	r0, #50	; 0x32
 80010c4:	f000 fd5e 	bl	8001b84 <HAL_Delay>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	20000198 	.word	0x20000198
 80010d8:	60606061 	.word	0x60606061
 80010dc:	200001a0 	.word	0x200001a0
 80010e0:	080062a8 	.word	0x080062a8

080010e4 <adcfunction>:

void adcfunction(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	if (adccheck == 0){
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <adcfunction+0x30>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <adcfunction+0x12>
		adcsecondes();
 80010f0:	f7ff ff2a 	bl	8000f48 <adcsecondes>
	}
	else if (adccheck == 1){
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
		adcminutes(41);
	}
}
 80010f4:	e00b      	b.n	800110e <adcfunction+0x2a>
	else if (adccheck == 1){
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <adcfunction+0x30>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <adcfunction+0x2a>
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2102      	movs	r1, #2
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <adcfunction+0x34>)
 8001104:	f001 fceb 	bl	8002ade <HAL_GPIO_WritePin>
		adcminutes(41);
 8001108:	2029      	movs	r0, #41	; 0x29
 800110a:	f7ff ff5d 	bl	8000fc8 <adcminutes>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001c4 	.word	0x200001c4
 8001118:	40020400 	.word	0x40020400

0800111c <adchorloge>:

void adchorloge(){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	if (adccheck == 0){
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <adchorloge+0x30>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <adchorloge+0x14>
		adcminutes(68);
 8001128:	2044      	movs	r0, #68	; 0x44
 800112a:	f7ff ff4d 	bl	8000fc8 <adcminutes>
	}
	else if (adccheck == 1){
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
		adcheures();
	}
}
 800112e:	e00a      	b.n	8001146 <adchorloge+0x2a>
	else if (adccheck == 1){
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <adchorloge+0x30>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <adchorloge+0x2a>
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2102      	movs	r1, #2
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <adchorloge+0x34>)
 800113e:	f001 fcce 	bl	8002ade <HAL_GPIO_WritePin>
		adcheures();
 8001142:	f7ff ff87 	bl	8001054 <adcheures>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001c4 	.word	0x200001c4
 8001150:	40020400 	.word	0x40020400

08001154 <decrementunites>:

void decrementunites(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	while (unites > 0){
 8001158:	e010      	b.n	800117c <decrementunites+0x28>
		unites --;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <decrementunites+0x38>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <decrementunites+0x38>)
 8001162:	6013      	str	r3, [r2, #0]
		MAX7219_DisplayChar(4, unites + '0', 0);
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <decrementunites+0x38>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3330      	adds	r3, #48	; 0x30
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	2004      	movs	r0, #4
 8001170:	f004 f82d 	bl	80051ce <MAX7219_DisplayChar>
		HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f000 fd04 	bl	8001b84 <HAL_Delay>
	while (unites > 0){
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <decrementunites+0x38>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dcea      	bgt.n	800115a <decrementunites+0x6>
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001ac 	.word	0x200001ac

08001190 <decrementdizaines>:

void decrementdizaines(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	while (dizaines > 0){
 8001194:	e01f      	b.n	80011d6 <decrementdizaines+0x46>
		decrementunites();
 8001196:	f7ff ffdd 	bl	8001154 <decrementunites>
		dizaines --;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <decrementdizaines+0x54>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <decrementdizaines+0x54>)
 80011a2:	6013      	str	r3, [r2, #0]
		unites = 9;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <decrementdizaines+0x58>)
 80011a6:	2209      	movs	r2, #9
 80011a8:	601a      	str	r2, [r3, #0]
		MAX7219_DisplayChar(3, dizaines + '0', 0);
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <decrementdizaines+0x54>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3330      	adds	r3, #48	; 0x30
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	2003      	movs	r0, #3
 80011b6:	f004 f80a 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, unites + '0', 0);
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <decrementdizaines+0x58>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3330      	adds	r3, #48	; 0x30
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	2004      	movs	r0, #4
 80011c6:	f004 f802 	bl	80051ce <MAX7219_DisplayChar>
		HAL_Delay(1000);
 80011ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ce:	f000 fcd9 	bl	8001b84 <HAL_Delay>
		decrementunites();
 80011d2:	f7ff ffbf 	bl	8001154 <decrementunites>
	while (dizaines > 0){
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <decrementdizaines+0x54>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dcdb      	bgt.n	8001196 <decrementdizaines+0x6>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200001a8 	.word	0x200001a8
 80011e8:	200001ac 	.word	0x200001ac

080011ec <decrementminutes>:

void decrementminutes(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	while(minutes > 0){
 80011f0:	e01f      	b.n	8001232 <decrementminutes+0x46>
		decrementunites();
 80011f2:	f7ff ffaf 	bl	8001154 <decrementunites>
		decrementdizaines();
 80011f6:	f7ff ffcb 	bl	8001190 <decrementdizaines>
		minutes --;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <decrementminutes+0x54>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <decrementminutes+0x54>)
 8001202:	6013      	str	r3, [r2, #0]
		dizaines = 6;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <decrementminutes+0x58>)
 8001206:	2206      	movs	r2, #6
 8001208:	601a      	str	r2, [r3, #0]
		MAX7219_DisplayChar(2, minutes + '0', 1);
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <decrementminutes+0x54>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3330      	adds	r3, #48	; 0x30
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2002      	movs	r0, #2
 8001216:	f003 ffda 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, dizaines + '0', 0);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <decrementminutes+0x58>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3330      	adds	r3, #48	; 0x30
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	2003      	movs	r0, #3
 8001226:	f003 ffd2 	bl	80051ce <MAX7219_DisplayChar>
		decrementunites();
 800122a:	f7ff ff93 	bl	8001154 <decrementunites>
		decrementdizaines();
 800122e:	f7ff ffaf 	bl	8001190 <decrementdizaines>
	while(minutes > 0){
 8001232:	4b03      	ldr	r3, [pc, #12]	; (8001240 <decrementminutes+0x54>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dcdb      	bgt.n	80011f2 <decrementminutes+0x6>
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001b4 	.word	0x200001b4
 8001244:	200001a8 	.word	0x200001a8

08001248 <decrementdizainesminutes>:

void decrementdizainesminutes(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	while(dizainesminutes > 0){
 800124c:	e023      	b.n	8001296 <decrementdizainesminutes+0x4e>
		decrementunites();
 800124e:	f7ff ff81 	bl	8001154 <decrementunites>
		decrementdizaines();
 8001252:	f7ff ff9d 	bl	8001190 <decrementdizaines>
		decrementminutes();
 8001256:	f7ff ffc9 	bl	80011ec <decrementminutes>
		dizainesminutes --;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <decrementdizainesminutes+0x5c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <decrementdizainesminutes+0x5c>)
 8001262:	6013      	str	r3, [r2, #0]
		minutes = 10;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <decrementdizainesminutes+0x60>)
 8001266:	220a      	movs	r2, #10
 8001268:	601a      	str	r2, [r3, #0]
		MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <decrementdizainesminutes+0x5c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3330      	adds	r3, #48	; 0x30
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	2001      	movs	r0, #1
 8001276:	f003 ffaa 	bl	80051ce <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, minutes + '0', 1);
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <decrementdizainesminutes+0x60>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	2201      	movs	r2, #1
 8001282:	4619      	mov	r1, r3
 8001284:	2002      	movs	r0, #2
 8001286:	f003 ffa2 	bl	80051ce <MAX7219_DisplayChar>
		decrementunites();
 800128a:	f7ff ff63 	bl	8001154 <decrementunites>
		decrementdizaines();
 800128e:	f7ff ff7f 	bl	8001190 <decrementdizaines>
		decrementminutes();
 8001292:	f7ff ffab 	bl	80011ec <decrementminutes>
	while(dizainesminutes > 0){
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <decrementdizainesminutes+0x5c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dcd7      	bgt.n	800124e <decrementdizainesminutes+0x6>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200001b0 	.word	0x200001b0
 80012a8:	200001b4 	.word	0x200001b4

080012ac <BUZZ>:

void BUZZ(int i){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim3);
 80012b4:	480e      	ldr	r0, [pc, #56]	; (80012f0 <BUZZ+0x44>)
 80012b6:	f003 f8af 	bl	8004418 <HAL_TIM_Base_Start>
	for (int j=0; j<i;j++){
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e00e      	b.n	80012de <BUZZ+0x32>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80012c0:	2104      	movs	r1, #4
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <BUZZ+0x44>)
 80012c4:	f003 f93a 	bl	800453c <HAL_TIM_PWM_Start>
		HAL_Delay(2000);
 80012c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012cc:	f000 fc5a 	bl	8001b84 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80012d0:	2104      	movs	r1, #4
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <BUZZ+0x44>)
 80012d4:	f003 f9c8 	bl	8004668 <HAL_TIM_PWM_Stop>
	for (int j=0; j<i;j++){
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbec      	blt.n	80012c0 <BUZZ+0x14>
	}
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000158 	.word	0x20000158

080012f4 <MOT>:

void MOT(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <MOT+0x6c>)
 80012fa:	f003 f88d 	bl	8004418 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <MOT+0x6c>)
 8001302:	f003 f91b 	bl	800453c <HAL_TIM_PWM_Start>
	while (moteur == 0){
 8001306:	e021      	b.n	800134c <MOT+0x58>
		if (htim3.Instance->CCR1 < 250){
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MOT+0x6c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	2bf9      	cmp	r3, #249	; 0xf9
 8001310:	d80a      	bhi.n	8001328 <MOT+0x34>
			htim3.Instance->CCR1 += 50;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MOT+0x6c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MOT+0x6c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3232      	adds	r2, #50	; 0x32
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(200);
 8001320:	20c8      	movs	r0, #200	; 0xc8
 8001322:	f000 fc2f 	bl	8001b84 <HAL_Delay>
 8001326:	e006      	b.n	8001336 <MOT+0x42>
		}
		else{
			htim3.Instance->CCR1 = 0;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MOT+0x6c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f000 fc27 	bl	8001b84 <HAL_Delay>
		}
		if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8001336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <MOT+0x70>)
 800133c:	f001 fbb8 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <MOT+0x58>
			moteur = 1;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MOT+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
	while (moteur == 0){
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MOT+0x74>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0d9      	beq.n	8001308 <MOT+0x14>
		}
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	4802      	ldr	r0, [pc, #8]	; (8001360 <MOT+0x6c>)
 8001358:	f003 f986 	bl	8004668 <HAL_TIM_PWM_Stop>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000158 	.word	0x20000158
 8001364:	40020000 	.word	0x40020000
 8001368:	200001cc 	.word	0x200001cc

0800136c <minuteur>:

void minuteur(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	while ((dizainesminutes != 0) || (minutes != 0) || (dizaines != 0) || (unites !=0 )){
 8001370:	e01c      	b.n	80013ac <minuteur+0x40>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2104      	movs	r1, #4
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <minuteur+0xa8>)
 8001378:	f001 fbb1 	bl	8002ade <HAL_GPIO_WritePin>
		if (dizainesminutes != 0) {decrementdizainesminutes();}
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <minuteur+0xac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <minuteur+0x1c>
 8001384:	f7ff ff60 	bl	8001248 <decrementdizainesminutes>
		if (minutes !=0) {decrementminutes();}
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <minuteur+0xb0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <minuteur+0x28>
 8001390:	f7ff ff2c 	bl	80011ec <decrementminutes>
		if (dizaines !=0) {decrementdizaines();}
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <minuteur+0xb4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <minuteur+0x34>
 800139c:	f7ff fef8 	bl	8001190 <decrementdizaines>
		if (unites !=0) {decrementunites();}
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <minuteur+0xb8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <minuteur+0x40>
 80013a8:	f7ff fed4 	bl	8001154 <decrementunites>
	while ((dizainesminutes != 0) || (minutes != 0) || (dizaines != 0) || (unites !=0 )){
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <minuteur+0xac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1de      	bne.n	8001372 <minuteur+0x6>
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <minuteur+0xb0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1da      	bne.n	8001372 <minuteur+0x6>
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <minuteur+0xb4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1d6      	bne.n	8001372 <minuteur+0x6>
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <minuteur+0xb8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1d2      	bne.n	8001372 <minuteur+0x6>
	}
	BUZZ(5);
 80013cc:	2005      	movs	r0, #5
 80013ce:	f7ff ff6d 	bl	80012ac <BUZZ>

	// Faut tout reset apres mais l'affichage marche pas
	unites = 0;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <minuteur+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	dizaines = 0;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <minuteur+0xb4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	minutes = 0;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <minuteur+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
	dizainesminutes = 0;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <minuteur+0xac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2102      	movs	r1, #2
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <minuteur+0xa8>)
 80013f0:	f001 fb75 	bl	8002ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2104      	movs	r1, #4
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <minuteur+0xa8>)
 80013fa:	f001 fb70 	bl	8002ade <HAL_GPIO_WritePin>

	adccheck = 0;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <minuteur+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	valide = 0;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <minuteur+0xc0>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
	affiche_num();
 800140a:	f7ff fb17 	bl	8000a3c <affiche_num>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020400 	.word	0x40020400
 8001418:	200001b0 	.word	0x200001b0
 800141c:	200001b4 	.word	0x200001b4
 8001420:	200001a8 	.word	0x200001a8
 8001424:	200001ac 	.word	0x200001ac
 8001428:	200001c4 	.word	0x200001c4
 800142c:	200001c0 	.word	0x200001c0

08001430 <horloge>:


void horloge(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	4829      	ldr	r0, [pc, #164]	; (80014e4 <horloge+0xb4>)
 800143e:	f002 fc0a 	bl	8003c56 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	4826      	ldr	r0, [pc, #152]	; (80014e4 <horloge+0xb4>)
 800144a:	f002 fb22 	bl	8003a92 <HAL_RTC_GetTime>

	MAX7219_Clear();
 800144e:	f003 fea8 	bl	80051a2 <MAX7219_Clear>
	MAX7219_Init();
 8001452:	f003 fe6f 	bl	8005134 <MAX7219_Init>
	MAX7219_DisplayChar(1, sTime.Hours / 10 + '0', 0); // Affiche les dizaines de minutes
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <horloge+0xb8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	08db      	lsrs	r3, r3, #3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	3330      	adds	r3, #48	; 0x30
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	2001      	movs	r0, #1
 800146a:	f003 feb0 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, sTime.Hours % 10 + '0', 1); // Affiche les minutes
 800146e:	793a      	ldrb	r2, [r7, #4]
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <horloge+0xb8>)
 8001472:	fba3 1302 	umull	r1, r3, r3, r2
 8001476:	08d9      	lsrs	r1, r3, #3
 8001478:	460b      	mov	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3330      	adds	r3, #48	; 0x30
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
 800148c:	f003 fe9f 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, sTime.Minutes / 10 + '0', 0); // Affiche les dizaines de secondes
 8001490:	797b      	ldrb	r3, [r7, #5]
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <horloge+0xb8>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3330      	adds	r3, #48	; 0x30
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	2003      	movs	r0, #3
 80014a4:	f003 fe93 	bl	80051ce <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, sTime.Minutes % 10 + '0', 0);
 80014a8:	797a      	ldrb	r2, [r7, #5]
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <horloge+0xb8>)
 80014ac:	fba3 1302 	umull	r1, r3, r3, r2
 80014b0:	08d9      	lsrs	r1, r3, #3
 80014b2:	460b      	mov	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3330      	adds	r3, #48	; 0x30
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	2004      	movs	r0, #4
 80014c6:	f003 fe82 	bl	80051ce <MAX7219_DisplayChar>
	printf("%02d:%02d:%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80014ca:	793b      	ldrb	r3, [r7, #4]
 80014cc:	4619      	mov	r1, r3
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	461a      	mov	r2, r3
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <horloge+0xbc>)
 80014d6:	f003 ffb7 	bl	8005448 <iprintf>

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000e0 	.word	0x200000e0
 80014e8:	cccccccd 	.word	0xcccccccd
 80014ec:	080062b8 	.word	0x080062b8

080014f0 <checkhorloge>:

void inithorloge(){
	horloge();
}

void checkhorloge(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <checkhorloge+0xc8>)
 80014fe:	f002 fbaa 	bl	8003c56 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	482b      	ldr	r0, [pc, #172]	; (80015b8 <checkhorloge+0xc8>)
 800150a:	f002 fac2 	bl	8003a92 <HAL_RTC_GetTime>

	printf("Temps actuel : %d Heures, %d Minutes\n",sTime.Hours, sTime.Minutes);
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	4619      	mov	r1, r3
 8001512:	797b      	ldrb	r3, [r7, #5]
 8001514:	461a      	mov	r2, r3
 8001516:	4829      	ldr	r0, [pc, #164]	; (80015bc <checkhorloge+0xcc>)
 8001518:	f003 ff96 	bl	8005448 <iprintf>
	printf("Heure de l'alarme : %d Heures, %d Minutes\n",valeur, valeurMin);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <checkhorloge+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <checkhorloge+0xd4>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4828      	ldr	r0, [pc, #160]	; (80015c8 <checkhorloge+0xd8>)
 8001528:	f003 ff8e 	bl	8005448 <iprintf>

	if (((valeur >= sTime.Hours) &&(valeurMin >= sTime.Minutes)) || (valeur >= sTime.Hours)){
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	461a      	mov	r2, r3
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <checkhorloge+0xd0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	dc05      	bgt.n	8001544 <checkhorloge+0x54>
 8001538:	797b      	ldrb	r3, [r7, #5]
 800153a:	461a      	mov	r2, r3
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <checkhorloge+0xd4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	dd05      	ble.n	8001550 <checkhorloge+0x60>
 8001544:	793b      	ldrb	r3, [r7, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <checkhorloge+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	dc0b      	bgt.n	8001568 <checkhorloge+0x78>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <checkhorloge+0xc8>)
 8001558:	f002 fb7d 	bl	8003c56 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4815      	ldr	r0, [pc, #84]	; (80015b8 <checkhorloge+0xc8>)
 8001564:	f002 fa95 	bl	8003a92 <HAL_RTC_GetTime>
	}

	if ((valeurMin <= sTime.Minutes) && (valeur <= sTime.Hours)){
 8001568:	797b      	ldrb	r3, [r7, #5]
 800156a:	461a      	mov	r2, r3
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <checkhorloge+0xd4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	db1d      	blt.n	80015b0 <checkhorloge+0xc0>
 8001574:	793b      	ldrb	r3, [r7, #4]
 8001576:	461a      	mov	r2, r3
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <checkhorloge+0xd0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	db17      	blt.n	80015b0 <checkhorloge+0xc0>

		printf("ALARME\n");
 8001580:	4812      	ldr	r0, [pc, #72]	; (80015cc <checkhorloge+0xdc>)
 8001582:	f003 ffc7 	bl	8005514 <puts>
		MOT();
 8001586:	f7ff feb5 	bl	80012f4 <MOT>
		horlogevar = 0;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <checkhorloge+0xe0>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
		valide = 0;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <checkhorloge+0xe4>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
		adccheck = 0;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <checkhorloge+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
		moteur = 0;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <checkhorloge+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
		affiche_clear();
 80015a2:	f7ff fb1b 	bl	8000bdc <affiche_clear>
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2102      	movs	r1, #2
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <checkhorloge+0xf0>)
 80015ac:	f001 fa97 	bl	8002ade <HAL_GPIO_WritePin>


	}
}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200000e0 	.word	0x200000e0
 80015bc:	080062cc 	.word	0x080062cc
 80015c0:	200001a0 	.word	0x200001a0
 80015c4:	200001a4 	.word	0x200001a4
 80015c8:	080062f4 	.word	0x080062f4
 80015cc:	08006320 	.word	0x08006320
 80015d0:	200001c8 	.word	0x200001c8
 80015d4:	200001c0 	.word	0x200001c0
 80015d8:	200001c4 	.word	0x200001c4
 80015dc:	200001cc 	.word	0x200001cc
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin){
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f4:	d11b      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x4a>
	case BTNCarte_Pin :
		if (mode < 4){
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	dc0b      	bgt.n	8001616 <HAL_GPIO_EXTI_Callback+0x32>
			mode ++;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 8001606:	6013      	str	r3, [r2, #0]
			printf("Mode : %d\n", mode);
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_GPIO_EXTI_Callback+0x58>)
 8001610:	f003 ff1a 	bl	8005448 <iprintf>
 8001614:	e008      	b.n	8001628 <HAL_GPIO_EXTI_Callback+0x44>
		}
		else{
			mode = 1;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
			printf("Mode : %d\n", mode);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_GPIO_EXTI_Callback+0x54>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <HAL_GPIO_EXTI_Callback+0x58>)
 8001624:	f003 ff10 	bl	8005448 <iprintf>
		}
		affichemod();
 8001628:	f7ff f9ee 	bl	8000a08 <affichemod>
		break;
 800162c:	bf00      	nop
	}
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	08006328 	.word	0x08006328

08001640 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_MspInit+0x58>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_MspInit+0x58>)
 8001658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800165c:	6253      	str	r3, [r2, #36]	; 0x24
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_MspInit+0x58>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_MspInit+0x58>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_MspInit+0x58>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_MspInit+0x58>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_MspInit+0x58>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_MspInit+0x58>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6253      	str	r3, [r2, #36]	; 0x24
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_MspInit+0x58>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_ADC_MspInit+0x74>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d123      	bne.n	8001712 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_ADC_MspInit+0x78>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = RV1_Pin|RV2_Pin;
 80016fa:	2303      	movs	r3, #3
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_ADC_MspInit+0x7c>)
 800170e:	f001 f83f 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40012400 	.word	0x40012400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_RTC_MspInit+0x24>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d102      	bne.n	8001740 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RTC_MspInit+0x28>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40002800 	.word	0x40002800
 8001750:	424706d8 	.word	0x424706d8

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_SPI_MspInit+0x7c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d127      	bne.n	80017c6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 800177c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80017a6:	23e0      	movs	r3, #224	; 0xe0
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b6:	2305      	movs	r3, #5
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_SPI_MspInit+0x84>)
 80017c2:	f000 ffe5 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40013000 	.word	0x40013000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_TIM_Base_MspInit+0x44>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d113      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6253      	str	r3, [r2, #36]	; 0x24
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	201d      	movs	r0, #29
 800180c:	f000 ff89 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001810:	201d      	movs	r0, #29
 8001812:	f000 ffa2 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40000400 	.word	0x40000400
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_TIM_MspPostInit+0x9c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d137      	bne.n	80018ba <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_TIM_MspPostInit+0xa0>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800188a:	2302      	movs	r3, #2
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <HAL_TIM_MspPostInit+0xa4>)
 8001896:	f000 ff7b 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT_Pin;
 800189a:	2310      	movs	r3, #16
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018aa:	2302      	movs	r3, #2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOT_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_TIM_MspPostInit+0xa8>)
 80018b6:	f000 ff6b 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020400 	.word	0x40020400

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f000 f917 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM3_IRQHandler+0x10>)
 800192a:	f002 feda 	bl	80046e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000158 	.word	0x20000158

08001938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTNCarte_Pin);
 800193c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001940:	f001 f8e6 	bl	8002b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195a:	f3af 8000 	nop.w
 800195e:	4601      	mov	r1, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf0      	blt.n	800195a <_read+0x12>
  }

  return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a8:	605a      	str	r2, [r3, #4]
  return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f003 feac 	bl	8005770 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20014000 	.word	0x20014000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	200001d0 	.word	0x200001d0
 8001a4c:	20000328 	.word	0x20000328

08001a50 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a5c:	f7ff fff8 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a62:	490c      	ldr	r1, [pc, #48]	; (8001a94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a78:	4c09      	ldr	r4, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f003 fe79 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8a:	f7fe fd1d 	bl	80004c8 <main>
  bx lr
 8001a8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a98:	080063d0 	.word	0x080063d0
  ldr r2, =_sbss
 8001a9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001aa0:	20000324 	.word	0x20000324

08001aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_IRQHandler>

08001aa6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 fe2b 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab6:	200f      	movs	r0, #15
 8001ab8:	f000 f80e 	bl	8001ad8 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	e001      	b.n	8001acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac8:	f7ff fdc0 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_InitTick+0x68>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d022      	beq.n	8001b32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_InitTick+0x6c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_InitTick+0x68>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fe38 	bl	8002776 <HAL_SYSTICK_Config>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10f      	bne.n	8001b2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d809      	bhi.n	8001b26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b12:	2200      	movs	r2, #0
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1a:	f000 fe02 	bl	8002722 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_InitTick+0x70>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e007      	b.n	8001b36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e004      	b.n	8001b36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000010 	.word	0x20000010
 8001b44:	20000008 	.word	0x20000008
 8001b48:	2000000c 	.word	0x2000000c

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200001d4 	.word	0x200001d4
 8001b6c:	20000010 	.word	0x20000010

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	200001d4 	.word	0x200001d4

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d004      	beq.n	8001ba8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_Delay+0x40>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ba8:	bf00      	nop
 8001baa:	f7ff ffe1 	bl	8001b70 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d8f7      	bhi.n	8001baa <HAL_Delay+0x26>
  {
  }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e127      	b.n	8001e38 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d115      	bne.n	8001c22 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <HAL_ADC_Init+0x278>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a8d      	ldr	r2, [pc, #564]	; (8001e40 <HAL_ADC_Init+0x278>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_ADC_Init+0x278>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fd43 	bl	80016a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80ff 	bne.w	8001e2e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c38:	f023 0302 	bic.w	r3, r3, #2
 8001c3c:	f043 0202 	orr.w	r2, r3, #2
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_ADC_Init+0x27c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	497c      	ldr	r1, [pc, #496]	; (8001e44 <HAL_ADC_Init+0x27c>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c5e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c66:	4619      	mov	r1, r3
 8001c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001c82:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001caa:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d007      	beq.n	8001cca <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d04f      	beq.n	8001d78 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cea:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6912      	ldr	r2, [r2, #16]
 8001cf0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001cf4:	d003      	beq.n	8001cfe <HAL_ADC_Init+0x136>
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6912      	ldr	r2, [r2, #16]
 8001cfa:	2a01      	cmp	r2, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_ADC_Init+0x13c>
 8001cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_Init+0x13e>
 8001d04:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d06:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d125      	bne.n	8001d64 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d114      	bne.n	8001d4c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	617a      	str	r2, [r7, #20]
  return result;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d46:	4313      	orrs	r3, r2
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4a:	e00b      	b.n	8001d64 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_ADC_Init+0x280>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_ADC_Init+0x284>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d94:	d003      	beq.n	8001d9e <HAL_ADC_Init+0x1d6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d119      	bne.n	8001dd2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	3b01      	subs	r3, #1
 8001dae:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001db2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	fa92 f2a2 	rbit	r2, r2
 8001dba:	60fa      	str	r2, [r7, #12]
  return result;
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	fab2 f282 	clz	r2, r2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	fa03 f202 	lsl.w	r2, r3, r2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e007      	b.n	8001de2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_ADC_Init+0x288>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f023 0303 	bic.w	r3, r3, #3
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e08:	e014      	b.n	8001e34 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f023 0312 	bic.w	r3, r3, #18
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40012700 	.word	0x40012700
 8001e48:	fcfc16ff 	.word	0xfcfc16ff
 8001e4c:	c0fff189 	.word	0xc0fff189
 8001e50:	bf80fffe 	.word	0xbf80fffe

08001e54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_Start+0x1a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e04e      	b.n	8001f0c <HAL_ADC_Start+0xb8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fade 	bl	8002438 <ADC_Enable>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d141      	bne.n	8001f0a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	f023 0206 	bic.w	r2, r3, #6
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ed2:	e002      	b.n	8001eda <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d107      	bne.n	8001f0a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f08:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Stop+0x1a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e01a      	b.n	8001f64 <HAL_ADC_Stop+0x50>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fada 	bl	80024f0 <ADC_ConversionStop_Disable>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f88:	d113      	bne.n	8001fb2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f98:	d10b      	bne.n	8001fb2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e068      	b.n	8002084 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fb2:	f7ff fddd 	bl	8001b70 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fb8:	e021      	b.n	8001ffe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d01d      	beq.n	8001ffe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0x6c>
 8001fc8:	f7ff fdd2 	bl	8001b70 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d212      	bcs.n	8001ffe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e042      	b.n	8002084 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0d6      	beq.n	8001fba <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0212 	mvn.w	r2, #18
 800201c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d124      	bne.n	8002082 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11f      	bne.n	8002082 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800205a:	2b00      	cmp	r3, #0
 800205c:	d111      	bne.n	8002082 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_ADC_PollForEvent>:
  *            @arg ADC_OVR_EVENT: ADC Overrun event.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800209c:	f7ff fd68 	bl	8001b70 <HAL_GetTick>
 80020a0:	6178      	str	r0, [r7, #20]
  
  /* Check selected event flag */
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80020a2:	e022      	b.n	80020ea <HAL_ADC_PollForEvent+0x5e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d01e      	beq.n	80020ea <HAL_ADC_PollForEvent+0x5e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_ADC_PollForEvent+0x36>
 80020b2:	f7ff fd5d 	bl	8001b70 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d213      	bcs.n	80020ea <HAL_ADC_PollForEvent+0x5e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d00b      	beq.n	80020ea <HAL_ADC_PollForEvent+0x5e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e029      	b.n	800213e <HAL_ADC_PollForEvent+0xb2>
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1d4      	bne.n	80020a4 <HAL_ADC_PollForEvent+0x18>
        }
      }
    }
  }
  
  switch(EventType)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_PollForEvent+0x8c>
  {
  /* Analog watchdog (level out of window) event */
  case ADC_AWD_EVENT:
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
      
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0201 	mvn.w	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    break;
 8002116:	e011      	b.n	800213c <HAL_ADC_PollForEvent+0xb0>
    /* Note: On STM32L1, ADC overrun can be set through other parameters      */
    /*       refer to description of parameter "EOCSelection" for more        */
    /*       details.                                                         */

    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	601a      	str	r2, [r3, #0]
    break;
 800213a:	bf00      	nop
  }
  
  /* Return ADC state */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x20>
 800217c:	2302      	movs	r3, #2
 800217e:	e14f      	b.n	8002420 <HAL_ADC_ConfigChannel+0x2c0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d81c      	bhi.n	80021ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b05      	subs	r3, #5
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b05      	subs	r3, #5
 80021bc:	fa00 f203 	lsl.w	r2, r0, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
 80021c8:	e07e      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d81c      	bhi.n	800220c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	3b23      	subs	r3, #35	; 0x23
 80021e4:	221f      	movs	r2, #31
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4019      	ands	r1, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b23      	subs	r3, #35	; 0x23
 80021fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c
 800220a:	e05d      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d81c      	bhi.n	800224e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b41      	subs	r3, #65	; 0x41
 8002226:	221f      	movs	r2, #31
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	4019      	ands	r1, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b41      	subs	r3, #65	; 0x41
 8002240:	fa00 f203 	lsl.w	r2, r0, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
 800224c:	e03c      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b18      	cmp	r3, #24
 8002254:	d81c      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b5f      	subs	r3, #95	; 0x5f
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	4019      	ands	r1, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b5f      	subs	r3, #95	; 0x5f
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
 800228e:	e01b      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b7d      	subs	r3, #125	; 0x7d
 80022a2:	221f      	movs	r2, #31
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	3b7d      	subs	r3, #125	; 0x7d
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d81a      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	2207      	movs	r2, #7
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4019      	ands	r1, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6898      	ldr	r0, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	e05d      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b13      	cmp	r3, #19
 800230c:	d81c      	bhi.n	8002348 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	3b1e      	subs	r3, #30
 8002320:	2207      	movs	r2, #7
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	4019      	ands	r1, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6898      	ldr	r0, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	e03c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b1d      	cmp	r3, #29
 800234e:	d81c      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b3c      	subs	r3, #60	; 0x3c
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6898      	ldr	r0, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	3b3c      	subs	r3, #60	; 0x3c
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	e01b      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	3b5a      	subs	r3, #90	; 0x5a
 800239c:	2207      	movs	r2, #7
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	4019      	ands	r1, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6898      	ldr	r0, [r3, #8]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b5a      	subs	r3, #90	; 0x5a
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d003      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ce:	2b11      	cmp	r3, #17
 80023d0:	d121      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_ADC_ConfigChannel+0x2cc>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_ADC_ConfigChannel+0x2cc>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_ADC_ConfigChannel+0x2cc>)
 80023e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d111      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_ADC_ConfigChannel+0x2d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_ADC_ConfigChannel+0x2d4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9a      	lsrs	r2, r3, #18
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002408:	e002      	b.n	8002410 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012700 	.word	0x40012700
 8002430:	20000008 	.word	0x20000008
 8002434:	431bde83 	.word	0x431bde83

08002438 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d043      	beq.n	80024de <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <ADC_Enable+0xb0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a20      	ldr	r2, [pc, #128]	; (80024ec <ADC_Enable+0xb4>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9a      	lsrs	r2, r3, #18
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800247a:	e002      	b.n	8002482 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002488:	f7ff fb72 	bl	8001b70 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800248e:	e01f      	b.n	80024d0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002490:	f7ff fb6e 	bl	8001b70 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d918      	bls.n	80024d0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d011      	beq.n	80024d0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e007      	b.n	80024e0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d1d8      	bne.n	8002490 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000008 	.word	0x20000008
 80024ec:	431bde83 	.word	0x431bde83

080024f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d12e      	bne.n	8002568 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251a:	f7ff fb29 	bl	8001b70 <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002520:	e01b      	b.n	800255a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002522:	f7ff fb25 	bl	8001b70 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d914      	bls.n	800255a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d10d      	bne.n	800255a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e007      	b.n	800256a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d0dc      	beq.n	8002522 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <__NVIC_SetPriorityGrouping>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4906      	ldr	r1, [pc, #24]	; (800260c <__NVIC_EnableIRQ+0x34>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Config>:
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff90 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff2d 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff42 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff90 	bl	8002664 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5f 	bl	8002610 <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff35 	bl	80025d8 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027a6:	e160      	b.n	8002a6a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8152 	beq.w	8002a64 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d005      	beq.n	80027d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d130      	bne.n	800283a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800280e:	2201      	movs	r2, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 0201 	and.w	r2, r3, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b03      	cmp	r3, #3
 8002844:	d017      	beq.n	8002876 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d123      	bne.n	80028ca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	6939      	ldr	r1, [r7, #16]
 80028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0203 	and.w	r2, r3, #3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80ac 	beq.w	8002a64 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002924:	4a59      	ldr	r2, [pc, #356]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x300>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d025      	beq.n	800299c <HAL_GPIO_Init+0x20c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01f      	beq.n	8002998 <HAL_GPIO_Init+0x208>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x308>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d019      	beq.n	8002994 <HAL_GPIO_Init+0x204>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <HAL_GPIO_Init+0x200>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00d      	beq.n	800298c <HAL_GPIO_Init+0x1fc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <HAL_GPIO_Init+0x1f8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_GPIO_Init+0x1f4>
 8002980:	2306      	movs	r3, #6
 8002982:	e00c      	b.n	800299e <HAL_GPIO_Init+0x20e>
 8002984:	2307      	movs	r3, #7
 8002986:	e00a      	b.n	800299e <HAL_GPIO_Init+0x20e>
 8002988:	2305      	movs	r3, #5
 800298a:	e008      	b.n	800299e <HAL_GPIO_Init+0x20e>
 800298c:	2304      	movs	r3, #4
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x20e>
 8002990:	2303      	movs	r3, #3
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x20e>
 8002994:	2302      	movs	r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x20e>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x20e>
 800299c:	2300      	movs	r3, #0
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ae:	4937      	ldr	r1, [pc, #220]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_GPIO_Init+0x31c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e0:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_GPIO_Init+0x31c>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_GPIO_Init+0x31c>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a0a:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f ae97 	bne.w	80027a8 <HAL_GPIO_Init+0x18>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	807b      	strh	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aee:	787b      	ldrb	r3, [r7, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002afa:	e003      	b.n	8002b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	041a      	lsls	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd58 	bl	80015e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40010400 	.word	0x40010400

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e31d      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b52:	4b94      	ldr	r3, [pc, #592]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d006      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b87      	ldr	r3, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06a      	beq.n	8002c68 <HAL_RCC_OscConfig+0x128>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d166      	bne.n	8002c68 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e2f7      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x74>
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e02d      	b.n	8002c10 <HAL_RCC_OscConfig+0xd0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x96>
 8002bbc:	4b79      	ldr	r3, [pc, #484]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0xd0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xb8>
 8002bde:	4b71      	ldr	r3, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a70      	ldr	r2, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6d      	ldr	r2, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xd0>
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a69      	ldr	r2, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe ffaa 	bl	8001b70 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe ffa6 	bl	8001b70 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e2ad      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe0>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe ff96 	bl	8001b70 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe ff92 	bl	8001b70 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e299      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5a:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x108>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d05a      	beq.n	8002d2c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d119      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x176>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x160>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e276      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	493d      	ldr	r1, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb4:	e03a      	b.n	8002d2c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d020      	beq.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCC_OscConfig+0x268>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff54 	bl	8001b70 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe ff50 	bl	8001b70 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e257      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	492a      	ldr	r1, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
 8002cfe:	e015      	b.n	8002d2c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCC_OscConfig+0x268>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe ff33 	bl	8001b70 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe ff2f 	bl	8001b70 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e236      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d20:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80b8 	beq.w	8002eaa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d170      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x218>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e21a      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d921      	bls.n	8002dac <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fc09 	bl	8003584 <RCC_SetFlashLatencyFromMSIRange>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e208      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4906      	ldr	r1, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	4901      	ldr	r1, [pc, #4]	; (8002da4 <HAL_RCC_OscConfig+0x264>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e020      	b.n	8002de6 <HAL_RCC_OscConfig+0x2a6>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b99      	ldr	r3, [pc, #612]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4996      	ldr	r1, [pc, #600]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dbe:	4b95      	ldr	r3, [pc, #596]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	4991      	ldr	r1, [pc, #580]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fbd4 	bl	8003584 <RCC_SetFlashLatencyFromMSIRange>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1d3      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	3301      	adds	r3, #1
 8002dee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002df6:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	0912      	lsrs	r2, r2, #4
 8002dfc:	f002 020f 	and.w	r2, r2, #15
 8002e00:	4985      	ldr	r1, [pc, #532]	; (8003018 <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	5c8a      	ldrb	r2, [r1, r2]
 8002e04:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e06:	4a85      	ldr	r2, [pc, #532]	; (800301c <HAL_RCC_OscConfig+0x4dc>)
 8002e08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fe62 	bl	8001ad8 <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d045      	beq.n	8002eaa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	e1b5      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d029      	beq.n	8002e7e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e2a:	4b7e      	ldr	r3, [pc, #504]	; (8003024 <HAL_RCC_OscConfig+0x4e4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fe9e 	bl	8001b70 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e38:	f7fe fe9a 	bl	8001b70 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1a1      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e4a:	4b72      	ldr	r3, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e56:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	496c      	ldr	r1, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	4967      	ldr	r1, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e7e:	4b69      	ldr	r3, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x4e4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fe74 	bl	8001b70 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fe70 	bl	8001b70 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e177      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d030      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b5a      	ldr	r3, [pc, #360]	; (8003028 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fe54 	bl	8001b70 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fe50 	bl	8001b70 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e157      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x38c>
 8002eea:	e015      	b.n	8002f18 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fe3d 	bl	8001b70 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fe39 	bl	8001b70 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e140      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f0c:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b5 	beq.w	8003090 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6253      	str	r3, [r2, #36]	; 0x24
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a32      	ldr	r2, [pc, #200]	; (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fe01 	bl	8001b70 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe fdfd 	bl	8001b70 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e104      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x466>
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6353      	str	r3, [r2, #52]	; 0x34
 8002fa4:	e02d      	b.n	8003002 <HAL_RCC_OscConfig+0x4c2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x488>
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8002fc6:	e01c      	b.n	8003002 <HAL_RCC_OscConfig+0x4c2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x4aa>
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0x4c2>
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	6353      	str	r3, [r2, #52]	; 0x34
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003000:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fe fdb1 	bl	8001b70 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003010:	e019      	b.n	8003046 <HAL_RCC_OscConfig+0x506>
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	08006340 	.word	0x08006340
 800301c:	20000008 	.word	0x20000008
 8003020:	2000000c 	.word	0x2000000c
 8003024:	42470020 	.word	0x42470020
 8003028:	42470680 	.word	0x42470680
 800302c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fd9e 	bl	8001b70 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0a3      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003046:	4b54      	ldr	r3, [pc, #336]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x4f0>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe fd8c 	bl	8001b70 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe fd88 	bl	8001b70 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e08d      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003072:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	4a43      	ldr	r2, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d079      	beq.n	800318c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d056      	beq.n	800314c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d13b      	bne.n	800311e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_OscConfig+0x65c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fd60 	bl	8001b70 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fd5c 	bl	8001b70 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e063      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	4319      	orrs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	430b      	orrs	r3, r1
 80030ea:	492b      	ldr	r1, [pc, #172]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x65c>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fd3b 	bl	8001b70 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fd37 	bl	8001b70 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e03e      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x5be>
 800311c:	e036      	b.n	800318c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_RCC_OscConfig+0x65c>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fd24 	bl	8001b70 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe fd20 	bl	8001b70 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e027      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x5ec>
 800314a:	e01f      	b.n	800318c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e01a      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCC_OscConfig+0x658>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	429a      	cmp	r2, r3
 800316a:	d10d      	bne.n	8003188 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	42470060 	.word	0x42470060

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e11a      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d919      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x34>
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a89      	ldr	r2, [pc, #548]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b87      	ldr	r3, [pc, #540]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 0201 	bic.w	r2, r3, #1
 80031dc:	4985      	ldr	r1, [pc, #532]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e4:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0f9      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003202:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	497a      	ldr	r1, [pc, #488]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 808e 	beq.w	800333e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0d7      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003242:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0cb      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0bf      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0b7      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	495c      	ldr	r1, [pc, #368]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fe fc70 	bl	8001b70 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe fc68 	bl	8001b70 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e09b      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b2:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_ClockConfig+0xfc>
 80032be:	e03e      	b.n	800333e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d112      	bne.n	80032ee <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fe fc51 	bl	8001b70 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e084      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e0:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_ClockConfig+0x12a>
 80032ec:	e027      	b.n	800333e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d11d      	bne.n	8003332 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe fc3a 	bl	8001b70 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e06d      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x158>
 800331a:	e010      	b.n	800333e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe fc28 	bl	8001b70 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e05b      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d219      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_RCC_ClockConfig+0x1be>
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0201 	bic.w	r2, r3, #1
 8003366:	4923      	ldr	r1, [pc, #140]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_ClockConfig+0x254>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e034      	b.n	80033ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4917      	ldr	r1, [pc, #92]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	490f      	ldr	r1, [pc, #60]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033be:	f000 f823 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCC_ClockConfig+0x258>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490b      	ldr	r1, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x25c>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fb7a 	bl	8001ad8 <HAL_InitTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e8:	7afb      	ldrb	r3, [r7, #11]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08006340 	.word	0x08006340
 8003400:	20000008 	.word	0x20000008
 8003404:	2000000c 	.word	0x2000000c

08003408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b08e      	sub	sp, #56	; 0x38
 800340e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d00d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x34>
 8003420:	2b0c      	cmp	r3, #12
 8003422:	f200 8092 	bhi.w	800354a <HAL_RCC_GetSysClockFreq+0x142>
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x28>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x2e>
 800342e:	e08c      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b51      	ldr	r3, [pc, #324]	; (8003578 <HAL_RCC_GetSysClockFreq+0x170>)
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003434:	e097      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003436:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_RCC_GetSysClockFreq+0x174>)
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800343a:	e094      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	0c9b      	lsrs	r3, r3, #18
 8003440:	f003 020f 	and.w	r2, r3, #15
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCC_GetSysClockFreq+0x178>)
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	0d9b      	lsrs	r3, r3, #22
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d021      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2200      	movs	r2, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <HAL_RCC_GetSysClockFreq+0x174>)
 800346c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003470:	464a      	mov	r2, r9
 8003472:	fb03 f202 	mul.w	r2, r3, r2
 8003476:	2300      	movs	r3, #0
 8003478:	4644      	mov	r4, r8
 800347a:	fb04 f303 	mul.w	r3, r4, r3
 800347e:	4413      	add	r3, r2
 8003480:	4a3e      	ldr	r2, [pc, #248]	; (800357c <HAL_RCC_GetSysClockFreq+0x174>)
 8003482:	4644      	mov	r4, r8
 8003484:	fba4 0102 	umull	r0, r1, r4, r2
 8003488:	440b      	add	r3, r1
 800348a:	4619      	mov	r1, r3
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2200      	movs	r2, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	617a      	str	r2, [r7, #20]
 8003494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003498:	f7fc fe70 	bl	800017c <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
 80034a4:	e04e      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2200      	movs	r2, #0
 80034aa:	469a      	mov	sl, r3
 80034ac:	4693      	mov	fp, r2
 80034ae:	4652      	mov	r2, sl
 80034b0:	465b      	mov	r3, fp
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c0:	0150      	lsls	r0, r2, #5
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ebb2 080a 	subs.w	r8, r2, sl
 80034ca:	eb63 090b 	sbc.w	r9, r3, fp
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e2:	ebb2 0408 	subs.w	r4, r2, r8
 80034e6:	eb63 0509 	sbc.w	r5, r3, r9
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	00eb      	lsls	r3, r5, #3
 80034f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f8:	00e2      	lsls	r2, r4, #3
 80034fa:	4614      	mov	r4, r2
 80034fc:	461d      	mov	r5, r3
 80034fe:	eb14 030a 	adds.w	r3, r4, sl
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	eb45 030b 	adc.w	r3, r5, fp
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	4604      	mov	r4, r0
 8003520:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003524:	4601      	mov	r1, r0
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	2200      	movs	r2, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	60fa      	str	r2, [r7, #12]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	f7fc fe20 	bl	800017c <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003548:	e00d      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_GetSysClockFreq+0x16c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0b5b      	lsrs	r3, r3, #13
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	3301      	adds	r3, #1
 800355a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003568:	4618      	mov	r0, r3
 800356a:	3738      	adds	r7, #56	; 0x38
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	016e3600 	.word	0x016e3600
 8003580:	08006334 	.word	0x08006334

08003584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d12c      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e016      	b.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b20      	ldr	r3, [pc, #128]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6253      	str	r3, [r2, #36]	; 0x24
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035d4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035e8:	d105      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f0:	d101      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80035f2:	2301      	movs	r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	f043 0304 	orr.w	r3, r3, #4
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	490b      	ldr	r1, [pc, #44]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
 8003640:	40023c00 	.word	0x40023c00

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80ed 	beq.w	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b75      	ldr	r3, [pc, #468]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	4a74      	ldr	r2, [pc, #464]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6253      	str	r3, [r2, #36]	; 0x24
 8003682:	4b72      	ldr	r3, [pc, #456]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6b      	ldr	r2, [pc, #428]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fa61 	bl	8001b70 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe fa5d 	bl	8001b70 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0be      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b62      	ldr	r3, [pc, #392]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80036d0:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80036d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d00f      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003702:	d108      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003704:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003710:	d101      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e095      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003716:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800371e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d041      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d005      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10c      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	429a      	cmp	r2, r3
 800374c:	d02d      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d027      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800375a:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003762:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800376a:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003770:	4a36      	ldr	r2, [pc, #216]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d014      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe f9f6 	bl	8001b70 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003786:	e00a      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe f9f2 	bl	8001b70 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e051      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c2:	d10a      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80037d4:	491d      	ldr	r1, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e6:	4919      	ldr	r1, [pc, #100]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003804:	d10a      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003816:	490d      	ldr	r1, [pc, #52]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003828:	4908      	ldr	r1, [pc, #32]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800382a:	4313      	orrs	r3, r2
 800382c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800383a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	424706dc 	.word	0x424706dc

08003858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e073      	b.n	8003956 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7f5b      	ldrb	r3, [r3, #29]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd ff52 	bl	8001728 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d055      	beq.n	8003944 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	22ca      	movs	r2, #202	; 0xca
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2253      	movs	r2, #83	; 0x53
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa48 	bl	8003d3e <RTC_EnterInitMode>
 80038ae:	4603      	mov	r3, r0
 80038b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d12c      	bne.n	8003912 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	041a      	lsls	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fa4f 	bl	8003dac <RTC_ExitInitMode>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d110      	bne.n	800393a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
 8003942:	e001      	b.n	8003948 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800395e:	b590      	push	{r4, r7, lr}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	7f1b      	ldrb	r3, [r3, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_RTC_SetTime+0x1c>
 8003976:	2302      	movs	r3, #2
 8003978:	e087      	b.n	8003a8a <HAL_RTC_SetTime+0x12c>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2202      	movs	r2, #2
 8003984:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d126      	bne.n	80039da <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa26 	bl	8003df6 <RTC_ByteToBcd2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa1f 	bl	8003df6 <RTC_ByteToBcd2>
 80039b8:	4603      	mov	r3, r0
 80039ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039bc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa17 	bl	8003df6 <RTC_ByteToBcd2>
 80039c8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	78db      	ldrb	r3, [r3, #3]
 80039d2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e018      	b.n	8003a0c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039fa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a00:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	78db      	ldrb	r3, [r3, #3]
 8003a06:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	22ca      	movs	r2, #202	; 0xca
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2253      	movs	r2, #83	; 0x53
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f98e 	bl	8003d3e <RTC_EnterInitMode>
 8003a22:	4603      	mov	r3, r0
 8003a24:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d120      	bne.n	8003a6e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9a1 	bl	8003dac <RTC_ExitInitMode>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]

  return status;
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd90      	pop	{r4, r7, pc}

08003a92 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ac4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	0d9b      	lsrs	r3, r3, #22
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11a      	bne.n	8003b44 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f98c 	bl	8003e30 <RTC_Bcd2ToByte>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f983 	bl	8003e30 <RTC_Bcd2ToByte>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f97a 	bl	8003e30 <RTC_Bcd2ToByte>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b4e:	b590      	push	{r4, r7, lr}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	7f1b      	ldrb	r3, [r3, #28]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_RTC_SetDate+0x1c>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e071      	b.n	8003c4e <HAL_RTC_SetDate+0x100>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10e      	bne.n	8003b9a <HAL_RTC_SetDate+0x4c>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	f023 0310 	bic.w	r3, r3, #16
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	330a      	adds	r3, #10
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11c      	bne.n	8003bda <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f926 	bl	8003df6 <RTC_ByteToBcd2>
 8003baa:	4603      	mov	r3, r0
 8003bac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f91f 	bl	8003df6 <RTC_ByteToBcd2>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bbc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f917 	bl	8003df6 <RTC_ByteToBcd2>
 8003bc8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e00e      	b.n	8003bf8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	78db      	ldrb	r3, [r3, #3]
 8003bde:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003be6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	22ca      	movs	r2, #202	; 0xca
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2253      	movs	r2, #83	; 0x53
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f898 	bl	8003d3e <RTC_EnterInitMode>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10c      	bne.n	8003c32 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f8bf 	bl	8003dac <RTC_ExitInitMode>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]

  return status;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}

08003c56 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	0b5b      	lsrs	r3, r3, #13
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11a      	bne.n	8003cea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	78db      	ldrb	r3, [r3, #3]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f8b9 	bl	8003e30 <RTC_Bcd2ToByte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f8b0 	bl	8003e30 <RTC_Bcd2ToByte>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	789b      	ldrb	r3, [r3, #2]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f8a7 	bl	8003e30 <RTC_Bcd2ToByte>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f64f 7257 	movw	r2, #65367	; 0xff57
 8003d08:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0a:	f7fd ff31 	bl	8001b70 <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d10:	e009      	b.n	8003d26 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d12:	f7fd ff2d 	bl	8001b70 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d20:	d901      	bls.n	8003d26 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e007      	b.n	8003d36 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ee      	beq.n	8003d12 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d122      	bne.n	8003da2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d6a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd ff00 	bl	8001b70 <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d72:	e00c      	b.n	8003d8e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d74:	f7fd fefc 	bl	8001b70 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d82:	d904      	bls.n	8003d8e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <RTC_EnterInitMode+0x64>
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d1e8      	bne.n	8003d74 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc6:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff8c 	bl	8003cf4 <HAL_RTC_WaitForSynchro>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2204      	movs	r2, #4
 8003de6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e04:	e005      	b.n	8003e12 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	3b0a      	subs	r3, #10
 8003e10:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d8f6      	bhi.n	8003e06 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2db      	uxtb	r3, r3
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	b2db      	uxtb	r3, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e07b      	b.n	8003f74 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8c:	d009      	beq.n	8003ea2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	61da      	str	r2, [r3, #28]
 8003e94:	e005      	b.n	8003ea2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fd fc49 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0104 	and.w	r1, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0210 	and.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Transmit+0x22>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e12d      	b.n	80041fa <HAL_SPI_Transmit+0x27e>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa6:	f7fd fde3 	bl	8001b70 <HAL_GetTick>
 8003faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc0:	e116      	b.n	80041f0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x52>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd2:	e10d      	b.n	80041f0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d10f      	bne.n	800403c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d007      	beq.n	800405a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d14f      	bne.n	8004104 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_Transmit+0xf6>
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d142      	bne.n	80040f8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004096:	e02f      	b.n	80040f8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d112      	bne.n	80040cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ca:	e015      	b.n	80040f8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040cc:	f7fd fd50 	bl	8001b70 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d803      	bhi.n	80040e4 <HAL_SPI_Transmit+0x168>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Transmit+0x16e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040f6:	e07b      	b.n	80041f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ca      	bne.n	8004098 <HAL_SPI_Transmit+0x11c>
 8004102:	e050      	b.n	80041a6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SPI_Transmit+0x196>
 800410c:	8afb      	ldrh	r3, [r7, #22]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d144      	bne.n	800419c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004138:	e030      	b.n	800419c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d113      	bne.n	8004170 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	86da      	strh	r2, [r3, #54]	; 0x36
 800416e:	e015      	b.n	800419c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004170:	f7fd fcfe 	bl	8001b70 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_Transmit+0x20c>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_Transmit+0x212>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800419a:	e029      	b.n	80041f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1c9      	bne.n	800413a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f8b2 	bl	8004314 <SPI_EndRxTxTransaction>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e003      	b.n	80041f0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004214:	f7fd fcac 	bl	8001b70 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004224:	f7fd fca4 	bl	8001b70 <HAL_GetTick>
 8004228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	015b      	lsls	r3, r3, #5
 8004230:	0d1b      	lsrs	r3, r3, #20
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423a:	e054      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d050      	beq.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004244:	f7fd fc94 	bl	8001b70 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d902      	bls.n	800425a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d13d      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004272:	d111      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d004      	beq.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d107      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a0:	d10f      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e017      	b.n	8004306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	429a      	cmp	r2, r3
 8004302:	d19b      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000008 	.word	0x20000008

08004314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <SPI_EndRxTxTransaction+0x7c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <SPI_EndRxTxTransaction+0x80>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0d5b      	lsrs	r3, r3, #21
 800432c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433e:	d112      	bne.n	8004366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7ff ff5a 	bl	8004204 <SPI_WaitFlagStateUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00f      	b.n	8004386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3b01      	subs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d0f2      	beq.n	8004366 <SPI_EndRxTxTransaction+0x52>
 8004380:	e000      	b.n	8004384 <SPI_EndRxTxTransaction+0x70>
        break;
 8004382:	bf00      	nop
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000008 	.word	0x20000008
 8004394:	165e9f81 	.word	0x165e9f81

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e031      	b.n	800440e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd fa0c 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fc16 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e032      	b.n	8004496 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start+0x48>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <HAL_TIM_Base_Start+0x88>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <HAL_TIM_Base_Start+0x8c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start+0x48>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <HAL_TIM_Base_Start+0x90>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d010      	beq.n	8004494 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	e007      	b.n	8004494 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40010800 	.word	0x40010800

080044ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e031      	b.n	8004522 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f829 	bl	800452a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 fb8c 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x24>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e022      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d109      	bne.n	800457a <HAL_TIM_PWM_Start+0x3e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e015      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start+0x58>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e008      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e051      	b.n	8004652 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0x82>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0x92>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80045cc:	e00b      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xa2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045dc:	e003      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd05 	bl	8004ffe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d00e      	beq.n	800461c <HAL_TIM_PWM_Start+0xe0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_TIM_PWM_Start+0x120>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIM_PWM_Start+0xe0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <HAL_TIM_PWM_Start+0x124>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIM_PWM_Start+0xe0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_TIM_PWM_Start+0x128>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d111      	bne.n	8004640 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b06      	cmp	r3, #6
 800462c:	d010      	beq.n	8004650 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	e007      	b.n	8004650 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40010800 	.word	0x40010800

08004668 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcbf 	bl	8004ffe <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	f241 1311 	movw	r3, #4369	; 0x1111
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_PWM_Stop+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <HAL_TIM_PWM_Stop+0x48>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80046ae:	e013      	b.n	80046d8 <HAL_TIM_PWM_Stop+0x70>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d104      	bne.n	80046c0 <HAL_TIM_PWM_Stop+0x58>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80046be:	e00b      	b.n	80046d8 <HAL_TIM_PWM_Stop+0x70>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d104      	bne.n	80046d0 <HAL_TIM_PWM_Stop+0x68>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046ce:	e003      	b.n	80046d8 <HAL_TIM_PWM_Stop+0x70>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d122      	bne.n	800473e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11b      	bne.n	800473e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0202 	mvn.w	r2, #2
 800470e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa54 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa47 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa56 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d122      	bne.n	8004792 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d11b      	bne.n	8004792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0204 	mvn.w	r2, #4
 8004762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fa2a 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 800477e:	e005      	b.n	800478c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fa1d 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa2c 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b08      	cmp	r3, #8
 800479e:	d122      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d11b      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0208 	mvn.w	r2, #8
 80047b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa00 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 80047d2:	e005      	b.n	80047e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9f3 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa02 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d122      	bne.n	800483a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d11b      	bne.n	800483a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0210 	mvn.w	r2, #16
 800480a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2208      	movs	r2, #8
 8004810:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9d6 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004826:	e005      	b.n	8004834 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9c9 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9d8 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10e      	bne.n	8004866 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0201 	mvn.w	r2, #1
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f9a4 	bl	8004bae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9b2 	bl	8004bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0ae      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	f200 809f 	bhi.w	8004a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004a09 	.word	0x08004a09
 80048d8:	08004a09 	.word	0x08004a09
 80048dc:	08004a09 	.word	0x08004a09
 80048e0:	08004945 	.word	0x08004945
 80048e4:	08004a09 	.word	0x08004a09
 80048e8:	08004a09 	.word	0x08004a09
 80048ec:	08004a09 	.word	0x08004a09
 80048f0:	08004987 	.word	0x08004987
 80048f4:	08004a09 	.word	0x08004a09
 80048f8:	08004a09 	.word	0x08004a09
 80048fc:	08004a09 	.word	0x08004a09
 8004900:	080049c7 	.word	0x080049c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f9ec 	bl	8004ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e064      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fa08 	bl	8004d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e043      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fa25 	bl	8004ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e023      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fa42 	bl	8004e56 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_ConfigClockSource+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0b4      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x186>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a74:	d03e      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7a:	f200 8087 	bhi.w	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	f000 8086 	beq.w	8004b92 <HAL_TIM_ConfigClockSource+0x172>
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8a:	d87f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b70      	cmp	r3, #112	; 0x70
 8004a8e:	d01a      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8004a90:	2b70      	cmp	r3, #112	; 0x70
 8004a92:	d87b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b60      	cmp	r3, #96	; 0x60
 8004a96:	d050      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x11a>
 8004a98:	2b60      	cmp	r3, #96	; 0x60
 8004a9a:	d877      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d03c      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0xfa>
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d873      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d058      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x13a>
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d86f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d064      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d86b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d060      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d867      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d05a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	e062      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ad6:	f000 fa73 	bl	8004fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	609a      	str	r2, [r3, #8]
      break;
 8004af2:	e04f      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b04:	f000 fa5c 	bl	8004fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b16:	609a      	str	r2, [r3, #8]
      break;
 8004b18:	e03c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	461a      	mov	r2, r3
 8004b28:	f000 f9d3 	bl	8004ed2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2150      	movs	r1, #80	; 0x50
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa2a 	bl	8004f8c <TIM_ITRx_SetConfig>
      break;
 8004b38:	e02c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b46:	461a      	mov	r2, r3
 8004b48:	f000 f9f1 	bl	8004f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2160      	movs	r1, #96	; 0x60
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fa1a 	bl	8004f8c <TIM_ITRx_SetConfig>
      break;
 8004b58:	e01c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	461a      	mov	r2, r3
 8004b68:	f000 f9b3 	bl	8004ed2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa0a 	bl	8004f8c <TIM_ITRx_SetConfig>
      break;
 8004b78:	e00c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f000 fa01 	bl	8004f8c <TIM_ITRx_SetConfig>
      break;
 8004b8a:	e003      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e000      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d00f      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <TIM_Base_SetConfig+0xc8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <TIM_Base_SetConfig+0xcc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <TIM_Base_SetConfig+0xd0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_Base_SetConfig+0xd4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d017      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <TIM_Base_SetConfig+0xc8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <TIM_Base_SetConfig+0xcc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00f      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <TIM_Base_SetConfig+0xd0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <TIM_Base_SetConfig+0xd4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <TIM_Base_SetConfig+0xd8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_Base_SetConfig+0x82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <TIM_Base_SetConfig+0xdc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	615a      	str	r2, [r3, #20]
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40010800 	.word	0x40010800
 8004ce0:	40010c00 	.word	0x40010c00
 8004ce4:	40011000 	.word	0x40011000

08004ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 0201 	bic.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 0210 	bic.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b087      	sub	sp, #28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	031b      	lsls	r3, r3, #12
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	621a      	str	r2, [r3, #32]
}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b087      	sub	sp, #28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 0201 	bic.w	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 030a 	bic.w	r3, r3, #10
 8004f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f043 0307 	orr.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	43db      	mvns	r3, r3
 8005020:	401a      	ands	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e046      	b.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d00e      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10c      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40010800 	.word	0x40010800

08005104 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8005108:	2201      	movs	r2, #1
 800510a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800510e:	4802      	ldr	r0, [pc, #8]	; (8005118 <SPI_CS_High+0x14>)
 8005110:	f7fd fce5 	bl	8002ade <HAL_GPIO_WritePin>
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40020000 	.word	0x40020000

0800511c <SPI_CS_Low>:

 void SPI_CS_Low()
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8005120:	2200      	movs	r2, #0
 8005122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005126:	4802      	ldr	r0, [pc, #8]	; (8005130 <SPI_CS_Low+0x14>)
 8005128:	f7fd fcd9 	bl	8002ade <HAL_GPIO_WritePin>
}
 800512c:	bf00      	nop
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40020000 	.word	0x40020000

08005134 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8005138:	2107      	movs	r1, #7
 800513a:	200b      	movs	r0, #11
 800513c:	f000 f896 	bl	800526c <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8005140:	2100      	movs	r1, #0
 8005142:	2009      	movs	r0, #9
 8005144:	f000 f892 	bl	800526c <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8005148:	f000 f809 	bl	800515e <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 800514c:	f000 f80f 	bl	800516e <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8005150:	f000 f827 	bl	80051a2 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8005154:	200f      	movs	r0, #15
 8005156:	f000 f812 	bl	800517e <MAX7219_SetBrightness>
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}

0800515e <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8005162:	2101      	movs	r1, #1
 8005164:	200c      	movs	r0, #12
 8005166:	f000 f881 	bl	800526c <MAX7219_Write>
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}

0800516e <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8005172:	2100      	movs	r1, #0
 8005174:	200f      	movs	r0, #15
 8005176:	f000 f879 	bl	800526c <MAX7219_Write>
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}

0800517e <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	4619      	mov	r1, r3
 8005194:	200a      	movs	r0, #10
 8005196:	f000 f869 	bl	800526c <MAX7219_Write>
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	71fb      	strb	r3, [r7, #7]
 80051ac:	e007      	b.n	80051be <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f85a 	bl	800526c <MAX7219_Write>
  for (i=0; i < 8; i++)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	3301      	adds	r3, #1
 80051bc:	71fb      	strb	r3, [r7, #7]
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b07      	cmp	r3, #7
 80051c2:	d9f4      	bls.n	80051ae <MAX7219_Clear+0xc>
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <MAX7219_DisplayChar>:
* Arguments  : digit = digit number (0-7)
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character, char dp) {
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	4603      	mov	r3, r0
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	460b      	mov	r3, r1
 80051da:	71bb      	strb	r3, [r7, #6]
 80051dc:	4613      	mov	r3, r2
 80051de:	717b      	strb	r3, [r7, #5]
    if (dp) {
 80051e0:	797b      	ldrb	r3, [r7, #5]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <MAX7219_DisplayChar+0x34>
        MAX7219_Write(digit, MAX7219_LookupCode(character) | 0x80); // Active le bit 7 pour le point décimal
 80051e6:	79bb      	ldrb	r3, [r7, #6]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f819 	bl	8005220 <MAX7219_LookupCode>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f836 	bl	800526c <MAX7219_Write>
    } else {
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
    }
}
 8005200:	e00a      	b.n	8005218 <MAX7219_DisplayChar+0x4a>
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
 8005202:	79bb      	ldrb	r3, [r7, #6]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f80b 	bl	8005220 <MAX7219_LookupCode>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f82a 	bl	800526c <MAX7219_Write>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
 800522e:	e00f      	b.n	8005250 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <MAX7219_LookupCode+0x48>)
 8005234:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	429a      	cmp	r2, r3
 800523c:	d105      	bne.n	800524a <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4a09      	ldr	r2, [pc, #36]	; (8005268 <MAX7219_LookupCode+0x48>)
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	e009      	b.n	800525e <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3301      	adds	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	4a05      	ldr	r2, [pc, #20]	; (8005268 <MAX7219_LookupCode+0x48>)
 8005254:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e9      	bne.n	8005230 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	08006350 	.word	0x08006350

0800526c <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	460a      	mov	r2, r1
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	4613      	mov	r3, r2
 800527a:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800527c:	f7ff ff4e 	bl	800511c <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f80c 	bl	80052a0 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8005288:	79bb      	ldrb	r3, [r7, #6]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f808 	bl	80052a0 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8005290:	f7ff ff38 	bl	8005104 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8005294:	f7ff ff42 	bl	800511c <SPI_CS_Low>
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80052aa:	1df9      	adds	r1, r7, #7
 80052ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052b0:	2201      	movs	r2, #1
 80052b2:	4803      	ldr	r0, [pc, #12]	; (80052c0 <MAX7219_SendByte+0x20>)
 80052b4:	f7fe fe62 	bl	8003f7c <HAL_SPI_Transmit>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000100 	.word	0x20000100

080052c4 <std>:
 80052c4:	2300      	movs	r3, #0
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
 80052ca:	e9c0 3300 	strd	r3, r3, [r0]
 80052ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d2:	6083      	str	r3, [r0, #8]
 80052d4:	8181      	strh	r1, [r0, #12]
 80052d6:	6643      	str	r3, [r0, #100]	; 0x64
 80052d8:	81c2      	strh	r2, [r0, #14]
 80052da:	6183      	str	r3, [r0, #24]
 80052dc:	4619      	mov	r1, r3
 80052de:	2208      	movs	r2, #8
 80052e0:	305c      	adds	r0, #92	; 0x5c
 80052e2:	f000 f9f7 	bl	80056d4 <memset>
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <std+0x58>)
 80052e8:	6224      	str	r4, [r4, #32]
 80052ea:	6263      	str	r3, [r4, #36]	; 0x24
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <std+0x5c>)
 80052ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <std+0x60>)
 80052f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <std+0x64>)
 80052f6:	6323      	str	r3, [r4, #48]	; 0x30
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <std+0x68>)
 80052fa:	429c      	cmp	r4, r3
 80052fc:	d006      	beq.n	800530c <std+0x48>
 80052fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005302:	4294      	cmp	r4, r2
 8005304:	d002      	beq.n	800530c <std+0x48>
 8005306:	33d0      	adds	r3, #208	; 0xd0
 8005308:	429c      	cmp	r4, r3
 800530a:	d105      	bne.n	8005318 <std+0x54>
 800530c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f000 ba56 	b.w	80057c4 <__retarget_lock_init_recursive>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08005525 	.word	0x08005525
 8005320:	08005547 	.word	0x08005547
 8005324:	0800557f 	.word	0x0800557f
 8005328:	080055a3 	.word	0x080055a3
 800532c:	200001d8 	.word	0x200001d8

08005330 <stdio_exit_handler>:
 8005330:	4a02      	ldr	r2, [pc, #8]	; (800533c <stdio_exit_handler+0xc>)
 8005332:	4903      	ldr	r1, [pc, #12]	; (8005340 <stdio_exit_handler+0x10>)
 8005334:	4803      	ldr	r0, [pc, #12]	; (8005344 <stdio_exit_handler+0x14>)
 8005336:	f000 b869 	b.w	800540c <_fwalk_sglue>
 800533a:	bf00      	nop
 800533c:	20000014 	.word	0x20000014
 8005340:	08006065 	.word	0x08006065
 8005344:	20000020 	.word	0x20000020

08005348 <cleanup_stdio>:
 8005348:	6841      	ldr	r1, [r0, #4]
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <cleanup_stdio+0x34>)
 800534c:	b510      	push	{r4, lr}
 800534e:	4299      	cmp	r1, r3
 8005350:	4604      	mov	r4, r0
 8005352:	d001      	beq.n	8005358 <cleanup_stdio+0x10>
 8005354:	f000 fe86 	bl	8006064 <_fflush_r>
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <cleanup_stdio+0x38>)
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <cleanup_stdio+0x1e>
 8005360:	4620      	mov	r0, r4
 8005362:	f000 fe7f 	bl	8006064 <_fflush_r>
 8005366:	68e1      	ldr	r1, [r4, #12]
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <cleanup_stdio+0x3c>)
 800536a:	4299      	cmp	r1, r3
 800536c:	d004      	beq.n	8005378 <cleanup_stdio+0x30>
 800536e:	4620      	mov	r0, r4
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	f000 be76 	b.w	8006064 <_fflush_r>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	200001d8 	.word	0x200001d8
 8005380:	20000240 	.word	0x20000240
 8005384:	200002a8 	.word	0x200002a8

08005388 <global_stdio_init.part.0>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <global_stdio_init.part.0+0x30>)
 800538c:	4c0b      	ldr	r4, [pc, #44]	; (80053bc <global_stdio_init.part.0+0x34>)
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <global_stdio_init.part.0+0x38>)
 8005390:	4620      	mov	r0, r4
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	2104      	movs	r1, #4
 8005396:	2200      	movs	r2, #0
 8005398:	f7ff ff94 	bl	80052c4 <std>
 800539c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053a0:	2201      	movs	r2, #1
 80053a2:	2109      	movs	r1, #9
 80053a4:	f7ff ff8e 	bl	80052c4 <std>
 80053a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053ac:	2202      	movs	r2, #2
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	2112      	movs	r1, #18
 80053b4:	f7ff bf86 	b.w	80052c4 <std>
 80053b8:	20000310 	.word	0x20000310
 80053bc:	200001d8 	.word	0x200001d8
 80053c0:	08005331 	.word	0x08005331

080053c4 <__sfp_lock_acquire>:
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <__sfp_lock_acquire+0x8>)
 80053c6:	f000 b9fe 	b.w	80057c6 <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	20000319 	.word	0x20000319

080053d0 <__sfp_lock_release>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__sfp_lock_release+0x8>)
 80053d2:	f000 b9f9 	b.w	80057c8 <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000319 	.word	0x20000319

080053dc <__sinit>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	f7ff fff0 	bl	80053c4 <__sfp_lock_acquire>
 80053e4:	6a23      	ldr	r3, [r4, #32]
 80053e6:	b11b      	cbz	r3, 80053f0 <__sinit+0x14>
 80053e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ec:	f7ff bff0 	b.w	80053d0 <__sfp_lock_release>
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <__sinit+0x28>)
 80053f2:	6223      	str	r3, [r4, #32]
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <__sinit+0x2c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f5      	bne.n	80053e8 <__sinit+0xc>
 80053fc:	f7ff ffc4 	bl	8005388 <global_stdio_init.part.0>
 8005400:	e7f2      	b.n	80053e8 <__sinit+0xc>
 8005402:	bf00      	nop
 8005404:	08005349 	.word	0x08005349
 8005408:	20000310 	.word	0x20000310

0800540c <_fwalk_sglue>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	4607      	mov	r7, r0
 8005412:	4688      	mov	r8, r1
 8005414:	4614      	mov	r4, r2
 8005416:	2600      	movs	r6, #0
 8005418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800541c:	f1b9 0901 	subs.w	r9, r9, #1
 8005420:	d505      	bpl.n	800542e <_fwalk_sglue+0x22>
 8005422:	6824      	ldr	r4, [r4, #0]
 8005424:	2c00      	cmp	r4, #0
 8005426:	d1f7      	bne.n	8005418 <_fwalk_sglue+0xc>
 8005428:	4630      	mov	r0, r6
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d907      	bls.n	8005444 <_fwalk_sglue+0x38>
 8005434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005438:	3301      	adds	r3, #1
 800543a:	d003      	beq.n	8005444 <_fwalk_sglue+0x38>
 800543c:	4629      	mov	r1, r5
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	4306      	orrs	r6, r0
 8005444:	3568      	adds	r5, #104	; 0x68
 8005446:	e7e9      	b.n	800541c <_fwalk_sglue+0x10>

08005448 <iprintf>:
 8005448:	b40f      	push	{r0, r1, r2, r3}
 800544a:	b507      	push	{r0, r1, r2, lr}
 800544c:	4906      	ldr	r1, [pc, #24]	; (8005468 <iprintf+0x20>)
 800544e:	ab04      	add	r3, sp, #16
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	f853 2b04 	ldr.w	r2, [r3], #4
 8005456:	6881      	ldr	r1, [r0, #8]
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	f000 fad3 	bl	8005a04 <_vfiprintf_r>
 800545e:	b003      	add	sp, #12
 8005460:	f85d eb04 	ldr.w	lr, [sp], #4
 8005464:	b004      	add	sp, #16
 8005466:	4770      	bx	lr
 8005468:	2000006c 	.word	0x2000006c

0800546c <_puts_r>:
 800546c:	6a03      	ldr	r3, [r0, #32]
 800546e:	b570      	push	{r4, r5, r6, lr}
 8005470:	4605      	mov	r5, r0
 8005472:	460e      	mov	r6, r1
 8005474:	6884      	ldr	r4, [r0, #8]
 8005476:	b90b      	cbnz	r3, 800547c <_puts_r+0x10>
 8005478:	f7ff ffb0 	bl	80053dc <__sinit>
 800547c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800547e:	07db      	lsls	r3, r3, #31
 8005480:	d405      	bmi.n	800548e <_puts_r+0x22>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	0598      	lsls	r0, r3, #22
 8005486:	d402      	bmi.n	800548e <_puts_r+0x22>
 8005488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548a:	f000 f99c 	bl	80057c6 <__retarget_lock_acquire_recursive>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	0719      	lsls	r1, r3, #28
 8005492:	d513      	bpl.n	80054bc <_puts_r+0x50>
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	b18b      	cbz	r3, 80054bc <_puts_r+0x50>
 8005498:	3e01      	subs	r6, #1
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054a0:	3b01      	subs	r3, #1
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	b9e9      	cbnz	r1, 80054e2 <_puts_r+0x76>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da2e      	bge.n	8005508 <_puts_r+0x9c>
 80054aa:	4622      	mov	r2, r4
 80054ac:	210a      	movs	r1, #10
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 f87b 	bl	80055aa <__swbuf_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d007      	beq.n	80054c8 <_puts_r+0x5c>
 80054b8:	250a      	movs	r5, #10
 80054ba:	e007      	b.n	80054cc <_puts_r+0x60>
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f8b0 	bl	8005624 <__swsetup_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0e7      	beq.n	8005498 <_puts_r+0x2c>
 80054c8:	f04f 35ff 	mov.w	r5, #4294967295
 80054cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ce:	07da      	lsls	r2, r3, #31
 80054d0:	d405      	bmi.n	80054de <_puts_r+0x72>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	059b      	lsls	r3, r3, #22
 80054d6:	d402      	bmi.n	80054de <_puts_r+0x72>
 80054d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054da:	f000 f975 	bl	80057c8 <__retarget_lock_release_recursive>
 80054de:	4628      	mov	r0, r5
 80054e0:	bd70      	pop	{r4, r5, r6, pc}
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da04      	bge.n	80054f0 <_puts_r+0x84>
 80054e6:	69a2      	ldr	r2, [r4, #24]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	dc06      	bgt.n	80054fa <_puts_r+0x8e>
 80054ec:	290a      	cmp	r1, #10
 80054ee:	d004      	beq.n	80054fa <_puts_r+0x8e>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	6022      	str	r2, [r4, #0]
 80054f6:	7019      	strb	r1, [r3, #0]
 80054f8:	e7cf      	b.n	800549a <_puts_r+0x2e>
 80054fa:	4622      	mov	r2, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f854 	bl	80055aa <__swbuf_r>
 8005502:	3001      	adds	r0, #1
 8005504:	d1c9      	bne.n	800549a <_puts_r+0x2e>
 8005506:	e7df      	b.n	80054c8 <_puts_r+0x5c>
 8005508:	250a      	movs	r5, #10
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	701d      	strb	r5, [r3, #0]
 8005512:	e7db      	b.n	80054cc <_puts_r+0x60>

08005514 <puts>:
 8005514:	4b02      	ldr	r3, [pc, #8]	; (8005520 <puts+0xc>)
 8005516:	4601      	mov	r1, r0
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	f7ff bfa7 	b.w	800546c <_puts_r>
 800551e:	bf00      	nop
 8005520:	2000006c 	.word	0x2000006c

08005524 <__sread>:
 8005524:	b510      	push	{r4, lr}
 8005526:	460c      	mov	r4, r1
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	f000 f8fc 	bl	8005728 <_read_r>
 8005530:	2800      	cmp	r0, #0
 8005532:	bfab      	itete	ge
 8005534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005536:	89a3      	ldrhlt	r3, [r4, #12]
 8005538:	181b      	addge	r3, r3, r0
 800553a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800553e:	bfac      	ite	ge
 8005540:	6563      	strge	r3, [r4, #84]	; 0x54
 8005542:	81a3      	strhlt	r3, [r4, #12]
 8005544:	bd10      	pop	{r4, pc}

08005546 <__swrite>:
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	461f      	mov	r7, r3
 800554c:	898b      	ldrh	r3, [r1, #12]
 800554e:	4605      	mov	r5, r0
 8005550:	05db      	lsls	r3, r3, #23
 8005552:	460c      	mov	r4, r1
 8005554:	4616      	mov	r6, r2
 8005556:	d505      	bpl.n	8005564 <__swrite+0x1e>
 8005558:	2302      	movs	r3, #2
 800555a:	2200      	movs	r2, #0
 800555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005560:	f000 f8d0 	bl	8005704 <_lseek_r>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	4632      	mov	r2, r6
 8005568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	4628      	mov	r0, r5
 8005570:	463b      	mov	r3, r7
 8005572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557a:	f000 b8e7 	b.w	800574c <_write_r>

0800557e <__sseek>:
 800557e:	b510      	push	{r4, lr}
 8005580:	460c      	mov	r4, r1
 8005582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005586:	f000 f8bd 	bl	8005704 <_lseek_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	bf15      	itete	ne
 8005590:	6560      	strne	r0, [r4, #84]	; 0x54
 8005592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800559a:	81a3      	strheq	r3, [r4, #12]
 800559c:	bf18      	it	ne
 800559e:	81a3      	strhne	r3, [r4, #12]
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <__sclose>:
 80055a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a6:	f000 b89d 	b.w	80056e4 <_close_r>

080055aa <__swbuf_r>:
 80055aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ac:	460e      	mov	r6, r1
 80055ae:	4614      	mov	r4, r2
 80055b0:	4605      	mov	r5, r0
 80055b2:	b118      	cbz	r0, 80055bc <__swbuf_r+0x12>
 80055b4:	6a03      	ldr	r3, [r0, #32]
 80055b6:	b90b      	cbnz	r3, 80055bc <__swbuf_r+0x12>
 80055b8:	f7ff ff10 	bl	80053dc <__sinit>
 80055bc:	69a3      	ldr	r3, [r4, #24]
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	071a      	lsls	r2, r3, #28
 80055c4:	d525      	bpl.n	8005612 <__swbuf_r+0x68>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	b31b      	cbz	r3, 8005612 <__swbuf_r+0x68>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	6922      	ldr	r2, [r4, #16]
 80055ce:	b2f6      	uxtb	r6, r6
 80055d0:	1a98      	subs	r0, r3, r2
 80055d2:	6963      	ldr	r3, [r4, #20]
 80055d4:	4637      	mov	r7, r6
 80055d6:	4283      	cmp	r3, r0
 80055d8:	dc04      	bgt.n	80055e4 <__swbuf_r+0x3a>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 fd41 	bl	8006064 <_fflush_r>
 80055e2:	b9e0      	cbnz	r0, 800561e <__swbuf_r+0x74>
 80055e4:	68a3      	ldr	r3, [r4, #8]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	60a3      	str	r3, [r4, #8]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	6022      	str	r2, [r4, #0]
 80055f0:	701e      	strb	r6, [r3, #0]
 80055f2:	6962      	ldr	r2, [r4, #20]
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d004      	beq.n	8005604 <__swbuf_r+0x5a>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d506      	bpl.n	800560e <__swbuf_r+0x64>
 8005600:	2e0a      	cmp	r6, #10
 8005602:	d104      	bne.n	800560e <__swbuf_r+0x64>
 8005604:	4621      	mov	r1, r4
 8005606:	4628      	mov	r0, r5
 8005608:	f000 fd2c 	bl	8006064 <_fflush_r>
 800560c:	b938      	cbnz	r0, 800561e <__swbuf_r+0x74>
 800560e:	4638      	mov	r0, r7
 8005610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f805 	bl	8005624 <__swsetup_r>
 800561a:	2800      	cmp	r0, #0
 800561c:	d0d5      	beq.n	80055ca <__swbuf_r+0x20>
 800561e:	f04f 37ff 	mov.w	r7, #4294967295
 8005622:	e7f4      	b.n	800560e <__swbuf_r+0x64>

08005624 <__swsetup_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <__swsetup_r+0xac>)
 8005628:	4605      	mov	r5, r0
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	460c      	mov	r4, r1
 800562e:	b118      	cbz	r0, 8005638 <__swsetup_r+0x14>
 8005630:	6a03      	ldr	r3, [r0, #32]
 8005632:	b90b      	cbnz	r3, 8005638 <__swsetup_r+0x14>
 8005634:	f7ff fed2 	bl	80053dc <__sinit>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800563e:	0718      	lsls	r0, r3, #28
 8005640:	d422      	bmi.n	8005688 <__swsetup_r+0x64>
 8005642:	06d9      	lsls	r1, r3, #27
 8005644:	d407      	bmi.n	8005656 <__swsetup_r+0x32>
 8005646:	2309      	movs	r3, #9
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	e034      	b.n	80056c0 <__swsetup_r+0x9c>
 8005656:	0758      	lsls	r0, r3, #29
 8005658:	d512      	bpl.n	8005680 <__swsetup_r+0x5c>
 800565a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565c:	b141      	cbz	r1, 8005670 <__swsetup_r+0x4c>
 800565e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005662:	4299      	cmp	r1, r3
 8005664:	d002      	beq.n	800566c <__swsetup_r+0x48>
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f8b0 	bl	80057cc <_free_r>
 800566c:	2300      	movs	r3, #0
 800566e:	6363      	str	r3, [r4, #52]	; 0x34
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	2300      	movs	r3, #0
 800567a:	6063      	str	r3, [r4, #4]
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f043 0308 	orr.w	r3, r3, #8
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	b94b      	cbnz	r3, 80056a0 <__swsetup_r+0x7c>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005696:	d003      	beq.n	80056a0 <__swsetup_r+0x7c>
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 fd2f 	bl	80060fe <__smakebuf_r>
 80056a0:	89a0      	ldrh	r0, [r4, #12]
 80056a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a6:	f010 0301 	ands.w	r3, r0, #1
 80056aa:	d00a      	beq.n	80056c2 <__swsetup_r+0x9e>
 80056ac:	2300      	movs	r3, #0
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	425b      	negs	r3, r3
 80056b4:	61a3      	str	r3, [r4, #24]
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	b943      	cbnz	r3, 80056cc <__swsetup_r+0xa8>
 80056ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056be:	d1c4      	bne.n	800564a <__swsetup_r+0x26>
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	0781      	lsls	r1, r0, #30
 80056c4:	bf58      	it	pl
 80056c6:	6963      	ldrpl	r3, [r4, #20]
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	e7f4      	b.n	80056b6 <__swsetup_r+0x92>
 80056cc:	2000      	movs	r0, #0
 80056ce:	e7f7      	b.n	80056c0 <__swsetup_r+0x9c>
 80056d0:	2000006c 	.word	0x2000006c

080056d4 <memset>:
 80056d4:	4603      	mov	r3, r0
 80056d6:	4402      	add	r2, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <_close_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	2300      	movs	r3, #0
 80056e8:	4d05      	ldr	r5, [pc, #20]	; (8005700 <_close_r+0x1c>)
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fc f947 	bl	8001982 <_close>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_close_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_close_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000314 	.word	0x20000314

08005704 <_lseek_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	2200      	movs	r2, #0
 800570e:	4d05      	ldr	r5, [pc, #20]	; (8005724 <_lseek_r+0x20>)
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fc f959 	bl	80019ca <_lseek>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_lseek_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_lseek_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000314 	.word	0x20000314

08005728 <_read_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	2200      	movs	r2, #0
 8005732:	4d05      	ldr	r5, [pc, #20]	; (8005748 <_read_r+0x20>)
 8005734:	602a      	str	r2, [r5, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f7fc f906 	bl	8001948 <_read>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_read_r+0x1e>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_read_r+0x1e>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000314 	.word	0x20000314

0800574c <_write_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	2200      	movs	r2, #0
 8005756:	4d05      	ldr	r5, [pc, #20]	; (800576c <_write_r+0x20>)
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f7fb f938 	bl	80009d0 <_write>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_write_r+0x1e>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_write_r+0x1e>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	20000314 	.word	0x20000314

08005770 <__errno>:
 8005770:	4b01      	ldr	r3, [pc, #4]	; (8005778 <__errno+0x8>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2000006c 	.word	0x2000006c

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	2600      	movs	r6, #0
 8005780:	4d0c      	ldr	r5, [pc, #48]	; (80057b4 <__libc_init_array+0x38>)
 8005782:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005784:	1b64      	subs	r4, r4, r5
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	f000 fd34 	bl	80061f8 <_init>
 8005790:	2600      	movs	r6, #0
 8005792:	4d0a      	ldr	r5, [pc, #40]	; (80057bc <__libc_init_array+0x40>)
 8005794:	4c0a      	ldr	r4, [pc, #40]	; (80057c0 <__libc_init_array+0x44>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	080063c8 	.word	0x080063c8
 80057b8:	080063c8 	.word	0x080063c8
 80057bc:	080063c8 	.word	0x080063c8
 80057c0:	080063cc 	.word	0x080063cc

080057c4 <__retarget_lock_init_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_acquire_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <__retarget_lock_release_recursive>:
 80057c8:	4770      	bx	lr
	...

080057cc <_free_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4605      	mov	r5, r0
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d040      	beq.n	8005856 <_free_r+0x8a>
 80057d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d8:	1f0c      	subs	r4, r1, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bfb8      	it	lt
 80057de:	18e4      	addlt	r4, r4, r3
 80057e0:	f000 f8dc 	bl	800599c <__malloc_lock>
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <_free_r+0x8c>)
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	b933      	cbnz	r3, 80057f8 <_free_r+0x2c>
 80057ea:	6063      	str	r3, [r4, #4]
 80057ec:	6014      	str	r4, [r2, #0]
 80057ee:	4628      	mov	r0, r5
 80057f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057f4:	f000 b8d8 	b.w	80059a8 <__malloc_unlock>
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d908      	bls.n	800580e <_free_r+0x42>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	1821      	adds	r1, r4, r0
 8005800:	428b      	cmp	r3, r1
 8005802:	bf01      	itttt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	1809      	addeq	r1, r1, r0
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	e7ed      	b.n	80057ea <_free_r+0x1e>
 800580e:	461a      	mov	r2, r3
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b10b      	cbz	r3, 8005818 <_free_r+0x4c>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d9fa      	bls.n	800580e <_free_r+0x42>
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	1850      	adds	r0, r2, r1
 800581c:	42a0      	cmp	r0, r4
 800581e:	d10b      	bne.n	8005838 <_free_r+0x6c>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	4401      	add	r1, r0
 8005824:	1850      	adds	r0, r2, r1
 8005826:	4283      	cmp	r3, r0
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	d1e0      	bne.n	80057ee <_free_r+0x22>
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4408      	add	r0, r1
 8005832:	6010      	str	r0, [r2, #0]
 8005834:	6053      	str	r3, [r2, #4]
 8005836:	e7da      	b.n	80057ee <_free_r+0x22>
 8005838:	d902      	bls.n	8005840 <_free_r+0x74>
 800583a:	230c      	movs	r3, #12
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	e7d6      	b.n	80057ee <_free_r+0x22>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	1821      	adds	r1, r4, r0
 8005844:	428b      	cmp	r3, r1
 8005846:	bf01      	itttt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	1809      	addeq	r1, r1, r0
 800584e:	6021      	streq	r1, [r4, #0]
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	6054      	str	r4, [r2, #4]
 8005854:	e7cb      	b.n	80057ee <_free_r+0x22>
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	2000031c 	.word	0x2000031c

0800585c <sbrk_aligned>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4e0e      	ldr	r6, [pc, #56]	; (8005898 <sbrk_aligned+0x3c>)
 8005860:	460c      	mov	r4, r1
 8005862:	6831      	ldr	r1, [r6, #0]
 8005864:	4605      	mov	r5, r0
 8005866:	b911      	cbnz	r1, 800586e <sbrk_aligned+0x12>
 8005868:	f000 fca8 	bl	80061bc <_sbrk_r>
 800586c:	6030      	str	r0, [r6, #0]
 800586e:	4621      	mov	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fca3 	bl	80061bc <_sbrk_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	d00a      	beq.n	8005890 <sbrk_aligned+0x34>
 800587a:	1cc4      	adds	r4, r0, #3
 800587c:	f024 0403 	bic.w	r4, r4, #3
 8005880:	42a0      	cmp	r0, r4
 8005882:	d007      	beq.n	8005894 <sbrk_aligned+0x38>
 8005884:	1a21      	subs	r1, r4, r0
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fc98 	bl	80061bc <_sbrk_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d101      	bne.n	8005894 <sbrk_aligned+0x38>
 8005890:	f04f 34ff 	mov.w	r4, #4294967295
 8005894:	4620      	mov	r0, r4
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	20000320 	.word	0x20000320

0800589c <_malloc_r>:
 800589c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a0:	1ccd      	adds	r5, r1, #3
 80058a2:	f025 0503 	bic.w	r5, r5, #3
 80058a6:	3508      	adds	r5, #8
 80058a8:	2d0c      	cmp	r5, #12
 80058aa:	bf38      	it	cc
 80058ac:	250c      	movcc	r5, #12
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	4607      	mov	r7, r0
 80058b2:	db01      	blt.n	80058b8 <_malloc_r+0x1c>
 80058b4:	42a9      	cmp	r1, r5
 80058b6:	d905      	bls.n	80058c4 <_malloc_r+0x28>
 80058b8:	230c      	movs	r3, #12
 80058ba:	2600      	movs	r6, #0
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4630      	mov	r0, r6
 80058c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005998 <_malloc_r+0xfc>
 80058c8:	f000 f868 	bl	800599c <__malloc_lock>
 80058cc:	f8d8 3000 	ldr.w	r3, [r8]
 80058d0:	461c      	mov	r4, r3
 80058d2:	bb5c      	cbnz	r4, 800592c <_malloc_r+0x90>
 80058d4:	4629      	mov	r1, r5
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ffc0 	bl	800585c <sbrk_aligned>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	4604      	mov	r4, r0
 80058e0:	d155      	bne.n	800598e <_malloc_r+0xf2>
 80058e2:	f8d8 4000 	ldr.w	r4, [r8]
 80058e6:	4626      	mov	r6, r4
 80058e8:	2e00      	cmp	r6, #0
 80058ea:	d145      	bne.n	8005978 <_malloc_r+0xdc>
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	d048      	beq.n	8005982 <_malloc_r+0xe6>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	4631      	mov	r1, r6
 80058f4:	4638      	mov	r0, r7
 80058f6:	eb04 0903 	add.w	r9, r4, r3
 80058fa:	f000 fc5f 	bl	80061bc <_sbrk_r>
 80058fe:	4581      	cmp	r9, r0
 8005900:	d13f      	bne.n	8005982 <_malloc_r+0xe6>
 8005902:	6821      	ldr	r1, [r4, #0]
 8005904:	4638      	mov	r0, r7
 8005906:	1a6d      	subs	r5, r5, r1
 8005908:	4629      	mov	r1, r5
 800590a:	f7ff ffa7 	bl	800585c <sbrk_aligned>
 800590e:	3001      	adds	r0, #1
 8005910:	d037      	beq.n	8005982 <_malloc_r+0xe6>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	442b      	add	r3, r5
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f8d8 3000 	ldr.w	r3, [r8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d038      	beq.n	8005992 <_malloc_r+0xf6>
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	42a2      	cmp	r2, r4
 8005924:	d12b      	bne.n	800597e <_malloc_r+0xe2>
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	e00f      	b.n	800594c <_malloc_r+0xb0>
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	1b52      	subs	r2, r2, r5
 8005930:	d41f      	bmi.n	8005972 <_malloc_r+0xd6>
 8005932:	2a0b      	cmp	r2, #11
 8005934:	d917      	bls.n	8005966 <_malloc_r+0xca>
 8005936:	1961      	adds	r1, r4, r5
 8005938:	42a3      	cmp	r3, r4
 800593a:	6025      	str	r5, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	6059      	strne	r1, [r3, #4]
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	bf08      	it	eq
 8005944:	f8c8 1000 	streq.w	r1, [r8]
 8005948:	5162      	str	r2, [r4, r5]
 800594a:	604b      	str	r3, [r1, #4]
 800594c:	4638      	mov	r0, r7
 800594e:	f104 060b 	add.w	r6, r4, #11
 8005952:	f000 f829 	bl	80059a8 <__malloc_unlock>
 8005956:	f026 0607 	bic.w	r6, r6, #7
 800595a:	1d23      	adds	r3, r4, #4
 800595c:	1af2      	subs	r2, r6, r3
 800595e:	d0ae      	beq.n	80058be <_malloc_r+0x22>
 8005960:	1b9b      	subs	r3, r3, r6
 8005962:	50a3      	str	r3, [r4, r2]
 8005964:	e7ab      	b.n	80058be <_malloc_r+0x22>
 8005966:	42a3      	cmp	r3, r4
 8005968:	6862      	ldr	r2, [r4, #4]
 800596a:	d1dd      	bne.n	8005928 <_malloc_r+0x8c>
 800596c:	f8c8 2000 	str.w	r2, [r8]
 8005970:	e7ec      	b.n	800594c <_malloc_r+0xb0>
 8005972:	4623      	mov	r3, r4
 8005974:	6864      	ldr	r4, [r4, #4]
 8005976:	e7ac      	b.n	80058d2 <_malloc_r+0x36>
 8005978:	4634      	mov	r4, r6
 800597a:	6876      	ldr	r6, [r6, #4]
 800597c:	e7b4      	b.n	80058e8 <_malloc_r+0x4c>
 800597e:	4613      	mov	r3, r2
 8005980:	e7cc      	b.n	800591c <_malloc_r+0x80>
 8005982:	230c      	movs	r3, #12
 8005984:	4638      	mov	r0, r7
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	f000 f80e 	bl	80059a8 <__malloc_unlock>
 800598c:	e797      	b.n	80058be <_malloc_r+0x22>
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	e7dc      	b.n	800594c <_malloc_r+0xb0>
 8005992:	605b      	str	r3, [r3, #4]
 8005994:	deff      	udf	#255	; 0xff
 8005996:	bf00      	nop
 8005998:	2000031c 	.word	0x2000031c

0800599c <__malloc_lock>:
 800599c:	4801      	ldr	r0, [pc, #4]	; (80059a4 <__malloc_lock+0x8>)
 800599e:	f7ff bf12 	b.w	80057c6 <__retarget_lock_acquire_recursive>
 80059a2:	bf00      	nop
 80059a4:	20000318 	.word	0x20000318

080059a8 <__malloc_unlock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__malloc_unlock+0x8>)
 80059aa:	f7ff bf0d 	b.w	80057c8 <__retarget_lock_release_recursive>
 80059ae:	bf00      	nop
 80059b0:	20000318 	.word	0x20000318

080059b4 <__sfputc_r>:
 80059b4:	6893      	ldr	r3, [r2, #8]
 80059b6:	b410      	push	{r4}
 80059b8:	3b01      	subs	r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	6093      	str	r3, [r2, #8]
 80059be:	da07      	bge.n	80059d0 <__sfputc_r+0x1c>
 80059c0:	6994      	ldr	r4, [r2, #24]
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	db01      	blt.n	80059ca <__sfputc_r+0x16>
 80059c6:	290a      	cmp	r1, #10
 80059c8:	d102      	bne.n	80059d0 <__sfputc_r+0x1c>
 80059ca:	bc10      	pop	{r4}
 80059cc:	f7ff bded 	b.w	80055aa <__swbuf_r>
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	1c58      	adds	r0, r3, #1
 80059d4:	6010      	str	r0, [r2, #0]
 80059d6:	7019      	strb	r1, [r3, #0]
 80059d8:	4608      	mov	r0, r1
 80059da:	bc10      	pop	{r4}
 80059dc:	4770      	bx	lr

080059de <__sfputs_r>:
 80059de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e0:	4606      	mov	r6, r0
 80059e2:	460f      	mov	r7, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	18d5      	adds	r5, r2, r3
 80059e8:	42ac      	cmp	r4, r5
 80059ea:	d101      	bne.n	80059f0 <__sfputs_r+0x12>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e007      	b.n	8005a00 <__sfputs_r+0x22>
 80059f0:	463a      	mov	r2, r7
 80059f2:	4630      	mov	r0, r6
 80059f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f8:	f7ff ffdc 	bl	80059b4 <__sfputc_r>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d1f3      	bne.n	80059e8 <__sfputs_r+0xa>
 8005a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a04 <_vfiprintf_r>:
 8005a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	460d      	mov	r5, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	4698      	mov	r8, r3
 8005a0e:	4606      	mov	r6, r0
 8005a10:	b09d      	sub	sp, #116	; 0x74
 8005a12:	b118      	cbz	r0, 8005a1c <_vfiprintf_r+0x18>
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	b90b      	cbnz	r3, 8005a1c <_vfiprintf_r+0x18>
 8005a18:	f7ff fce0 	bl	80053dc <__sinit>
 8005a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	d405      	bmi.n	8005a2e <_vfiprintf_r+0x2a>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	059a      	lsls	r2, r3, #22
 8005a26:	d402      	bmi.n	8005a2e <_vfiprintf_r+0x2a>
 8005a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a2a:	f7ff fecc 	bl	80057c6 <__retarget_lock_acquire_recursive>
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	d501      	bpl.n	8005a38 <_vfiprintf_r+0x34>
 8005a34:	692b      	ldr	r3, [r5, #16]
 8005a36:	b99b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x5c>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7ff fdf2 	bl	8005624 <__swsetup_r>
 8005a40:	b170      	cbz	r0, 8005a60 <_vfiprintf_r+0x5c>
 8005a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a44:	07dc      	lsls	r4, r3, #31
 8005a46:	d504      	bpl.n	8005a52 <_vfiprintf_r+0x4e>
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	b01d      	add	sp, #116	; 0x74
 8005a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	0598      	lsls	r0, r3, #22
 8005a56:	d4f7      	bmi.n	8005a48 <_vfiprintf_r+0x44>
 8005a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a5a:	f7ff feb5 	bl	80057c8 <__retarget_lock_release_recursive>
 8005a5e:	e7f3      	b.n	8005a48 <_vfiprintf_r+0x44>
 8005a60:	2300      	movs	r3, #0
 8005a62:	9309      	str	r3, [sp, #36]	; 0x24
 8005a64:	2320      	movs	r3, #32
 8005a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a6a:	2330      	movs	r3, #48	; 0x30
 8005a6c:	f04f 0901 	mov.w	r9, #1
 8005a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a74:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005c24 <_vfiprintf_r+0x220>
 8005a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	469a      	mov	sl, r3
 8005a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a84:	b10a      	cbz	r2, 8005a8a <_vfiprintf_r+0x86>
 8005a86:	2a25      	cmp	r2, #37	; 0x25
 8005a88:	d1f9      	bne.n	8005a7e <_vfiprintf_r+0x7a>
 8005a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8e:	d00b      	beq.n	8005aa8 <_vfiprintf_r+0xa4>
 8005a90:	465b      	mov	r3, fp
 8005a92:	4622      	mov	r2, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ffa1 	bl	80059de <__sfputs_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f000 80a9 	beq.w	8005bf4 <_vfiprintf_r+0x1f0>
 8005aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa4:	445a      	add	r2, fp
 8005aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8005aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80a1 	beq.w	8005bf4 <_vfiprintf_r+0x1f0>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005abc:	f10a 0a01 	add.w	sl, sl, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8005aca:	4654      	mov	r4, sl
 8005acc:	2205      	movs	r2, #5
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	4854      	ldr	r0, [pc, #336]	; (8005c24 <_vfiprintf_r+0x220>)
 8005ad4:	f000 fb82 	bl	80061dc <memchr>
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	b9d8      	cbnz	r0, 8005b14 <_vfiprintf_r+0x110>
 8005adc:	06d1      	lsls	r1, r2, #27
 8005ade:	bf44      	itt	mi
 8005ae0:	2320      	movmi	r3, #32
 8005ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae6:	0713      	lsls	r3, r2, #28
 8005ae8:	bf44      	itt	mi
 8005aea:	232b      	movmi	r3, #43	; 0x2b
 8005aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af0:	f89a 3000 	ldrb.w	r3, [sl]
 8005af4:	2b2a      	cmp	r3, #42	; 0x2a
 8005af6:	d015      	beq.n	8005b24 <_vfiprintf_r+0x120>
 8005af8:	4654      	mov	r4, sl
 8005afa:	2000      	movs	r0, #0
 8005afc:	f04f 0c0a 	mov.w	ip, #10
 8005b00:	9a07      	ldr	r2, [sp, #28]
 8005b02:	4621      	mov	r1, r4
 8005b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b08:	3b30      	subs	r3, #48	; 0x30
 8005b0a:	2b09      	cmp	r3, #9
 8005b0c:	d94d      	bls.n	8005baa <_vfiprintf_r+0x1a6>
 8005b0e:	b1b0      	cbz	r0, 8005b3e <_vfiprintf_r+0x13a>
 8005b10:	9207      	str	r2, [sp, #28]
 8005b12:	e014      	b.n	8005b3e <_vfiprintf_r+0x13a>
 8005b14:	eba0 0308 	sub.w	r3, r0, r8
 8005b18:	fa09 f303 	lsl.w	r3, r9, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	46a2      	mov	sl, r4
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	e7d2      	b.n	8005aca <_vfiprintf_r+0xc6>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	1d19      	adds	r1, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	9103      	str	r1, [sp, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bfbb      	ittet	lt
 8005b30:	425b      	neglt	r3, r3
 8005b32:	f042 0202 	orrlt.w	r2, r2, #2
 8005b36:	9307      	strge	r3, [sp, #28]
 8005b38:	9307      	strlt	r3, [sp, #28]
 8005b3a:	bfb8      	it	lt
 8005b3c:	9204      	strlt	r2, [sp, #16]
 8005b3e:	7823      	ldrb	r3, [r4, #0]
 8005b40:	2b2e      	cmp	r3, #46	; 0x2e
 8005b42:	d10c      	bne.n	8005b5e <_vfiprintf_r+0x15a>
 8005b44:	7863      	ldrb	r3, [r4, #1]
 8005b46:	2b2a      	cmp	r3, #42	; 0x2a
 8005b48:	d134      	bne.n	8005bb4 <_vfiprintf_r+0x1b0>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3402      	adds	r4, #2
 8005b4e:	1d1a      	adds	r2, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	9203      	str	r2, [sp, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bfb8      	it	lt
 8005b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c28 <_vfiprintf_r+0x224>
 8005b62:	2203      	movs	r2, #3
 8005b64:	4650      	mov	r0, sl
 8005b66:	7821      	ldrb	r1, [r4, #0]
 8005b68:	f000 fb38 	bl	80061dc <memchr>
 8005b6c:	b138      	cbz	r0, 8005b7e <_vfiprintf_r+0x17a>
 8005b6e:	2240      	movs	r2, #64	; 0x40
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	eba0 000a 	sub.w	r0, r0, sl
 8005b76:	4082      	lsls	r2, r0
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	3401      	adds	r4, #1
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b82:	2206      	movs	r2, #6
 8005b84:	4829      	ldr	r0, [pc, #164]	; (8005c2c <_vfiprintf_r+0x228>)
 8005b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b8a:	f000 fb27 	bl	80061dc <memchr>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d03f      	beq.n	8005c12 <_vfiprintf_r+0x20e>
 8005b92:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <_vfiprintf_r+0x22c>)
 8005b94:	bb1b      	cbnz	r3, 8005bde <_vfiprintf_r+0x1da>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	3307      	adds	r3, #7
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba4:	443b      	add	r3, r7
 8005ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba8:	e768      	b.n	8005a7c <_vfiprintf_r+0x78>
 8005baa:	460c      	mov	r4, r1
 8005bac:	2001      	movs	r0, #1
 8005bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bb2:	e7a6      	b.n	8005b02 <_vfiprintf_r+0xfe>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f04f 0c0a 	mov.w	ip, #10
 8005bba:	4619      	mov	r1, r3
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	9305      	str	r3, [sp, #20]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc6:	3a30      	subs	r2, #48	; 0x30
 8005bc8:	2a09      	cmp	r2, #9
 8005bca:	d903      	bls.n	8005bd4 <_vfiprintf_r+0x1d0>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0c6      	beq.n	8005b5e <_vfiprintf_r+0x15a>
 8005bd0:	9105      	str	r1, [sp, #20]
 8005bd2:	e7c4      	b.n	8005b5e <_vfiprintf_r+0x15a>
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bdc:	e7f0      	b.n	8005bc0 <_vfiprintf_r+0x1bc>
 8005bde:	ab03      	add	r3, sp, #12
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	462a      	mov	r2, r5
 8005be4:	4630      	mov	r0, r6
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <_vfiprintf_r+0x230>)
 8005be8:	a904      	add	r1, sp, #16
 8005bea:	f3af 8000 	nop.w
 8005bee:	4607      	mov	r7, r0
 8005bf0:	1c78      	adds	r0, r7, #1
 8005bf2:	d1d6      	bne.n	8005ba2 <_vfiprintf_r+0x19e>
 8005bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_vfiprintf_r+0x202>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	059a      	lsls	r2, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_vfiprintf_r+0x202>
 8005c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c02:	f7ff fde1 	bl	80057c8 <__retarget_lock_release_recursive>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	065b      	lsls	r3, r3, #25
 8005c0a:	f53f af1d 	bmi.w	8005a48 <_vfiprintf_r+0x44>
 8005c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c10:	e71c      	b.n	8005a4c <_vfiprintf_r+0x48>
 8005c12:	ab03      	add	r3, sp, #12
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	462a      	mov	r2, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <_vfiprintf_r+0x230>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	f000 f87d 	bl	8005d1c <_printf_i>
 8005c22:	e7e4      	b.n	8005bee <_vfiprintf_r+0x1ea>
 8005c24:	0800638a 	.word	0x0800638a
 8005c28:	08006390 	.word	0x08006390
 8005c2c:	08006394 	.word	0x08006394
 8005c30:	00000000 	.word	0x00000000
 8005c34:	080059df 	.word	0x080059df

08005c38 <_printf_common>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	4699      	mov	r9, r3
 8005c40:	688a      	ldr	r2, [r1, #8]
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	4607      	mov	r7, r0
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bfb8      	it	lt
 8005c4a:	4613      	movlt	r3, r2
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c52:	460c      	mov	r4, r1
 8005c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c58:	b10a      	cbz	r2, 8005c5e <_printf_common+0x26>
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	0699      	lsls	r1, r3, #26
 8005c62:	bf42      	ittt	mi
 8005c64:	6833      	ldrmi	r3, [r6, #0]
 8005c66:	3302      	addmi	r3, #2
 8005c68:	6033      	strmi	r3, [r6, #0]
 8005c6a:	6825      	ldr	r5, [r4, #0]
 8005c6c:	f015 0506 	ands.w	r5, r5, #6
 8005c70:	d106      	bne.n	8005c80 <_printf_common+0x48>
 8005c72:	f104 0a19 	add.w	sl, r4, #25
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	6832      	ldr	r2, [r6, #0]
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dc2b      	bgt.n	8005cd8 <_printf_common+0xa0>
 8005c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c84:	1e13      	subs	r3, r2, #0
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	0692      	lsls	r2, r2, #26
 8005c8e:	d430      	bmi.n	8005cf2 <_printf_common+0xba>
 8005c90:	4649      	mov	r1, r9
 8005c92:	4638      	mov	r0, r7
 8005c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d023      	beq.n	8005ce6 <_printf_common+0xae>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	6922      	ldr	r2, [r4, #16]
 8005ca2:	f003 0306 	and.w	r3, r3, #6
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf14      	ite	ne
 8005caa:	2500      	movne	r5, #0
 8005cac:	6833      	ldreq	r3, [r6, #0]
 8005cae:	f04f 0600 	mov.w	r6, #0
 8005cb2:	bf08      	it	eq
 8005cb4:	68e5      	ldreq	r5, [r4, #12]
 8005cb6:	f104 041a 	add.w	r4, r4, #26
 8005cba:	bf08      	it	eq
 8005cbc:	1aed      	subeq	r5, r5, r3
 8005cbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005cc2:	bf08      	it	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bfc4      	itt	gt
 8005ccc:	1a9b      	subgt	r3, r3, r2
 8005cce:	18ed      	addgt	r5, r5, r3
 8005cd0:	42b5      	cmp	r5, r6
 8005cd2:	d11a      	bne.n	8005d0a <_printf_common+0xd2>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e008      	b.n	8005cea <_printf_common+0xb2>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4652      	mov	r2, sl
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d103      	bne.n	8005cee <_printf_common+0xb6>
 8005ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cee:	3501      	adds	r5, #1
 8005cf0:	e7c1      	b.n	8005c76 <_printf_common+0x3e>
 8005cf2:	2030      	movs	r0, #48	; 0x30
 8005cf4:	18e1      	adds	r1, r4, r3
 8005cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d00:	4422      	add	r2, r4
 8005d02:	3302      	adds	r3, #2
 8005d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d08:	e7c2      	b.n	8005c90 <_printf_common+0x58>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4638      	mov	r0, r7
 8005d12:	47c0      	blx	r8
 8005d14:	3001      	adds	r0, #1
 8005d16:	d0e6      	beq.n	8005ce6 <_printf_common+0xae>
 8005d18:	3601      	adds	r6, #1
 8005d1a:	e7d9      	b.n	8005cd0 <_printf_common+0x98>

08005d1c <_printf_i>:
 8005d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	7e0f      	ldrb	r7, [r1, #24]
 8005d22:	4691      	mov	r9, r2
 8005d24:	2f78      	cmp	r7, #120	; 0x78
 8005d26:	4680      	mov	r8, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	469a      	mov	sl, r3
 8005d2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d32:	d807      	bhi.n	8005d44 <_printf_i+0x28>
 8005d34:	2f62      	cmp	r7, #98	; 0x62
 8005d36:	d80a      	bhi.n	8005d4e <_printf_i+0x32>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	f000 80d5 	beq.w	8005ee8 <_printf_i+0x1cc>
 8005d3e:	2f58      	cmp	r7, #88	; 0x58
 8005d40:	f000 80c1 	beq.w	8005ec6 <_printf_i+0x1aa>
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d4c:	e03a      	b.n	8005dc4 <_printf_i+0xa8>
 8005d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d52:	2b15      	cmp	r3, #21
 8005d54:	d8f6      	bhi.n	8005d44 <_printf_i+0x28>
 8005d56:	a101      	add	r1, pc, #4	; (adr r1, 8005d5c <_printf_i+0x40>)
 8005d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005d45 	.word	0x08005d45
 8005d68:	08005d45 	.word	0x08005d45
 8005d6c:	08005d45 	.word	0x08005d45
 8005d70:	08005d45 	.word	0x08005d45
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d45 	.word	0x08005d45
 8005d7c:	08005d45 	.word	0x08005d45
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005ecf 	.word	0x08005ecf
 8005d8c:	08005df5 	.word	0x08005df5
 8005d90:	08005e89 	.word	0x08005e89
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ef1 	.word	0x08005ef1
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005e91 	.word	0x08005e91
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0a0      	b.n	8005f0a <_printf_i+0x1ee>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	0607      	lsls	r7, r0, #24
 8005dce:	f103 0104 	add.w	r1, r3, #4
 8005dd2:	6029      	str	r1, [r5, #0]
 8005dd4:	d501      	bpl.n	8005dda <_printf_i+0xbe>
 8005dd6:	681e      	ldr	r6, [r3, #0]
 8005dd8:	e003      	b.n	8005de2 <_printf_i+0xc6>
 8005dda:	0646      	lsls	r6, r0, #25
 8005ddc:	d5fb      	bpl.n	8005dd6 <_printf_i+0xba>
 8005dde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	da03      	bge.n	8005dee <_printf_i+0xd2>
 8005de6:	232d      	movs	r3, #45	; 0x2d
 8005de8:	4276      	negs	r6, r6
 8005dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dee:	230a      	movs	r3, #10
 8005df0:	4859      	ldr	r0, [pc, #356]	; (8005f58 <_printf_i+0x23c>)
 8005df2:	e012      	b.n	8005e1a <_printf_i+0xfe>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	1d19      	adds	r1, r3, #4
 8005dfa:	6029      	str	r1, [r5, #0]
 8005dfc:	0605      	lsls	r5, r0, #24
 8005dfe:	d501      	bpl.n	8005e04 <_printf_i+0xe8>
 8005e00:	681e      	ldr	r6, [r3, #0]
 8005e02:	e002      	b.n	8005e0a <_printf_i+0xee>
 8005e04:	0641      	lsls	r1, r0, #25
 8005e06:	d5fb      	bpl.n	8005e00 <_printf_i+0xe4>
 8005e08:	881e      	ldrh	r6, [r3, #0]
 8005e0a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2308      	moveq	r3, #8
 8005e10:	230a      	movne	r3, #10
 8005e12:	4851      	ldr	r0, [pc, #324]	; (8005f58 <_printf_i+0x23c>)
 8005e14:	2100      	movs	r1, #0
 8005e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1a:	6865      	ldr	r5, [r4, #4]
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	bfa8      	it	ge
 8005e20:	6821      	ldrge	r1, [r4, #0]
 8005e22:	60a5      	str	r5, [r4, #8]
 8005e24:	bfa4      	itt	ge
 8005e26:	f021 0104 	bicge.w	r1, r1, #4
 8005e2a:	6021      	strge	r1, [r4, #0]
 8005e2c:	b90e      	cbnz	r6, 8005e32 <_printf_i+0x116>
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	d04b      	beq.n	8005eca <_printf_i+0x1ae>
 8005e32:	4615      	mov	r5, r2
 8005e34:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e38:	fb03 6711 	mls	r7, r3, r1, r6
 8005e3c:	5dc7      	ldrb	r7, [r0, r7]
 8005e3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e42:	4637      	mov	r7, r6
 8005e44:	42bb      	cmp	r3, r7
 8005e46:	460e      	mov	r6, r1
 8005e48:	d9f4      	bls.n	8005e34 <_printf_i+0x118>
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d10b      	bne.n	8005e66 <_printf_i+0x14a>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	07de      	lsls	r6, r3, #31
 8005e52:	d508      	bpl.n	8005e66 <_printf_i+0x14a>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	6861      	ldr	r1, [r4, #4]
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	bfde      	ittt	le
 8005e5c:	2330      	movle	r3, #48	; 0x30
 8005e5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e66:	1b52      	subs	r2, r2, r5
 8005e68:	6122      	str	r2, [r4, #16]
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f8cd a000 	str.w	sl, [sp]
 8005e74:	aa03      	add	r2, sp, #12
 8005e76:	f7ff fedf 	bl	8005c38 <_printf_common>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d14a      	bne.n	8005f14 <_printf_i+0x1f8>
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	b004      	add	sp, #16
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f043 0320 	orr.w	r3, r3, #32
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	2778      	movs	r7, #120	; 0x78
 8005e92:	4832      	ldr	r0, [pc, #200]	; (8005f5c <_printf_i+0x240>)
 8005e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	6829      	ldr	r1, [r5, #0]
 8005e9c:	061f      	lsls	r7, r3, #24
 8005e9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ea2:	d402      	bmi.n	8005eaa <_printf_i+0x18e>
 8005ea4:	065f      	lsls	r7, r3, #25
 8005ea6:	bf48      	it	mi
 8005ea8:	b2b6      	uxthmi	r6, r6
 8005eaa:	07df      	lsls	r7, r3, #31
 8005eac:	bf48      	it	mi
 8005eae:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb2:	6029      	str	r1, [r5, #0]
 8005eb4:	bf48      	it	mi
 8005eb6:	6023      	strmi	r3, [r4, #0]
 8005eb8:	b91e      	cbnz	r6, 8005ec2 <_printf_i+0x1a6>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f023 0320 	bic.w	r3, r3, #32
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	e7a6      	b.n	8005e14 <_printf_i+0xf8>
 8005ec6:	4824      	ldr	r0, [pc, #144]	; (8005f58 <_printf_i+0x23c>)
 8005ec8:	e7e4      	b.n	8005e94 <_printf_i+0x178>
 8005eca:	4615      	mov	r5, r2
 8005ecc:	e7bd      	b.n	8005e4a <_printf_i+0x12e>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	6826      	ldr	r6, [r4, #0]
 8005ed2:	1d18      	adds	r0, r3, #4
 8005ed4:	6961      	ldr	r1, [r4, #20]
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	0635      	lsls	r5, r6, #24
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	d501      	bpl.n	8005ee2 <_printf_i+0x1c6>
 8005ede:	6019      	str	r1, [r3, #0]
 8005ee0:	e002      	b.n	8005ee8 <_printf_i+0x1cc>
 8005ee2:	0670      	lsls	r0, r6, #25
 8005ee4:	d5fb      	bpl.n	8005ede <_printf_i+0x1c2>
 8005ee6:	8019      	strh	r1, [r3, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4615      	mov	r5, r2
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	e7bc      	b.n	8005e6a <_printf_i+0x14e>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	602a      	str	r2, [r5, #0]
 8005ef8:	681d      	ldr	r5, [r3, #0]
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 f96d 	bl	80061dc <memchr>
 8005f02:	b108      	cbz	r0, 8005f08 <_printf_i+0x1ec>
 8005f04:	1b40      	subs	r0, r0, r5
 8005f06:	6060      	str	r0, [r4, #4]
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f12:	e7aa      	b.n	8005e6a <_printf_i+0x14e>
 8005f14:	462a      	mov	r2, r5
 8005f16:	4649      	mov	r1, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d0ad      	beq.n	8005e7e <_printf_i+0x162>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	079b      	lsls	r3, r3, #30
 8005f26:	d413      	bmi.n	8005f50 <_printf_i+0x234>
 8005f28:	68e0      	ldr	r0, [r4, #12]
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	4298      	cmp	r0, r3
 8005f2e:	bfb8      	it	lt
 8005f30:	4618      	movlt	r0, r3
 8005f32:	e7a6      	b.n	8005e82 <_printf_i+0x166>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4632      	mov	r2, r6
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	47d0      	blx	sl
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d09d      	beq.n	8005e7e <_printf_i+0x162>
 8005f42:	3501      	adds	r5, #1
 8005f44:	68e3      	ldr	r3, [r4, #12]
 8005f46:	9903      	ldr	r1, [sp, #12]
 8005f48:	1a5b      	subs	r3, r3, r1
 8005f4a:	42ab      	cmp	r3, r5
 8005f4c:	dcf2      	bgt.n	8005f34 <_printf_i+0x218>
 8005f4e:	e7eb      	b.n	8005f28 <_printf_i+0x20c>
 8005f50:	2500      	movs	r5, #0
 8005f52:	f104 0619 	add.w	r6, r4, #25
 8005f56:	e7f5      	b.n	8005f44 <_printf_i+0x228>
 8005f58:	0800639b 	.word	0x0800639b
 8005f5c:	080063ac 	.word	0x080063ac

08005f60 <__sflush_r>:
 8005f60:	898a      	ldrh	r2, [r1, #12]
 8005f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f64:	4605      	mov	r5, r0
 8005f66:	0710      	lsls	r0, r2, #28
 8005f68:	460c      	mov	r4, r1
 8005f6a:	d457      	bmi.n	800601c <__sflush_r+0xbc>
 8005f6c:	684b      	ldr	r3, [r1, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dc04      	bgt.n	8005f7c <__sflush_r+0x1c>
 8005f72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dc01      	bgt.n	8005f7c <__sflush_r+0x1c>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	d0fa      	beq.n	8005f78 <__sflush_r+0x18>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f88:	682f      	ldr	r7, [r5, #0]
 8005f8a:	6a21      	ldr	r1, [r4, #32]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	d032      	beq.n	8005ff6 <__sflush_r+0x96>
 8005f90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	075a      	lsls	r2, r3, #29
 8005f96:	d505      	bpl.n	8005fa4 <__sflush_r+0x44>
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	1ac0      	subs	r0, r0, r3
 8005f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f9e:	b10b      	cbz	r3, 8005fa4 <__sflush_r+0x44>
 8005fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fa2:	1ac0      	subs	r0, r0, r3
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005faa:	4628      	mov	r0, r5
 8005fac:	6a21      	ldr	r1, [r4, #32]
 8005fae:	47b0      	blx	r6
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	d106      	bne.n	8005fc4 <__sflush_r+0x64>
 8005fb6:	6829      	ldr	r1, [r5, #0]
 8005fb8:	291d      	cmp	r1, #29
 8005fba:	d82b      	bhi.n	8006014 <__sflush_r+0xb4>
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <__sflush_r+0x100>)
 8005fbe:	410a      	asrs	r2, r1
 8005fc0:	07d6      	lsls	r6, r2, #31
 8005fc2:	d427      	bmi.n	8006014 <__sflush_r+0xb4>
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	6062      	str	r2, [r4, #4]
 8005fc8:	6922      	ldr	r2, [r4, #16]
 8005fca:	04d9      	lsls	r1, r3, #19
 8005fcc:	6022      	str	r2, [r4, #0]
 8005fce:	d504      	bpl.n	8005fda <__sflush_r+0x7a>
 8005fd0:	1c42      	adds	r2, r0, #1
 8005fd2:	d101      	bne.n	8005fd8 <__sflush_r+0x78>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b903      	cbnz	r3, 8005fda <__sflush_r+0x7a>
 8005fd8:	6560      	str	r0, [r4, #84]	; 0x54
 8005fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fdc:	602f      	str	r7, [r5, #0]
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d0ca      	beq.n	8005f78 <__sflush_r+0x18>
 8005fe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d002      	beq.n	8005ff0 <__sflush_r+0x90>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7ff fbee 	bl	80057cc <_free_r>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ff4:	e7c1      	b.n	8005f7a <__sflush_r+0x1a>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b0      	blx	r6
 8005ffc:	1c41      	adds	r1, r0, #1
 8005ffe:	d1c8      	bne.n	8005f92 <__sflush_r+0x32>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c5      	beq.n	8005f92 <__sflush_r+0x32>
 8006006:	2b1d      	cmp	r3, #29
 8006008:	d001      	beq.n	800600e <__sflush_r+0xae>
 800600a:	2b16      	cmp	r3, #22
 800600c:	d101      	bne.n	8006012 <__sflush_r+0xb2>
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	e7b2      	b.n	8005f78 <__sflush_r+0x18>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	e7ae      	b.n	8005f7a <__sflush_r+0x1a>
 800601c:	690f      	ldr	r7, [r1, #16]
 800601e:	2f00      	cmp	r7, #0
 8006020:	d0aa      	beq.n	8005f78 <__sflush_r+0x18>
 8006022:	0793      	lsls	r3, r2, #30
 8006024:	bf18      	it	ne
 8006026:	2300      	movne	r3, #0
 8006028:	680e      	ldr	r6, [r1, #0]
 800602a:	bf08      	it	eq
 800602c:	694b      	ldreq	r3, [r1, #20]
 800602e:	1bf6      	subs	r6, r6, r7
 8006030:	600f      	str	r7, [r1, #0]
 8006032:	608b      	str	r3, [r1, #8]
 8006034:	2e00      	cmp	r6, #0
 8006036:	dd9f      	ble.n	8005f78 <__sflush_r+0x18>
 8006038:	4633      	mov	r3, r6
 800603a:	463a      	mov	r2, r7
 800603c:	4628      	mov	r0, r5
 800603e:	6a21      	ldr	r1, [r4, #32]
 8006040:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006044:	47e0      	blx	ip
 8006046:	2800      	cmp	r0, #0
 8006048:	dc06      	bgt.n	8006058 <__sflush_r+0xf8>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	e790      	b.n	8005f7a <__sflush_r+0x1a>
 8006058:	4407      	add	r7, r0
 800605a:	1a36      	subs	r6, r6, r0
 800605c:	e7ea      	b.n	8006034 <__sflush_r+0xd4>
 800605e:	bf00      	nop
 8006060:	dfbffffe 	.word	0xdfbffffe

08006064 <_fflush_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	690b      	ldr	r3, [r1, #16]
 8006068:	4605      	mov	r5, r0
 800606a:	460c      	mov	r4, r1
 800606c:	b913      	cbnz	r3, 8006074 <_fflush_r+0x10>
 800606e:	2500      	movs	r5, #0
 8006070:	4628      	mov	r0, r5
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	b118      	cbz	r0, 800607e <_fflush_r+0x1a>
 8006076:	6a03      	ldr	r3, [r0, #32]
 8006078:	b90b      	cbnz	r3, 800607e <_fflush_r+0x1a>
 800607a:	f7ff f9af 	bl	80053dc <__sinit>
 800607e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f3      	beq.n	800606e <_fflush_r+0xa>
 8006086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006088:	07d0      	lsls	r0, r2, #31
 800608a:	d404      	bmi.n	8006096 <_fflush_r+0x32>
 800608c:	0599      	lsls	r1, r3, #22
 800608e:	d402      	bmi.n	8006096 <_fflush_r+0x32>
 8006090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006092:	f7ff fb98 	bl	80057c6 <__retarget_lock_acquire_recursive>
 8006096:	4628      	mov	r0, r5
 8006098:	4621      	mov	r1, r4
 800609a:	f7ff ff61 	bl	8005f60 <__sflush_r>
 800609e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a0:	4605      	mov	r5, r0
 80060a2:	07da      	lsls	r2, r3, #31
 80060a4:	d4e4      	bmi.n	8006070 <_fflush_r+0xc>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	059b      	lsls	r3, r3, #22
 80060aa:	d4e1      	bmi.n	8006070 <_fflush_r+0xc>
 80060ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ae:	f7ff fb8b 	bl	80057c8 <__retarget_lock_release_recursive>
 80060b2:	e7dd      	b.n	8006070 <_fflush_r+0xc>

080060b4 <__swhatbuf_r>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	4615      	mov	r5, r2
 80060be:	2900      	cmp	r1, #0
 80060c0:	461e      	mov	r6, r3
 80060c2:	b096      	sub	sp, #88	; 0x58
 80060c4:	da0c      	bge.n	80060e0 <__swhatbuf_r+0x2c>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	2100      	movs	r1, #0
 80060ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060ce:	bf0c      	ite	eq
 80060d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060d4:	2340      	movne	r3, #64	; 0x40
 80060d6:	2000      	movs	r0, #0
 80060d8:	6031      	str	r1, [r6, #0]
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	b016      	add	sp, #88	; 0x58
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	466a      	mov	r2, sp
 80060e2:	f000 f849 	bl	8006178 <_fstat_r>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	dbed      	blt.n	80060c6 <__swhatbuf_r+0x12>
 80060ea:	9901      	ldr	r1, [sp, #4]
 80060ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80060f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060f4:	4259      	negs	r1, r3
 80060f6:	4159      	adcs	r1, r3
 80060f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fc:	e7eb      	b.n	80060d6 <__swhatbuf_r+0x22>

080060fe <__smakebuf_r>:
 80060fe:	898b      	ldrh	r3, [r1, #12]
 8006100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006102:	079d      	lsls	r5, r3, #30
 8006104:	4606      	mov	r6, r0
 8006106:	460c      	mov	r4, r1
 8006108:	d507      	bpl.n	800611a <__smakebuf_r+0x1c>
 800610a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800610e:	6023      	str	r3, [r4, #0]
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	2301      	movs	r3, #1
 8006114:	6163      	str	r3, [r4, #20]
 8006116:	b002      	add	sp, #8
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	466a      	mov	r2, sp
 800611c:	ab01      	add	r3, sp, #4
 800611e:	f7ff ffc9 	bl	80060b4 <__swhatbuf_r>
 8006122:	9900      	ldr	r1, [sp, #0]
 8006124:	4605      	mov	r5, r0
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff fbb8 	bl	800589c <_malloc_r>
 800612c:	b948      	cbnz	r0, 8006142 <__smakebuf_r+0x44>
 800612e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006132:	059a      	lsls	r2, r3, #22
 8006134:	d4ef      	bmi.n	8006116 <__smakebuf_r+0x18>
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	f043 0302 	orr.w	r3, r3, #2
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	e7e3      	b.n	800610a <__smakebuf_r+0xc>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	6020      	str	r0, [r4, #0]
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	9b00      	ldr	r3, [sp, #0]
 800614e:	6120      	str	r0, [r4, #16]
 8006150:	6163      	str	r3, [r4, #20]
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	b15b      	cbz	r3, 800616e <__smakebuf_r+0x70>
 8006156:	4630      	mov	r0, r6
 8006158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800615c:	f000 f81e 	bl	800619c <_isatty_r>
 8006160:	b128      	cbz	r0, 800616e <__smakebuf_r+0x70>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	f023 0303 	bic.w	r3, r3, #3
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	431d      	orrs	r5, r3
 8006172:	81a5      	strh	r5, [r4, #12]
 8006174:	e7cf      	b.n	8006116 <__smakebuf_r+0x18>
	...

08006178 <_fstat_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	2300      	movs	r3, #0
 800617c:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_fstat_r+0x20>)
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	f7fb fc07 	bl	8001998 <_fstat>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d102      	bne.n	8006194 <_fstat_r+0x1c>
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	b103      	cbz	r3, 8006194 <_fstat_r+0x1c>
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	bd38      	pop	{r3, r4, r5, pc}
 8006196:	bf00      	nop
 8006198:	20000314 	.word	0x20000314

0800619c <_isatty_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	2300      	movs	r3, #0
 80061a0:	4d05      	ldr	r5, [pc, #20]	; (80061b8 <_isatty_r+0x1c>)
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fb fc05 	bl	80019b6 <_isatty>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_isatty_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_isatty_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000314 	.word	0x20000314

080061bc <_sbrk_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	2300      	movs	r3, #0
 80061c0:	4d05      	ldr	r5, [pc, #20]	; (80061d8 <_sbrk_r+0x1c>)
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb fc0c 	bl	80019e4 <_sbrk>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_sbrk_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_sbrk_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20000314 	.word	0x20000314

080061dc <memchr>:
 80061dc:	4603      	mov	r3, r0
 80061de:	b510      	push	{r4, lr}
 80061e0:	b2c9      	uxtb	r1, r1
 80061e2:	4402      	add	r2, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	d101      	bne.n	80061ee <memchr+0x12>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e003      	b.n	80061f6 <memchr+0x1a>
 80061ee:	7804      	ldrb	r4, [r0, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	428c      	cmp	r4, r1
 80061f4:	d1f6      	bne.n	80061e4 <memchr+0x8>
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <_init>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr

08006204 <_fini>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr
