
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000006c  08004120  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004120  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b07d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ddd  00000000  00000000  0002b155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000911  00000000  00000000  0002db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017939  00000000  00000000  0002e439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc5f  00000000  00000000  00045d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000937bf  00000000  00000000  000529d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003968  00000000  00000000  000e6190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e9af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003fe0 	.word	0x08003fe0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	08003fe0 	.word	0x08003fe0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 fc81 	bl	8000dd2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f958 	bl	8000788 <MX_GPIO_Init>
	MX_TIM3_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_TIM3_Init>
	MX_SPI1_Init();
 80004dc:	f000 f8aa 	bl	8000634 <MX_SPI1_Init>
	MX_ADC_Init();
 80004e0:	f000 f850 	bl	8000584 <MX_ADC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x1c>
	...

080004e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b092      	sub	sp, #72	; 0x48
 80004ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2234      	movs	r2, #52	; 0x34
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 ffe0 	bl	80034bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <SystemClock_Config+0x98>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <SystemClock_Config+0x98>)
 8000514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000518:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2310      	movs	r3, #16
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2300      	movs	r3, #0
 800052c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800052e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000534:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fa36 	bl	80019b0 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800054a:	f000 fa0b 	bl	8000964 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	2303      	movs	r3, #3
 8000554:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd52 	bl	8002010 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000572:	f000 f9f7 	bl	8000964 <Error_Handler>
	}
}
 8000576:	bf00      	nop
 8000578:	3748      	adds	r7, #72	; 0x48
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40007000 	.word	0x40007000

08000584 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_ADC_Init+0xa8>)
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_ADC_Init+0xac>)
 8000598:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_ADC_Init+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_ADC_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC_Init+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC_Init+0xa8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_ADC_Init+0xa8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC_Init+0xa8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_ADC_Init+0xa8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC_Init+0xa8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_ADC_Init+0xa8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_ADC_Init+0xa8>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC_Init+0xa8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC_Init+0xa8>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC_Init+0xa8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC_Init+0xa8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC_Init+0xa8>)
 80005f6:	f000 fc5b 	bl	8000eb0 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8000600:	f000 f9b0 	bl	8000964 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000608:	2301      	movs	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 800060c:	2307      	movs	r3, #7
 800060e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC_Init+0xa8>)
 8000616:	f000 fd91 	bl	800113c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8000620:	f000 f9a0 	bl	8000964 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000088 	.word	0x20000088
 8000630:	40012400 	.word	0x40012400

08000634 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_SPI1_Init+0x64>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_SPI1_Init+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI1_Init+0x64>)
 8000640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000644:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x64>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x64>)
 8000680:	220a      	movs	r2, #10
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_SPI1_Init+0x64>)
 8000686:	f001 ff15 	bl	80024b4 <HAL_SPI_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000690:	f000 f968 	bl	8000964 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000dc 	.word	0x200000dc
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006cc:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <MX_TIM3_Init+0xe4>)
 80006ce:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32000;
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006d6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f2:	4823      	ldr	r0, [pc, #140]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006f4:	f001 ff67 	bl	80025c6 <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 80006fe:	f000 f931 	bl	8000964 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4619      	mov	r1, r3
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000710:	f002 f97e 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800071a:	f000 f923 	bl	8000964 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000720:	f001 ff90 	bl	8002644 <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 800072a:	f000 f91b 	bl	8000964 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <MX_TIM3_Init+0xe0>)
 800073e:	f002 fc57 	bl	8002ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 8000748:	f000 f90c 	bl	8000964 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000764:	f002 f892 	bl	800288c <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 800076e:	f000 f8f9 	bl	8000964 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000774:	f000 f9fa 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134
 8000784:	40000400 	.word	0x40000400

08000788 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <MX_GPIO_Init+0xec>)
 80007ee:	f001 f8af 	bl	8001950 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BTNCarte_Pin BTN4_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTNCarte_Pin|BTN4_Pin|BTN3_Pin;
 80007f2:	f242 0360 	movw	r3, #8288	; 0x2060
 80007f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <MX_GPIO_Init+0xf0>)
 800080a:	f000 ff11 	bl	8001630 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_GPIO_Init+0xec>)
 8000828:	f000 ff02 	bl	8001630 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800082c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000830:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000836:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xec>)
 8000844:	f000 fef4 	bl	8001630 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f000 feb8 	bl	80015c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f000 fed1 	bl	80015fa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f000 feb0 	bl	80015c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000862:	2028      	movs	r0, #40	; 0x28
 8000864:	f000 fec9 	bl	80015fa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020800 	.word	0x40020800

0800087c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e009      	b.n	80008a2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	60ba      	str	r2, [r7, #8]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fdf0 	bl	800047c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbf1      	blt.n	800088e <_write+0x12>
	}
	return len;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
			mode=1;
			printf("Mode else : %d\n",mode);
		}
	}

	if (mode == 1){
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d104      	bne.n	80008d0 <HAL_GPIO_EXTI_Callback+0x1c>
		mode1(GPIO_Pin);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f80d 	bl	80008e8 <mode1>
	}
	else {
		printf("Mode pas encore implémenté\n");
	}
}
 80008ce:	e002      	b.n	80008d6 <HAL_GPIO_EXTI_Callback+0x22>
		printf("Mode pas encore implémenté\n");
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008d2:	f002 fd13 	bl	80032fc <puts>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	08003ff8 	.word	0x08003ff8

080008e8 <mode1>:

void mode1(uint16_t GPIO_Pin){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	printf("Mode :%d\n",mode);
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <mode1+0x64>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <mode1+0x68>)
 80008fa:	f002 fc99 	bl	8003230 <iprintf>
	switch(GPIO_Pin){
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000904:	d011      	beq.n	800092a <mode1+0x42>
 8000906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800090a:	dc1a      	bgt.n	8000942 <mode1+0x5a>
 800090c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000910:	d007      	beq.n	8000922 <mode1+0x3a>
 8000912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000916:	dc14      	bgt.n	8000942 <mode1+0x5a>
 8000918:	2b20      	cmp	r3, #32
 800091a:	d00e      	beq.n	800093a <mode1+0x52>
 800091c:	2b40      	cmp	r3, #64	; 0x40
 800091e:	d008      	beq.n	8000932 <mode1+0x4a>
	case BTN4_Pin:
		printf("BTN4_Pin\n");
		break;

	default :
		break;
 8000920:	e00f      	b.n	8000942 <mode1+0x5a>
		printf("BTN1_Pin\n");
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <mode1+0x6c>)
 8000924:	f002 fcea 	bl	80032fc <puts>
		break;
 8000928:	e00c      	b.n	8000944 <mode1+0x5c>
		printf("BTN2_Pin\n");
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <mode1+0x70>)
 800092c:	f002 fce6 	bl	80032fc <puts>
		break;
 8000930:	e008      	b.n	8000944 <mode1+0x5c>
		printf("BTN3_Pin\n");
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <mode1+0x74>)
 8000934:	f002 fce2 	bl	80032fc <puts>
		break;
 8000938:	e004      	b.n	8000944 <mode1+0x5c>
		printf("BTN4_Pin\n");
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <mode1+0x78>)
 800093c:	f002 fcde 	bl	80032fc <puts>
		break;
 8000940:	e000      	b.n	8000944 <mode1+0x5c>
		break;
 8000942:	bf00      	nop
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	08004018 	.word	0x08004018
 8000954:	08004024 	.word	0x08004024
 8000958:	08004030 	.word	0x08004030
 800095c:	0800403c 	.word	0x0800403c
 8000960:	08004048 	.word	0x08004048

08000964 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_MspInit+0x58>)
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <HAL_MspInit+0x58>)
 800097c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000980:	6253      	str	r3, [r2, #36]	; 0x24
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x58>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x58>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_MspInit+0x58>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6213      	str	r3, [r2, #32]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x58>)
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x58>)
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_MspInit+0x58>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6253      	str	r3, [r2, #36]	; 0x24
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_MspInit+0x58>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <HAL_ADC_MspInit+0x74>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d123      	bne.n	8000a36 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 80009f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f8:	6213      	str	r3, [r2, #32]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_ADC_MspInit+0x78>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = RV1_Pin|RV2_Pin;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a22:	2303      	movs	r3, #3
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_ADC_MspInit+0x7c>)
 8000a32:	f000 fdfd 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40012400 	.word	0x40012400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x7c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d127      	bne.n	8000abe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a78:	6213      	str	r3, [r2, #32]
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8000a9e:	23e0      	movs	r3, #224	; 0xe0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000aba:	f000 fdb9 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <HAL_TIM_Base_MspInit+0x8c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12f      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6253      	str	r3, [r2, #36]	; 0x24
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_TIM_Base_MspInit+0x90>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b36:	2302      	movs	r3, #2
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_TIM_Base_MspInit+0x94>)
 8000b42:	f000 fd75 	bl	8001630 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201d      	movs	r0, #29
 8000b4c:	f000 fd39 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b50:	201d      	movs	r0, #29
 8000b52:	f000 fd52 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_TIM_MspPostInit+0x64>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11b      	bne.n	8000bc6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MOT_Pin;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000bc2:	f000 fd35 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f929 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f000 fea6 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000c34:	2040      	movs	r0, #64	; 0x40
 8000c36:	f000 fea3 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM3_IRQHandler+0x10>)
 8000c46:	f001 fd45 	bl	80026d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000134 	.word	0x20000134

08000c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000c58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c5c:	f000 fe90 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000c60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c64:	f000 fe8c 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTNCarte_Pin);
 8000c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c6c:	f000 fe88 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	f3af 8000 	nop.w
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <_isatty>:

int _isatty(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f002 fc0a 	bl	8003558 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20014000 	.word	0x20014000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000174 	.word	0x20000174
 8000d78:	200002c8 	.word	0x200002c8

08000d7c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fff8 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fbd7 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff fb87 	bl	80004c8 <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000dc4:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000dc8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000dcc:	200002c8 	.word	0x200002c8

08000dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>

08000dd2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 fbe5 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f80e 	bl	8000e04 <HAL_InitTick>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e001      	b.n	8000df8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df4:	f7ff fdbc 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_InitTick+0x68>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d022      	beq.n	8000e5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_InitTick+0x6c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_InitTick+0x68>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fbf2 	bl	8001616 <HAL_SYSTICK_Config>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10f      	bne.n	8000e58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d809      	bhi.n	8000e52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	f04f 30ff 	mov.w	r0, #4294967295
 8000e46:	f000 fbbc 	bl	80015c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x70>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e007      	b.n	8000e62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e004      	b.n	8000e62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e001      	b.n	8000e62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000008 	.word	0x20000008

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x20>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_IncTick+0x1c>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000178 	.word	0x20000178
 8000e98:	2000000c 	.word	0x2000000c

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000178 	.word	0x20000178

08000eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e127      	b.n	8001120 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d115      	bne.n	8000f0a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b8e      	ldr	r3, [pc, #568]	; (8001128 <HAL_ADC_Init+0x278>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a8d      	ldr	r2, [pc, #564]	; (8001128 <HAL_ADC_Init+0x278>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6213      	str	r3, [r2, #32]
 8000ef8:	4b8b      	ldr	r3, [pc, #556]	; (8001128 <HAL_ADC_Init+0x278>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fd61 	bl	80009cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 80ff 	bne.w	8001116 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f20:	f023 0302 	bic.w	r3, r3, #2
 8000f24:	f043 0202 	orr.w	r2, r3, #2
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000f2c:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_ADC_Init+0x27c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	497c      	ldr	r1, [pc, #496]	; (800112c <HAL_ADC_Init+0x27c>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f46:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000f6a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000f92:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f96:	4313      	orrs	r3, r2
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	d007      	beq.n	8000fb2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000faa:	4313      	orrs	r3, r2
 8000fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbc:	2b40      	cmp	r3, #64	; 0x40
 8000fbe:	d04f      	beq.n	8001060 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fd2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	6912      	ldr	r2, [r2, #16]
 8000fd8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000fdc:	d003      	beq.n	8000fe6 <HAL_ADC_Init+0x136>
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6912      	ldr	r2, [r2, #16]
 8000fe2:	2a01      	cmp	r2, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_ADC_Init+0x13c>
 8000fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0x13e>
 8000fec:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000fee:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d125      	bne.n	800104c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001006:	2b00      	cmp	r3, #0
 8001008:	d114      	bne.n	8001034 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	3b01      	subs	r3, #1
 8001010:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001014:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	fa92 f2a2 	rbit	r2, r2
 800101c:	617a      	str	r2, [r7, #20]
  return result;
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	4093      	lsls	r3, r2
 8001028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800102c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800102e:	4313      	orrs	r3, r2
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
 8001032:	e00b      	b.n	800104c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f043 0220 	orr.w	r2, r3, #32
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001044:	f043 0201 	orr.w	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_ADC_Init+0x280>)
 8001054:	4013      	ands	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800105c:	430b      	orrs	r3, r1
 800105e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <HAL_ADC_Init+0x284>)
 8001068:	4013      	ands	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001070:	430b      	orrs	r3, r1
 8001072:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107c:	d003      	beq.n	8001086 <HAL_ADC_Init+0x1d6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d119      	bne.n	80010ba <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	3b01      	subs	r3, #1
 8001096:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800109a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	fa92 f2a2 	rbit	r2, r2
 80010a2:	60fa      	str	r2, [r7, #12]
  return result;
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	fa03 f202 	lsl.w	r2, r3, r2
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
 80010b8:	e007      	b.n	80010ca <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_ADC_Init+0x288>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d10b      	bne.n	80010f2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80010f0:	e014      	b.n	800111c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f023 0312 	bic.w	r3, r3, #18
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001114:	e002      	b.n	800111c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800111c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001120:	4618      	mov	r0, r3
 8001122:	3738      	adds	r7, #56	; 0x38
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40012700 	.word	0x40012700
 8001130:	fcfc16ff 	.word	0xfcfc16ff
 8001134:	c0fff189 	.word	0xc0fff189
 8001138:	bf80fffe 	.word	0xbf80fffe

0800113c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_ADC_ConfigChannel+0x20>
 8001158:	2302      	movs	r3, #2
 800115a:	e14f      	b.n	80013fc <HAL_ADC_ConfigChannel+0x2c0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b06      	cmp	r3, #6
 800116a:	d81c      	bhi.n	80011a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b05      	subs	r3, #5
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	3b05      	subs	r3, #5
 8001198:	fa00 f203 	lsl.w	r2, r0, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
 80011a4:	e07e      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d81c      	bhi.n	80011e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b23      	subs	r3, #35	; 0x23
 80011c0:	221f      	movs	r2, #31
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4019      	ands	r1, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b23      	subs	r3, #35	; 0x23
 80011da:	fa00 f203 	lsl.w	r2, r0, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e6:	e05d      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b12      	cmp	r3, #18
 80011ee:	d81c      	bhi.n	800122a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b41      	subs	r3, #65	; 0x41
 8001202:	221f      	movs	r2, #31
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	4019      	ands	r1, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	fa00 f203 	lsl.w	r2, r0, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
 8001228:	e03c      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b18      	cmp	r3, #24
 8001230:	d81c      	bhi.n	800126c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b5f      	subs	r3, #95	; 0x5f
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	4019      	ands	r1, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b5f      	subs	r3, #95	; 0x5f
 800125e:	fa00 f203 	lsl.w	r2, r0, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
 800126a:	e01b      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b7d      	subs	r3, #125	; 0x7d
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b7d      	subs	r3, #125	; 0x7d
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d81a      	bhi.n	80012e2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6959      	ldr	r1, [r3, #20]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	2207      	movs	r2, #7
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4019      	ands	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6898      	ldr	r0, [r3, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	fa00 f203 	lsl.w	r2, r0, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	e05d      	b.n	800139e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b13      	cmp	r3, #19
 80012e8:	d81c      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6919      	ldr	r1, [r3, #16]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	3b1e      	subs	r3, #30
 80012fc:	2207      	movs	r2, #7
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	4019      	ands	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6898      	ldr	r0, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	3b1e      	subs	r3, #30
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	e03c      	b.n	800139e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b1d      	cmp	r3, #29
 800132a:	d81c      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b3c      	subs	r3, #60	; 0x3c
 800133e:	2207      	movs	r2, #7
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	4019      	ands	r1, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6898      	ldr	r0, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	3b3c      	subs	r3, #60	; 0x3c
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	e01b      	b.n	800139e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	3b5a      	subs	r3, #90	; 0x5a
 8001378:	2207      	movs	r2, #7
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	4019      	ands	r1, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	3b5a      	subs	r3, #90	; 0x5a
 8001392:	fa00 f203 	lsl.w	r2, r0, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d003      	beq.n	80013ae <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d121      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_ADC_ConfigChannel+0x2cc>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11b      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_ConfigChannel+0x2cc>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_ADC_ConfigChannel+0x2cc>)
 80013c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013c4:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d111      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_ADC_ConfigChannel+0x2d0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_ADC_ConfigChannel+0x2d4>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40012700 	.word	0x40012700
 800140c:	20000004 	.word	0x20000004
 8001410:	431bde83 	.word	0x431bde83

08001414 <__NVIC_SetPriorityGrouping>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001646:	e160      	b.n	800190a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8152 	beq.w	8001904 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	2b02      	cmp	r3, #2
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 0201 	and.w	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d017      	beq.n	8001716 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d123      	bne.n	800176a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0203 	and.w	r2, r3, #3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80ac 	beq.w	8001904 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <HAL_GPIO_Init+0x2f8>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <HAL_GPIO_Init+0x2f8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_GPIO_Init+0x2f8>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80017c4:	4a59      	ldr	r2, [pc, #356]	; (800192c <HAL_GPIO_Init+0x2fc>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x300>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d025      	beq.n	800183c <HAL_GPIO_Init+0x20c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x304>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d01f      	beq.n	8001838 <HAL_GPIO_Init+0x208>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x308>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d019      	beq.n	8001834 <HAL_GPIO_Init+0x204>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x30c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d013      	beq.n	8001830 <HAL_GPIO_Init+0x200>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x310>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1fc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x314>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1f8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x318>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1f4>
 8001820:	2306      	movs	r3, #6
 8001822:	e00c      	b.n	800183e <HAL_GPIO_Init+0x20e>
 8001824:	2307      	movs	r3, #7
 8001826:	e00a      	b.n	800183e <HAL_GPIO_Init+0x20e>
 8001828:	2305      	movs	r3, #5
 800182a:	e008      	b.n	800183e <HAL_GPIO_Init+0x20e>
 800182c:	2304      	movs	r3, #4
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x20e>
 8001830:	2303      	movs	r3, #3
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x20e>
 8001834:	2302      	movs	r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x20e>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x20e>
 800183c:	2300      	movs	r3, #0
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800184e:	4937      	ldr	r1, [pc, #220]	; (800192c <HAL_GPIO_Init+0x2fc>)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_GPIO_Init+0x31c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001880:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_GPIO_Init+0x31c>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_GPIO_Init+0x31c>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_GPIO_Init+0x31c>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_GPIO_Init+0x31c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_GPIO_Init+0x31c>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_GPIO_Init+0x31c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_GPIO_Init+0x31c>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f ae97 	bne.w	8001648 <HAL_GPIO_Init+0x18>
  }
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40010000 	.word	0x40010000
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40021400 	.word	0x40021400
 8001948:	40021800 	.word	0x40021800
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe ff88 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e31d      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c2:	4b94      	ldr	r3, [pc, #592]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019cc:	4b91      	ldr	r3, [pc, #580]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d07b      	beq.n	8001ada <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d006      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d10f      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b87      	ldr	r3, [pc, #540]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x128>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d166      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e2f7      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x74>
 8001a16:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e02d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x96>
 8001a2c:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a78      	ldr	r2, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0xd0>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xb8>
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd0>
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a69      	ldr	r2, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fa08 	bl	8000e9c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fa04 	bl	8000e9c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e2ad      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe0>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f9f4 	bl	8000e9c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f9f0 	bl	8000e9c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e299      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aca:	4b52      	ldr	r3, [pc, #328]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x108>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d05a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_OscConfig+0x176>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d116      	bne.n	8001b26 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x160>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e276      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	493d      	ldr	r1, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b24:	e03a      	b.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d020      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x268>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9b2 	bl	8000e9c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9ae 	bl	8000e9c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e257      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	492a      	ldr	r1, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
 8001b6e:	e015      	b.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_RCC_OscConfig+0x268>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff f991 	bl	8000e9c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f98d 	bl	8000e9c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e236      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80b8 	beq.w	8001d1a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d170      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x218>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e21a      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1a      	ldr	r2, [r3, #32]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d921      	bls.n	8001c1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fc09 	bl	80023f4 <RCC_SetFlashLatencyFromMSIRange>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e208      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	4901      	ldr	r1, [pc, #4]	; (8001c14 <HAL_RCC_OscConfig+0x264>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e020      	b.n	8001c56 <HAL_RCC_OscConfig+0x2a6>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4b99      	ldr	r3, [pc, #612]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4996      	ldr	r1, [pc, #600]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b95      	ldr	r3, [pc, #596]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	4991      	ldr	r1, [pc, #580]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fbd4 	bl	80023f4 <RCC_SetFlashLatencyFromMSIRange>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1d3      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c66:	4a87      	ldr	r2, [pc, #540]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001c68:	6892      	ldr	r2, [r2, #8]
 8001c6a:	0912      	lsrs	r2, r2, #4
 8001c6c:	f002 020f 	and.w	r2, r2, #15
 8001c70:	4985      	ldr	r1, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	5c8a      	ldrb	r2, [r1, r2]
 8001c74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c76:	4a85      	ldr	r2, [pc, #532]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c7a:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <HAL_RCC_OscConfig+0x4e0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f8c0 	bl	8000e04 <HAL_InitTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d045      	beq.n	8001d1a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	e1b5      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d029      	beq.n	8001cee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x4e4>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f8fc 	bl	8000e9c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f8f8 	bl	8000e9c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1a1      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	496c      	ldr	r1, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	4967      	ldr	r1, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x4e4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f8d2 	bl	8000e9c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f8ce 	bl	8000e9c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e177      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d030      	beq.n	8001d88 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <HAL_RCC_OscConfig+0x4e8>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff f8b2 	bl	8000e9c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f8ae 	bl	8000e9c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e157      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x38c>
 8001d5a:	e015      	b.n	8001d88 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <HAL_RCC_OscConfig+0x4e8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff f89b 	bl	8000e9c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff f897 	bl	8000e9c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e140      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d7c:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80b5 	beq.w	8001f00 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6253      	str	r3, [r2, #36]	; 0x24
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a32      	ldr	r2, [pc, #200]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f85f 	bl	8000e9c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff f85b 	bl	8000e9c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e104      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_OscConfig+0x4ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x466>
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6353      	str	r3, [r2, #52]	; 0x34
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x4c2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x488>
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e28:	6353      	str	r3, [r2, #52]	; 0x34
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e34:	6353      	str	r3, [r2, #52]	; 0x34
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4c2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	6353      	str	r3, [r2, #52]	; 0x34
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x4c2>
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e64:	6353      	str	r3, [r2, #52]	; 0x34
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x4d4>)
 8001e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e70:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d024      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f80f 	bl	8000e9c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e80:	e019      	b.n	8001eb6 <HAL_RCC_OscConfig+0x506>
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08004060 	.word	0x08004060
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	20000008 	.word	0x20000008
 8001e94:	42470020 	.word	0x42470020
 8001e98:	42470680 	.word	0x42470680
 8001e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7fe fffc 	bl	8000e9c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0a3      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4f0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe ffea 	bl	8000e9c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7fe ffe6 	bl	8000e9c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e08d      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	4a43      	ldr	r2, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d079      	beq.n	8001ffc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d056      	beq.n	8001fbc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d13b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_RCC_OscConfig+0x65c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ffbe 	bl	8000e9c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe ffba 	bl	8000e9c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e063      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	4319      	orrs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	492b      	ldr	r1, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_OscConfig+0x65c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe ff99 	bl	8000e9c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ff95 	bl	8000e9c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e03e      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x5be>
 8001f8c:	e036      	b.n	8001ffc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_RCC_OscConfig+0x65c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe ff82 	bl	8000e9c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe ff7e 	bl	8000e9c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e027      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x5ec>
 8001fba:	e01f      	b.n	8001ffc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e01a      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCC_OscConfig+0x658>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	42470060 	.word	0x42470060

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e11a      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d919      	bls.n	8002066 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_ClockConfig+0x34>
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a89      	ldr	r2, [pc, #548]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b87      	ldr	r3, [pc, #540]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0201 	bic.w	r2, r3, #1
 800204c:	4985      	ldr	r1, [pc, #532]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0f9      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002072:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	497a      	ldr	r1, [pc, #488]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 808e 	beq.w	80021ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0d7      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0cb      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0bf      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0b7      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	495c      	ldr	r1, [pc, #368]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fece 	bl	8000e9c <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d112      	bne.n	8002130 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fec6 	bl	8000e9c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e09b      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d1ee      	bne.n	800210c <HAL_RCC_ClockConfig+0xfc>
 800212e:	e03e      	b.n	80021ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d112      	bne.n	800215e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe feaf 	bl	8000e9c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e084      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	4b45      	ldr	r3, [pc, #276]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d1ee      	bne.n	800213a <HAL_RCC_ClockConfig+0x12a>
 800215c:	e027      	b.n	80021ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d11d      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe fe98 	bl	8000e9c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e06d      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	4b3a      	ldr	r3, [pc, #232]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d1ee      	bne.n	8002168 <HAL_RCC_ClockConfig+0x158>
 800218a:	e010      	b.n	80021ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fe86 	bl	8000e9c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e05b      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ee      	bne.n	800218c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d219      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_ClockConfig+0x1be>
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0201 	bic.w	r2, r3, #1
 80021d6:	4923      	ldr	r1, [pc, #140]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_ClockConfig+0x254>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e034      	b.n	800225a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4917      	ldr	r1, [pc, #92]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490f      	ldr	r1, [pc, #60]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f823 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_ClockConfig+0x258>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490b      	ldr	r1, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x25c>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x260>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x264>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fdd8 	bl	8000e04 <HAL_InitTick>
 8002254:	4603      	mov	r3, r0
 8002256:	72fb      	strb	r3, [r7, #11]

  return status;
 8002258:	7afb      	ldrb	r3, [r7, #11]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023c00 	.word	0x40023c00
 8002268:	40023800 	.word	0x40023800
 800226c:	08004060 	.word	0x08004060
 8002270:	20000004 	.word	0x20000004
 8002274:	20000008 	.word	0x20000008

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800227c:	b08e      	sub	sp, #56	; 0x38
 800227e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d00d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	2b0c      	cmp	r3, #12
 8002292:	f200 8092 	bhi.w	80023ba <HAL_RCC_GetSysClockFreq+0x142>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x28>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x2e>
 800229e:	e08c      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x170>)
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a4:	e097      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a6:	4b51      	ldr	r3, [pc, #324]	; (80023ec <HAL_RCC_GetSysClockFreq+0x174>)
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022aa:	e094      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x178>)
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	0d9b      	lsrs	r3, r3, #22
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d021      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	2200      	movs	r2, #0
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	61fa      	str	r2, [r7, #28]
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_GetSysClockFreq+0x174>)
 80022dc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80022e0:	464a      	mov	r2, r9
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	2300      	movs	r3, #0
 80022e8:	4644      	mov	r4, r8
 80022ea:	fb04 f303 	mul.w	r3, r4, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	4a3e      	ldr	r2, [pc, #248]	; (80023ec <HAL_RCC_GetSysClockFreq+0x174>)
 80022f2:	4644      	mov	r4, r8
 80022f4:	fba4 0102 	umull	r0, r1, r4, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	4619      	mov	r1, r3
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	2200      	movs	r2, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	617a      	str	r2, [r7, #20]
 8002304:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002308:	f7fd ff38 	bl	800017c <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
 8002314:	e04e      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	2200      	movs	r2, #0
 800231a:	469a      	mov	sl, r3
 800231c:	4693      	mov	fp, r2
 800231e:	4652      	mov	r2, sl
 8002320:	465b      	mov	r3, fp
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	0159      	lsls	r1, r3, #5
 800232c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002330:	0150      	lsls	r0, r2, #5
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ebb2 080a 	subs.w	r8, r2, sl
 800233a:	eb63 090b 	sbc.w	r9, r3, fp
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800234a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800234e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002352:	ebb2 0408 	subs.w	r4, r2, r8
 8002356:	eb63 0509 	sbc.w	r5, r3, r9
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	00eb      	lsls	r3, r5, #3
 8002364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002368:	00e2      	lsls	r2, r4, #3
 800236a:	4614      	mov	r4, r2
 800236c:	461d      	mov	r5, r3
 800236e:	eb14 030a 	adds.w	r3, r4, sl
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	eb45 030b 	adc.w	r3, r5, fp
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002386:	4629      	mov	r1, r5
 8002388:	028b      	lsls	r3, r1, #10
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	4604      	mov	r4, r0
 8002390:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002394:	4601      	mov	r1, r0
 8002396:	028a      	lsls	r2, r1, #10
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2200      	movs	r2, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023a8:	f7fd fee8 	bl	800017c <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023b8:	e00d      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0b5b      	lsrs	r3, r3, #13
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	3301      	adds	r3, #1
 80023ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3738      	adds	r7, #56	; 0x38
 80023dc:	46bd      	mov	sp, r7
 80023de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	016e3600 	.word	0x016e3600
 80023f0:	08004054 	.word	0x08004054

080023f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12c      	bne.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e016      	b.n	8002452 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6253      	str	r3, [r2, #36]	; 0x24
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002444:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002458:	d105      	bne.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002460:	d101      	bne.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002462:	2301      	movs	r3, #1
 8002464:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 0201 	bic.w	r2, r3, #1
 8002480:	490b      	ldr	r1, [pc, #44]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07b      	b.n	80025be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d009      	beq.n	80024ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
 80024de:	e005      	b.n	80024ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe faa0 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002522:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	ea42 0103 	orr.w	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0104 	and.w	r1, r3, #4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f003 0210 	and.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e031      	b.n	800263c <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fe fa71 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f000 faf7 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e031      	b.n	80026ba <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f829 	bl	80026c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f000 fab8 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0202 	mvn.w	r2, #2
 8002700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa53 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa46 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fa55 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0204 	mvn.w	r2, #4
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa29 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa1c 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fa2b 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b08      	cmp	r3, #8
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0208 	mvn.w	r2, #8
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2204      	movs	r2, #4
 80027ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9ff 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f9f2 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa01 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d122      	bne.n	800282c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d11b      	bne.n	800282c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0210 	mvn.w	r2, #16
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2208      	movs	r2, #8
 8002802:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9d5 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9c8 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f9d7 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0201 	mvn.w	r2, #1
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f9a3 	bl	8002b9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9b1 	bl	8002be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0ae      	b.n	8002a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	f200 809f 	bhi.w	80029f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080029f9 	.word	0x080029f9
 80028c8:	080029f9 	.word	0x080029f9
 80028cc:	080029f9 	.word	0x080029f9
 80028d0:	08002935 	.word	0x08002935
 80028d4:	080029f9 	.word	0x080029f9
 80028d8:	080029f9 	.word	0x080029f9
 80028dc:	080029f9 	.word	0x080029f9
 80028e0:	08002977 	.word	0x08002977
 80028e4:	080029f9 	.word	0x080029f9
 80028e8:	080029f9 	.word	0x080029f9
 80028ec:	080029f9 	.word	0x080029f9
 80028f0:	080029b7 	.word	0x080029b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f9ec 	bl	8002cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0208 	orr.w	r2, r2, #8
 800290e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0204 	bic.w	r2, r2, #4
 800291e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6999      	ldr	r1, [r3, #24]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	619a      	str	r2, [r3, #24]
      break;
 8002932:	e064      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa08 	bl	8002d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	619a      	str	r2, [r3, #24]
      break;
 8002974:	e043      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fa25 	bl	8002dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0208 	orr.w	r2, r2, #8
 8002990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0204 	bic.w	r2, r2, #4
 80029a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69d9      	ldr	r1, [r3, #28]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]
      break;
 80029b4:	e023      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa42 	bl	8002e46 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	61da      	str	r2, [r3, #28]
      break;
 80029f6:	e002      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
      break;
 80029fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_ConfigClockSource+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0b4      	b.n	8002b96 <HAL_TIM_ConfigClockSource+0x186>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d03e      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	f200 8087 	bhi.w	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	f000 8086 	beq.w	8002b82 <HAL_TIM_ConfigClockSource+0x172>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d87f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b70      	cmp	r3, #112	; 0x70
 8002a7e:	d01a      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8002a80:	2b70      	cmp	r3, #112	; 0x70
 8002a82:	d87b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b60      	cmp	r3, #96	; 0x60
 8002a86:	d050      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x11a>
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d877      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b50      	cmp	r3, #80	; 0x50
 8002a8e:	d03c      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xfa>
 8002a90:	2b50      	cmp	r3, #80	; 0x50
 8002a92:	d873      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d058      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x13a>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d86f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b30      	cmp	r3, #48	; 0x30
 8002a9e:	d064      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d86b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d060      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d867      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05c      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d05a      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	e062      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	f000 fa73 	bl	8002fb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	609a      	str	r2, [r3, #8]
      break;
 8002ae2:	e04f      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	f000 fa5c 	bl	8002fb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b06:	609a      	str	r2, [r3, #8]
      break;
 8002b08:	e03c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f9d3 	bl	8002ec2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2150      	movs	r1, #80	; 0x50
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa2a 	bl	8002f7c <TIM_ITRx_SetConfig>
      break;
 8002b28:	e02c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f9f1 	bl	8002f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2160      	movs	r1, #96	; 0x60
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fa1a 	bl	8002f7c <TIM_ITRx_SetConfig>
      break;
 8002b48:	e01c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 f9b3 	bl	8002ec2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2140      	movs	r1, #64	; 0x40
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa0a 	bl	8002f7c <TIM_ITRx_SetConfig>
      break;
 8002b68:	e00c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f000 fa01 	bl	8002f7c <TIM_ITRx_SetConfig>
      break;
 8002b7a:	e003      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e000      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d00f      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0xc8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00b      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <TIM_Base_SetConfig+0xcc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0xd0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <TIM_Base_SetConfig+0xd4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <TIM_Base_SetConfig+0xc8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <TIM_Base_SetConfig+0xcc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <TIM_Base_SetConfig+0xd0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <TIM_Base_SetConfig+0xd4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <TIM_Base_SetConfig+0xd8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x82>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <TIM_Base_SetConfig+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	40011000 	.word	0x40011000

08002cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 0201 	bic.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 0302 	bic.w	r3, r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 0210 	bic.w	r2, r3, #16
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0320 	bic.w	r3, r3, #32
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	031b      	lsls	r3, r3, #12
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 0201 	bic.w	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 030a 	bic.w	r3, r3, #10
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 0210 	bic.w	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f043 0307 	orr.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	609a      	str	r2, [r3, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003004:	2302      	movs	r3, #2
 8003006:	e046      	b.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d00e      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4313      	orrs	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40010800 	.word	0x40010800

080030ac <std>:
 80030ac:	2300      	movs	r3, #0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
 80030b2:	e9c0 3300 	strd	r3, r3, [r0]
 80030b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ba:	6083      	str	r3, [r0, #8]
 80030bc:	8181      	strh	r1, [r0, #12]
 80030be:	6643      	str	r3, [r0, #100]	; 0x64
 80030c0:	81c2      	strh	r2, [r0, #14]
 80030c2:	6183      	str	r3, [r0, #24]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2208      	movs	r2, #8
 80030c8:	305c      	adds	r0, #92	; 0x5c
 80030ca:	f000 f9f7 	bl	80034bc <memset>
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <std+0x58>)
 80030d0:	6224      	str	r4, [r4, #32]
 80030d2:	6263      	str	r3, [r4, #36]	; 0x24
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <std+0x5c>)
 80030d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <std+0x60>)
 80030da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <std+0x64>)
 80030de:	6323      	str	r3, [r4, #48]	; 0x30
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <std+0x68>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d006      	beq.n	80030f4 <std+0x48>
 80030e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80030ea:	4294      	cmp	r4, r2
 80030ec:	d002      	beq.n	80030f4 <std+0x48>
 80030ee:	33d0      	adds	r3, #208	; 0xd0
 80030f0:	429c      	cmp	r4, r3
 80030f2:	d105      	bne.n	8003100 <std+0x54>
 80030f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fc:	f000 ba56 	b.w	80035ac <__retarget_lock_init_recursive>
 8003100:	bd10      	pop	{r4, pc}
 8003102:	bf00      	nop
 8003104:	0800330d 	.word	0x0800330d
 8003108:	0800332f 	.word	0x0800332f
 800310c:	08003367 	.word	0x08003367
 8003110:	0800338b 	.word	0x0800338b
 8003114:	2000017c 	.word	0x2000017c

08003118 <stdio_exit_handler>:
 8003118:	4a02      	ldr	r2, [pc, #8]	; (8003124 <stdio_exit_handler+0xc>)
 800311a:	4903      	ldr	r1, [pc, #12]	; (8003128 <stdio_exit_handler+0x10>)
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <stdio_exit_handler+0x14>)
 800311e:	f000 b869 	b.w	80031f4 <_fwalk_sglue>
 8003122:	bf00      	nop
 8003124:	20000010 	.word	0x20000010
 8003128:	08003e4d 	.word	0x08003e4d
 800312c:	2000001c 	.word	0x2000001c

08003130 <cleanup_stdio>:
 8003130:	6841      	ldr	r1, [r0, #4]
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <cleanup_stdio+0x34>)
 8003134:	b510      	push	{r4, lr}
 8003136:	4299      	cmp	r1, r3
 8003138:	4604      	mov	r4, r0
 800313a:	d001      	beq.n	8003140 <cleanup_stdio+0x10>
 800313c:	f000 fe86 	bl	8003e4c <_fflush_r>
 8003140:	68a1      	ldr	r1, [r4, #8]
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <cleanup_stdio+0x38>)
 8003144:	4299      	cmp	r1, r3
 8003146:	d002      	beq.n	800314e <cleanup_stdio+0x1e>
 8003148:	4620      	mov	r0, r4
 800314a:	f000 fe7f 	bl	8003e4c <_fflush_r>
 800314e:	68e1      	ldr	r1, [r4, #12]
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <cleanup_stdio+0x3c>)
 8003152:	4299      	cmp	r1, r3
 8003154:	d004      	beq.n	8003160 <cleanup_stdio+0x30>
 8003156:	4620      	mov	r0, r4
 8003158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800315c:	f000 be76 	b.w	8003e4c <_fflush_r>
 8003160:	bd10      	pop	{r4, pc}
 8003162:	bf00      	nop
 8003164:	2000017c 	.word	0x2000017c
 8003168:	200001e4 	.word	0x200001e4
 800316c:	2000024c 	.word	0x2000024c

08003170 <global_stdio_init.part.0>:
 8003170:	b510      	push	{r4, lr}
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <global_stdio_init.part.0+0x30>)
 8003174:	4c0b      	ldr	r4, [pc, #44]	; (80031a4 <global_stdio_init.part.0+0x34>)
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <global_stdio_init.part.0+0x38>)
 8003178:	4620      	mov	r0, r4
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	2104      	movs	r1, #4
 800317e:	2200      	movs	r2, #0
 8003180:	f7ff ff94 	bl	80030ac <std>
 8003184:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003188:	2201      	movs	r2, #1
 800318a:	2109      	movs	r1, #9
 800318c:	f7ff ff8e 	bl	80030ac <std>
 8003190:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003194:	2202      	movs	r2, #2
 8003196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319a:	2112      	movs	r1, #18
 800319c:	f7ff bf86 	b.w	80030ac <std>
 80031a0:	200002b4 	.word	0x200002b4
 80031a4:	2000017c 	.word	0x2000017c
 80031a8:	08003119 	.word	0x08003119

080031ac <__sfp_lock_acquire>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sfp_lock_acquire+0x8>)
 80031ae:	f000 b9fe 	b.w	80035ae <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	200002bd 	.word	0x200002bd

080031b8 <__sfp_lock_release>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sfp_lock_release+0x8>)
 80031ba:	f000 b9f9 	b.w	80035b0 <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	200002bd 	.word	0x200002bd

080031c4 <__sinit>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	f7ff fff0 	bl	80031ac <__sfp_lock_acquire>
 80031cc:	6a23      	ldr	r3, [r4, #32]
 80031ce:	b11b      	cbz	r3, 80031d8 <__sinit+0x14>
 80031d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d4:	f7ff bff0 	b.w	80031b8 <__sfp_lock_release>
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <__sinit+0x28>)
 80031da:	6223      	str	r3, [r4, #32]
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <__sinit+0x2c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f5      	bne.n	80031d0 <__sinit+0xc>
 80031e4:	f7ff ffc4 	bl	8003170 <global_stdio_init.part.0>
 80031e8:	e7f2      	b.n	80031d0 <__sinit+0xc>
 80031ea:	bf00      	nop
 80031ec:	08003131 	.word	0x08003131
 80031f0:	200002b4 	.word	0x200002b4

080031f4 <_fwalk_sglue>:
 80031f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f8:	4607      	mov	r7, r0
 80031fa:	4688      	mov	r8, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	2600      	movs	r6, #0
 8003200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003204:	f1b9 0901 	subs.w	r9, r9, #1
 8003208:	d505      	bpl.n	8003216 <_fwalk_sglue+0x22>
 800320a:	6824      	ldr	r4, [r4, #0]
 800320c:	2c00      	cmp	r4, #0
 800320e:	d1f7      	bne.n	8003200 <_fwalk_sglue+0xc>
 8003210:	4630      	mov	r0, r6
 8003212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003216:	89ab      	ldrh	r3, [r5, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d907      	bls.n	800322c <_fwalk_sglue+0x38>
 800321c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003220:	3301      	adds	r3, #1
 8003222:	d003      	beq.n	800322c <_fwalk_sglue+0x38>
 8003224:	4629      	mov	r1, r5
 8003226:	4638      	mov	r0, r7
 8003228:	47c0      	blx	r8
 800322a:	4306      	orrs	r6, r0
 800322c:	3568      	adds	r5, #104	; 0x68
 800322e:	e7e9      	b.n	8003204 <_fwalk_sglue+0x10>

08003230 <iprintf>:
 8003230:	b40f      	push	{r0, r1, r2, r3}
 8003232:	b507      	push	{r0, r1, r2, lr}
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <iprintf+0x20>)
 8003236:	ab04      	add	r3, sp, #16
 8003238:	6808      	ldr	r0, [r1, #0]
 800323a:	f853 2b04 	ldr.w	r2, [r3], #4
 800323e:	6881      	ldr	r1, [r0, #8]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	f000 fad3 	bl	80037ec <_vfiprintf_r>
 8003246:	b003      	add	sp, #12
 8003248:	f85d eb04 	ldr.w	lr, [sp], #4
 800324c:	b004      	add	sp, #16
 800324e:	4770      	bx	lr
 8003250:	20000068 	.word	0x20000068

08003254 <_puts_r>:
 8003254:	6a03      	ldr	r3, [r0, #32]
 8003256:	b570      	push	{r4, r5, r6, lr}
 8003258:	4605      	mov	r5, r0
 800325a:	460e      	mov	r6, r1
 800325c:	6884      	ldr	r4, [r0, #8]
 800325e:	b90b      	cbnz	r3, 8003264 <_puts_r+0x10>
 8003260:	f7ff ffb0 	bl	80031c4 <__sinit>
 8003264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003266:	07db      	lsls	r3, r3, #31
 8003268:	d405      	bmi.n	8003276 <_puts_r+0x22>
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	0598      	lsls	r0, r3, #22
 800326e:	d402      	bmi.n	8003276 <_puts_r+0x22>
 8003270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003272:	f000 f99c 	bl	80035ae <__retarget_lock_acquire_recursive>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	0719      	lsls	r1, r3, #28
 800327a:	d513      	bpl.n	80032a4 <_puts_r+0x50>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	b18b      	cbz	r3, 80032a4 <_puts_r+0x50>
 8003280:	3e01      	subs	r6, #1
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003288:	3b01      	subs	r3, #1
 800328a:	60a3      	str	r3, [r4, #8]
 800328c:	b9e9      	cbnz	r1, 80032ca <_puts_r+0x76>
 800328e:	2b00      	cmp	r3, #0
 8003290:	da2e      	bge.n	80032f0 <_puts_r+0x9c>
 8003292:	4622      	mov	r2, r4
 8003294:	210a      	movs	r1, #10
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f87b 	bl	8003392 <__swbuf_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d007      	beq.n	80032b0 <_puts_r+0x5c>
 80032a0:	250a      	movs	r5, #10
 80032a2:	e007      	b.n	80032b4 <_puts_r+0x60>
 80032a4:	4621      	mov	r1, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 f8b0 	bl	800340c <__swsetup_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d0e7      	beq.n	8003280 <_puts_r+0x2c>
 80032b0:	f04f 35ff 	mov.w	r5, #4294967295
 80032b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	d405      	bmi.n	80032c6 <_puts_r+0x72>
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	059b      	lsls	r3, r3, #22
 80032be:	d402      	bmi.n	80032c6 <_puts_r+0x72>
 80032c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c2:	f000 f975 	bl	80035b0 <__retarget_lock_release_recursive>
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da04      	bge.n	80032d8 <_puts_r+0x84>
 80032ce:	69a2      	ldr	r2, [r4, #24]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dc06      	bgt.n	80032e2 <_puts_r+0x8e>
 80032d4:	290a      	cmp	r1, #10
 80032d6:	d004      	beq.n	80032e2 <_puts_r+0x8e>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	7019      	strb	r1, [r3, #0]
 80032e0:	e7cf      	b.n	8003282 <_puts_r+0x2e>
 80032e2:	4622      	mov	r2, r4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f000 f854 	bl	8003392 <__swbuf_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	d1c9      	bne.n	8003282 <_puts_r+0x2e>
 80032ee:	e7df      	b.n	80032b0 <_puts_r+0x5c>
 80032f0:	250a      	movs	r5, #10
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	6022      	str	r2, [r4, #0]
 80032f8:	701d      	strb	r5, [r3, #0]
 80032fa:	e7db      	b.n	80032b4 <_puts_r+0x60>

080032fc <puts>:
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <puts+0xc>)
 80032fe:	4601      	mov	r1, r0
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f7ff bfa7 	b.w	8003254 <_puts_r>
 8003306:	bf00      	nop
 8003308:	20000068 	.word	0x20000068

0800330c <__sread>:
 800330c:	b510      	push	{r4, lr}
 800330e:	460c      	mov	r4, r1
 8003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003314:	f000 f8fc 	bl	8003510 <_read_r>
 8003318:	2800      	cmp	r0, #0
 800331a:	bfab      	itete	ge
 800331c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800331e:	89a3      	ldrhlt	r3, [r4, #12]
 8003320:	181b      	addge	r3, r3, r0
 8003322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003326:	bfac      	ite	ge
 8003328:	6563      	strge	r3, [r4, #84]	; 0x54
 800332a:	81a3      	strhlt	r3, [r4, #12]
 800332c:	bd10      	pop	{r4, pc}

0800332e <__swrite>:
 800332e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003332:	461f      	mov	r7, r3
 8003334:	898b      	ldrh	r3, [r1, #12]
 8003336:	4605      	mov	r5, r0
 8003338:	05db      	lsls	r3, r3, #23
 800333a:	460c      	mov	r4, r1
 800333c:	4616      	mov	r6, r2
 800333e:	d505      	bpl.n	800334c <__swrite+0x1e>
 8003340:	2302      	movs	r3, #2
 8003342:	2200      	movs	r2, #0
 8003344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003348:	f000 f8d0 	bl	80034ec <_lseek_r>
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	4632      	mov	r2, r6
 8003350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003354:	81a3      	strh	r3, [r4, #12]
 8003356:	4628      	mov	r0, r5
 8003358:	463b      	mov	r3, r7
 800335a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800335e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003362:	f000 b8e7 	b.w	8003534 <_write_r>

08003366 <__sseek>:
 8003366:	b510      	push	{r4, lr}
 8003368:	460c      	mov	r4, r1
 800336a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336e:	f000 f8bd 	bl	80034ec <_lseek_r>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	bf15      	itete	ne
 8003378:	6560      	strne	r0, [r4, #84]	; 0x54
 800337a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800337e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003382:	81a3      	strheq	r3, [r4, #12]
 8003384:	bf18      	it	ne
 8003386:	81a3      	strhne	r3, [r4, #12]
 8003388:	bd10      	pop	{r4, pc}

0800338a <__sclose>:
 800338a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338e:	f000 b89d 	b.w	80034cc <_close_r>

08003392 <__swbuf_r>:
 8003392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003394:	460e      	mov	r6, r1
 8003396:	4614      	mov	r4, r2
 8003398:	4605      	mov	r5, r0
 800339a:	b118      	cbz	r0, 80033a4 <__swbuf_r+0x12>
 800339c:	6a03      	ldr	r3, [r0, #32]
 800339e:	b90b      	cbnz	r3, 80033a4 <__swbuf_r+0x12>
 80033a0:	f7ff ff10 	bl	80031c4 <__sinit>
 80033a4:	69a3      	ldr	r3, [r4, #24]
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	071a      	lsls	r2, r3, #28
 80033ac:	d525      	bpl.n	80033fa <__swbuf_r+0x68>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	b31b      	cbz	r3, 80033fa <__swbuf_r+0x68>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	b2f6      	uxtb	r6, r6
 80033b8:	1a98      	subs	r0, r3, r2
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	4637      	mov	r7, r6
 80033be:	4283      	cmp	r3, r0
 80033c0:	dc04      	bgt.n	80033cc <__swbuf_r+0x3a>
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 fd41 	bl	8003e4c <_fflush_r>
 80033ca:	b9e0      	cbnz	r0, 8003406 <__swbuf_r+0x74>
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	701e      	strb	r6, [r3, #0]
 80033da:	6962      	ldr	r2, [r4, #20]
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	429a      	cmp	r2, r3
 80033e0:	d004      	beq.n	80033ec <__swbuf_r+0x5a>
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	07db      	lsls	r3, r3, #31
 80033e6:	d506      	bpl.n	80033f6 <__swbuf_r+0x64>
 80033e8:	2e0a      	cmp	r6, #10
 80033ea:	d104      	bne.n	80033f6 <__swbuf_r+0x64>
 80033ec:	4621      	mov	r1, r4
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 fd2c 	bl	8003e4c <_fflush_r>
 80033f4:	b938      	cbnz	r0, 8003406 <__swbuf_r+0x74>
 80033f6:	4638      	mov	r0, r7
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 f805 	bl	800340c <__swsetup_r>
 8003402:	2800      	cmp	r0, #0
 8003404:	d0d5      	beq.n	80033b2 <__swbuf_r+0x20>
 8003406:	f04f 37ff 	mov.w	r7, #4294967295
 800340a:	e7f4      	b.n	80033f6 <__swbuf_r+0x64>

0800340c <__swsetup_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <__swsetup_r+0xac>)
 8003410:	4605      	mov	r5, r0
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	460c      	mov	r4, r1
 8003416:	b118      	cbz	r0, 8003420 <__swsetup_r+0x14>
 8003418:	6a03      	ldr	r3, [r0, #32]
 800341a:	b90b      	cbnz	r3, 8003420 <__swsetup_r+0x14>
 800341c:	f7ff fed2 	bl	80031c4 <__sinit>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003426:	0718      	lsls	r0, r3, #28
 8003428:	d422      	bmi.n	8003470 <__swsetup_r+0x64>
 800342a:	06d9      	lsls	r1, r3, #27
 800342c:	d407      	bmi.n	800343e <__swsetup_r+0x32>
 800342e:	2309      	movs	r3, #9
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003436:	f04f 30ff 	mov.w	r0, #4294967295
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	e034      	b.n	80034a8 <__swsetup_r+0x9c>
 800343e:	0758      	lsls	r0, r3, #29
 8003440:	d512      	bpl.n	8003468 <__swsetup_r+0x5c>
 8003442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003444:	b141      	cbz	r1, 8003458 <__swsetup_r+0x4c>
 8003446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344a:	4299      	cmp	r1, r3
 800344c:	d002      	beq.n	8003454 <__swsetup_r+0x48>
 800344e:	4628      	mov	r0, r5
 8003450:	f000 f8b0 	bl	80035b4 <_free_r>
 8003454:	2300      	movs	r3, #0
 8003456:	6363      	str	r3, [r4, #52]	; 0x34
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	2300      	movs	r3, #0
 8003462:	6063      	str	r3, [r4, #4]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	b94b      	cbnz	r3, 8003488 <__swsetup_r+0x7c>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800347a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347e:	d003      	beq.n	8003488 <__swsetup_r+0x7c>
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 fd2f 	bl	8003ee6 <__smakebuf_r>
 8003488:	89a0      	ldrh	r0, [r4, #12]
 800348a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800348e:	f010 0301 	ands.w	r3, r0, #1
 8003492:	d00a      	beq.n	80034aa <__swsetup_r+0x9e>
 8003494:	2300      	movs	r3, #0
 8003496:	60a3      	str	r3, [r4, #8]
 8003498:	6963      	ldr	r3, [r4, #20]
 800349a:	425b      	negs	r3, r3
 800349c:	61a3      	str	r3, [r4, #24]
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	b943      	cbnz	r3, 80034b4 <__swsetup_r+0xa8>
 80034a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034a6:	d1c4      	bne.n	8003432 <__swsetup_r+0x26>
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	0781      	lsls	r1, r0, #30
 80034ac:	bf58      	it	pl
 80034ae:	6963      	ldrpl	r3, [r4, #20]
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	e7f4      	b.n	800349e <__swsetup_r+0x92>
 80034b4:	2000      	movs	r0, #0
 80034b6:	e7f7      	b.n	80034a8 <__swsetup_r+0x9c>
 80034b8:	20000068 	.word	0x20000068

080034bc <memset>:
 80034bc:	4603      	mov	r3, r0
 80034be:	4402      	add	r2, r0
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d100      	bne.n	80034c6 <memset+0xa>
 80034c4:	4770      	bx	lr
 80034c6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ca:	e7f9      	b.n	80034c0 <memset+0x4>

080034cc <_close_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	2300      	movs	r3, #0
 80034d0:	4d05      	ldr	r5, [pc, #20]	; (80034e8 <_close_r+0x1c>)
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	f7fd fbe9 	bl	8000cae <_close>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_close_r+0x1a>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_close_r+0x1a>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200002b8 	.word	0x200002b8

080034ec <_lseek_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	2200      	movs	r2, #0
 80034f6:	4d05      	ldr	r5, [pc, #20]	; (800350c <_lseek_r+0x20>)
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7fd fbfb 	bl	8000cf6 <_lseek>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_lseek_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_lseek_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200002b8 	.word	0x200002b8

08003510 <_read_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4604      	mov	r4, r0
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	2200      	movs	r2, #0
 800351a:	4d05      	ldr	r5, [pc, #20]	; (8003530 <_read_r+0x20>)
 800351c:	602a      	str	r2, [r5, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	f7fd fba8 	bl	8000c74 <_read>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_read_r+0x1e>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	b103      	cbz	r3, 800352e <_read_r+0x1e>
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	200002b8 	.word	0x200002b8

08003534 <_write_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	2200      	movs	r2, #0
 800353e:	4d05      	ldr	r5, [pc, #20]	; (8003554 <_write_r+0x20>)
 8003540:	602a      	str	r2, [r5, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f7fd f99a 	bl	800087c <_write>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_write_r+0x1e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_write_r+0x1e>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200002b8 	.word	0x200002b8

08003558 <__errno>:
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <__errno+0x8>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000068 	.word	0x20000068

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	2600      	movs	r6, #0
 8003568:	4d0c      	ldr	r5, [pc, #48]	; (800359c <__libc_init_array+0x38>)
 800356a:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356c:	1b64      	subs	r4, r4, r5
 800356e:	10a4      	asrs	r4, r4, #2
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	f000 fd34 	bl	8003fe0 <_init>
 8003578:	2600      	movs	r6, #0
 800357a:	4d0a      	ldr	r5, [pc, #40]	; (80035a4 <__libc_init_array+0x40>)
 800357c:	4c0a      	ldr	r4, [pc, #40]	; (80035a8 <__libc_init_array+0x44>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	f855 3b04 	ldr.w	r3, [r5], #4
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	f855 3b04 	ldr.w	r3, [r5], #4
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	080040ac 	.word	0x080040ac
 80035a0:	080040ac 	.word	0x080040ac
 80035a4:	080040ac 	.word	0x080040ac
 80035a8:	080040b0 	.word	0x080040b0

080035ac <__retarget_lock_init_recursive>:
 80035ac:	4770      	bx	lr

080035ae <__retarget_lock_acquire_recursive>:
 80035ae:	4770      	bx	lr

080035b0 <__retarget_lock_release_recursive>:
 80035b0:	4770      	bx	lr
	...

080035b4 <_free_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4605      	mov	r5, r0
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d040      	beq.n	800363e <_free_r+0x8a>
 80035bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c0:	1f0c      	subs	r4, r1, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfb8      	it	lt
 80035c6:	18e4      	addlt	r4, r4, r3
 80035c8:	f000 f8dc 	bl	8003784 <__malloc_lock>
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <_free_r+0x8c>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	b933      	cbnz	r3, 80035e0 <_free_r+0x2c>
 80035d2:	6063      	str	r3, [r4, #4]
 80035d4:	6014      	str	r4, [r2, #0]
 80035d6:	4628      	mov	r0, r5
 80035d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035dc:	f000 b8d8 	b.w	8003790 <__malloc_unlock>
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	d908      	bls.n	80035f6 <_free_r+0x42>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	1821      	adds	r1, r4, r0
 80035e8:	428b      	cmp	r3, r1
 80035ea:	bf01      	itttt	eq
 80035ec:	6819      	ldreq	r1, [r3, #0]
 80035ee:	685b      	ldreq	r3, [r3, #4]
 80035f0:	1809      	addeq	r1, r1, r0
 80035f2:	6021      	streq	r1, [r4, #0]
 80035f4:	e7ed      	b.n	80035d2 <_free_r+0x1e>
 80035f6:	461a      	mov	r2, r3
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b10b      	cbz	r3, 8003600 <_free_r+0x4c>
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d9fa      	bls.n	80035f6 <_free_r+0x42>
 8003600:	6811      	ldr	r1, [r2, #0]
 8003602:	1850      	adds	r0, r2, r1
 8003604:	42a0      	cmp	r0, r4
 8003606:	d10b      	bne.n	8003620 <_free_r+0x6c>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	4401      	add	r1, r0
 800360c:	1850      	adds	r0, r2, r1
 800360e:	4283      	cmp	r3, r0
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	d1e0      	bne.n	80035d6 <_free_r+0x22>
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4408      	add	r0, r1
 800361a:	6010      	str	r0, [r2, #0]
 800361c:	6053      	str	r3, [r2, #4]
 800361e:	e7da      	b.n	80035d6 <_free_r+0x22>
 8003620:	d902      	bls.n	8003628 <_free_r+0x74>
 8003622:	230c      	movs	r3, #12
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	e7d6      	b.n	80035d6 <_free_r+0x22>
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	1821      	adds	r1, r4, r0
 800362c:	428b      	cmp	r3, r1
 800362e:	bf01      	itttt	eq
 8003630:	6819      	ldreq	r1, [r3, #0]
 8003632:	685b      	ldreq	r3, [r3, #4]
 8003634:	1809      	addeq	r1, r1, r0
 8003636:	6021      	streq	r1, [r4, #0]
 8003638:	6063      	str	r3, [r4, #4]
 800363a:	6054      	str	r4, [r2, #4]
 800363c:	e7cb      	b.n	80035d6 <_free_r+0x22>
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	200002c0 	.word	0x200002c0

08003644 <sbrk_aligned>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4e0e      	ldr	r6, [pc, #56]	; (8003680 <sbrk_aligned+0x3c>)
 8003648:	460c      	mov	r4, r1
 800364a:	6831      	ldr	r1, [r6, #0]
 800364c:	4605      	mov	r5, r0
 800364e:	b911      	cbnz	r1, 8003656 <sbrk_aligned+0x12>
 8003650:	f000 fca8 	bl	8003fa4 <_sbrk_r>
 8003654:	6030      	str	r0, [r6, #0]
 8003656:	4621      	mov	r1, r4
 8003658:	4628      	mov	r0, r5
 800365a:	f000 fca3 	bl	8003fa4 <_sbrk_r>
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d00a      	beq.n	8003678 <sbrk_aligned+0x34>
 8003662:	1cc4      	adds	r4, r0, #3
 8003664:	f024 0403 	bic.w	r4, r4, #3
 8003668:	42a0      	cmp	r0, r4
 800366a:	d007      	beq.n	800367c <sbrk_aligned+0x38>
 800366c:	1a21      	subs	r1, r4, r0
 800366e:	4628      	mov	r0, r5
 8003670:	f000 fc98 	bl	8003fa4 <_sbrk_r>
 8003674:	3001      	adds	r0, #1
 8003676:	d101      	bne.n	800367c <sbrk_aligned+0x38>
 8003678:	f04f 34ff 	mov.w	r4, #4294967295
 800367c:	4620      	mov	r0, r4
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	200002c4 	.word	0x200002c4

08003684 <_malloc_r>:
 8003684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003688:	1ccd      	adds	r5, r1, #3
 800368a:	f025 0503 	bic.w	r5, r5, #3
 800368e:	3508      	adds	r5, #8
 8003690:	2d0c      	cmp	r5, #12
 8003692:	bf38      	it	cc
 8003694:	250c      	movcc	r5, #12
 8003696:	2d00      	cmp	r5, #0
 8003698:	4607      	mov	r7, r0
 800369a:	db01      	blt.n	80036a0 <_malloc_r+0x1c>
 800369c:	42a9      	cmp	r1, r5
 800369e:	d905      	bls.n	80036ac <_malloc_r+0x28>
 80036a0:	230c      	movs	r3, #12
 80036a2:	2600      	movs	r6, #0
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	4630      	mov	r0, r6
 80036a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003780 <_malloc_r+0xfc>
 80036b0:	f000 f868 	bl	8003784 <__malloc_lock>
 80036b4:	f8d8 3000 	ldr.w	r3, [r8]
 80036b8:	461c      	mov	r4, r3
 80036ba:	bb5c      	cbnz	r4, 8003714 <_malloc_r+0x90>
 80036bc:	4629      	mov	r1, r5
 80036be:	4638      	mov	r0, r7
 80036c0:	f7ff ffc0 	bl	8003644 <sbrk_aligned>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	4604      	mov	r4, r0
 80036c8:	d155      	bne.n	8003776 <_malloc_r+0xf2>
 80036ca:	f8d8 4000 	ldr.w	r4, [r8]
 80036ce:	4626      	mov	r6, r4
 80036d0:	2e00      	cmp	r6, #0
 80036d2:	d145      	bne.n	8003760 <_malloc_r+0xdc>
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d048      	beq.n	800376a <_malloc_r+0xe6>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	4631      	mov	r1, r6
 80036dc:	4638      	mov	r0, r7
 80036de:	eb04 0903 	add.w	r9, r4, r3
 80036e2:	f000 fc5f 	bl	8003fa4 <_sbrk_r>
 80036e6:	4581      	cmp	r9, r0
 80036e8:	d13f      	bne.n	800376a <_malloc_r+0xe6>
 80036ea:	6821      	ldr	r1, [r4, #0]
 80036ec:	4638      	mov	r0, r7
 80036ee:	1a6d      	subs	r5, r5, r1
 80036f0:	4629      	mov	r1, r5
 80036f2:	f7ff ffa7 	bl	8003644 <sbrk_aligned>
 80036f6:	3001      	adds	r0, #1
 80036f8:	d037      	beq.n	800376a <_malloc_r+0xe6>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	442b      	add	r3, r5
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	f8d8 3000 	ldr.w	r3, [r8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d038      	beq.n	800377a <_malloc_r+0xf6>
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	42a2      	cmp	r2, r4
 800370c:	d12b      	bne.n	8003766 <_malloc_r+0xe2>
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e00f      	b.n	8003734 <_malloc_r+0xb0>
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	1b52      	subs	r2, r2, r5
 8003718:	d41f      	bmi.n	800375a <_malloc_r+0xd6>
 800371a:	2a0b      	cmp	r2, #11
 800371c:	d917      	bls.n	800374e <_malloc_r+0xca>
 800371e:	1961      	adds	r1, r4, r5
 8003720:	42a3      	cmp	r3, r4
 8003722:	6025      	str	r5, [r4, #0]
 8003724:	bf18      	it	ne
 8003726:	6059      	strne	r1, [r3, #4]
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	bf08      	it	eq
 800372c:	f8c8 1000 	streq.w	r1, [r8]
 8003730:	5162      	str	r2, [r4, r5]
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	4638      	mov	r0, r7
 8003736:	f104 060b 	add.w	r6, r4, #11
 800373a:	f000 f829 	bl	8003790 <__malloc_unlock>
 800373e:	f026 0607 	bic.w	r6, r6, #7
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	1af2      	subs	r2, r6, r3
 8003746:	d0ae      	beq.n	80036a6 <_malloc_r+0x22>
 8003748:	1b9b      	subs	r3, r3, r6
 800374a:	50a3      	str	r3, [r4, r2]
 800374c:	e7ab      	b.n	80036a6 <_malloc_r+0x22>
 800374e:	42a3      	cmp	r3, r4
 8003750:	6862      	ldr	r2, [r4, #4]
 8003752:	d1dd      	bne.n	8003710 <_malloc_r+0x8c>
 8003754:	f8c8 2000 	str.w	r2, [r8]
 8003758:	e7ec      	b.n	8003734 <_malloc_r+0xb0>
 800375a:	4623      	mov	r3, r4
 800375c:	6864      	ldr	r4, [r4, #4]
 800375e:	e7ac      	b.n	80036ba <_malloc_r+0x36>
 8003760:	4634      	mov	r4, r6
 8003762:	6876      	ldr	r6, [r6, #4]
 8003764:	e7b4      	b.n	80036d0 <_malloc_r+0x4c>
 8003766:	4613      	mov	r3, r2
 8003768:	e7cc      	b.n	8003704 <_malloc_r+0x80>
 800376a:	230c      	movs	r3, #12
 800376c:	4638      	mov	r0, r7
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	f000 f80e 	bl	8003790 <__malloc_unlock>
 8003774:	e797      	b.n	80036a6 <_malloc_r+0x22>
 8003776:	6025      	str	r5, [r4, #0]
 8003778:	e7dc      	b.n	8003734 <_malloc_r+0xb0>
 800377a:	605b      	str	r3, [r3, #4]
 800377c:	deff      	udf	#255	; 0xff
 800377e:	bf00      	nop
 8003780:	200002c0 	.word	0x200002c0

08003784 <__malloc_lock>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__malloc_lock+0x8>)
 8003786:	f7ff bf12 	b.w	80035ae <__retarget_lock_acquire_recursive>
 800378a:	bf00      	nop
 800378c:	200002bc 	.word	0x200002bc

08003790 <__malloc_unlock>:
 8003790:	4801      	ldr	r0, [pc, #4]	; (8003798 <__malloc_unlock+0x8>)
 8003792:	f7ff bf0d 	b.w	80035b0 <__retarget_lock_release_recursive>
 8003796:	bf00      	nop
 8003798:	200002bc 	.word	0x200002bc

0800379c <__sfputc_r>:
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	b410      	push	{r4}
 80037a0:	3b01      	subs	r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	da07      	bge.n	80037b8 <__sfputc_r+0x1c>
 80037a8:	6994      	ldr	r4, [r2, #24]
 80037aa:	42a3      	cmp	r3, r4
 80037ac:	db01      	blt.n	80037b2 <__sfputc_r+0x16>
 80037ae:	290a      	cmp	r1, #10
 80037b0:	d102      	bne.n	80037b8 <__sfputc_r+0x1c>
 80037b2:	bc10      	pop	{r4}
 80037b4:	f7ff bded 	b.w	8003392 <__swbuf_r>
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	1c58      	adds	r0, r3, #1
 80037bc:	6010      	str	r0, [r2, #0]
 80037be:	7019      	strb	r1, [r3, #0]
 80037c0:	4608      	mov	r0, r1
 80037c2:	bc10      	pop	{r4}
 80037c4:	4770      	bx	lr

080037c6 <__sfputs_r>:
 80037c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c8:	4606      	mov	r6, r0
 80037ca:	460f      	mov	r7, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	18d5      	adds	r5, r2, r3
 80037d0:	42ac      	cmp	r4, r5
 80037d2:	d101      	bne.n	80037d8 <__sfputs_r+0x12>
 80037d4:	2000      	movs	r0, #0
 80037d6:	e007      	b.n	80037e8 <__sfputs_r+0x22>
 80037d8:	463a      	mov	r2, r7
 80037da:	4630      	mov	r0, r6
 80037dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e0:	f7ff ffdc 	bl	800379c <__sfputc_r>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d1f3      	bne.n	80037d0 <__sfputs_r+0xa>
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037ec <_vfiprintf_r>:
 80037ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f0:	460d      	mov	r5, r1
 80037f2:	4614      	mov	r4, r2
 80037f4:	4698      	mov	r8, r3
 80037f6:	4606      	mov	r6, r0
 80037f8:	b09d      	sub	sp, #116	; 0x74
 80037fa:	b118      	cbz	r0, 8003804 <_vfiprintf_r+0x18>
 80037fc:	6a03      	ldr	r3, [r0, #32]
 80037fe:	b90b      	cbnz	r3, 8003804 <_vfiprintf_r+0x18>
 8003800:	f7ff fce0 	bl	80031c4 <__sinit>
 8003804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003806:	07d9      	lsls	r1, r3, #31
 8003808:	d405      	bmi.n	8003816 <_vfiprintf_r+0x2a>
 800380a:	89ab      	ldrh	r3, [r5, #12]
 800380c:	059a      	lsls	r2, r3, #22
 800380e:	d402      	bmi.n	8003816 <_vfiprintf_r+0x2a>
 8003810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003812:	f7ff fecc 	bl	80035ae <__retarget_lock_acquire_recursive>
 8003816:	89ab      	ldrh	r3, [r5, #12]
 8003818:	071b      	lsls	r3, r3, #28
 800381a:	d501      	bpl.n	8003820 <_vfiprintf_r+0x34>
 800381c:	692b      	ldr	r3, [r5, #16]
 800381e:	b99b      	cbnz	r3, 8003848 <_vfiprintf_r+0x5c>
 8003820:	4629      	mov	r1, r5
 8003822:	4630      	mov	r0, r6
 8003824:	f7ff fdf2 	bl	800340c <__swsetup_r>
 8003828:	b170      	cbz	r0, 8003848 <_vfiprintf_r+0x5c>
 800382a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800382c:	07dc      	lsls	r4, r3, #31
 800382e:	d504      	bpl.n	800383a <_vfiprintf_r+0x4e>
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	b01d      	add	sp, #116	; 0x74
 8003836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	0598      	lsls	r0, r3, #22
 800383e:	d4f7      	bmi.n	8003830 <_vfiprintf_r+0x44>
 8003840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003842:	f7ff feb5 	bl	80035b0 <__retarget_lock_release_recursive>
 8003846:	e7f3      	b.n	8003830 <_vfiprintf_r+0x44>
 8003848:	2300      	movs	r3, #0
 800384a:	9309      	str	r3, [sp, #36]	; 0x24
 800384c:	2320      	movs	r3, #32
 800384e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003852:	2330      	movs	r3, #48	; 0x30
 8003854:	f04f 0901 	mov.w	r9, #1
 8003858:	f8cd 800c 	str.w	r8, [sp, #12]
 800385c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003a0c <_vfiprintf_r+0x220>
 8003860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003864:	4623      	mov	r3, r4
 8003866:	469a      	mov	sl, r3
 8003868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800386c:	b10a      	cbz	r2, 8003872 <_vfiprintf_r+0x86>
 800386e:	2a25      	cmp	r2, #37	; 0x25
 8003870:	d1f9      	bne.n	8003866 <_vfiprintf_r+0x7a>
 8003872:	ebba 0b04 	subs.w	fp, sl, r4
 8003876:	d00b      	beq.n	8003890 <_vfiprintf_r+0xa4>
 8003878:	465b      	mov	r3, fp
 800387a:	4622      	mov	r2, r4
 800387c:	4629      	mov	r1, r5
 800387e:	4630      	mov	r0, r6
 8003880:	f7ff ffa1 	bl	80037c6 <__sfputs_r>
 8003884:	3001      	adds	r0, #1
 8003886:	f000 80a9 	beq.w	80039dc <_vfiprintf_r+0x1f0>
 800388a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800388c:	445a      	add	r2, fp
 800388e:	9209      	str	r2, [sp, #36]	; 0x24
 8003890:	f89a 3000 	ldrb.w	r3, [sl]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a1 	beq.w	80039dc <_vfiprintf_r+0x1f0>
 800389a:	2300      	movs	r3, #0
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038a4:	f10a 0a01 	add.w	sl, sl, #1
 80038a8:	9304      	str	r3, [sp, #16]
 80038aa:	9307      	str	r3, [sp, #28]
 80038ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038b0:	931a      	str	r3, [sp, #104]	; 0x68
 80038b2:	4654      	mov	r4, sl
 80038b4:	2205      	movs	r2, #5
 80038b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ba:	4854      	ldr	r0, [pc, #336]	; (8003a0c <_vfiprintf_r+0x220>)
 80038bc:	f000 fb82 	bl	8003fc4 <memchr>
 80038c0:	9a04      	ldr	r2, [sp, #16]
 80038c2:	b9d8      	cbnz	r0, 80038fc <_vfiprintf_r+0x110>
 80038c4:	06d1      	lsls	r1, r2, #27
 80038c6:	bf44      	itt	mi
 80038c8:	2320      	movmi	r3, #32
 80038ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ce:	0713      	lsls	r3, r2, #28
 80038d0:	bf44      	itt	mi
 80038d2:	232b      	movmi	r3, #43	; 0x2b
 80038d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038d8:	f89a 3000 	ldrb.w	r3, [sl]
 80038dc:	2b2a      	cmp	r3, #42	; 0x2a
 80038de:	d015      	beq.n	800390c <_vfiprintf_r+0x120>
 80038e0:	4654      	mov	r4, sl
 80038e2:	2000      	movs	r0, #0
 80038e4:	f04f 0c0a 	mov.w	ip, #10
 80038e8:	9a07      	ldr	r2, [sp, #28]
 80038ea:	4621      	mov	r1, r4
 80038ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038f0:	3b30      	subs	r3, #48	; 0x30
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	d94d      	bls.n	8003992 <_vfiprintf_r+0x1a6>
 80038f6:	b1b0      	cbz	r0, 8003926 <_vfiprintf_r+0x13a>
 80038f8:	9207      	str	r2, [sp, #28]
 80038fa:	e014      	b.n	8003926 <_vfiprintf_r+0x13a>
 80038fc:	eba0 0308 	sub.w	r3, r0, r8
 8003900:	fa09 f303 	lsl.w	r3, r9, r3
 8003904:	4313      	orrs	r3, r2
 8003906:	46a2      	mov	sl, r4
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	e7d2      	b.n	80038b2 <_vfiprintf_r+0xc6>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	1d19      	adds	r1, r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	9103      	str	r1, [sp, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	bfbb      	ittet	lt
 8003918:	425b      	neglt	r3, r3
 800391a:	f042 0202 	orrlt.w	r2, r2, #2
 800391e:	9307      	strge	r3, [sp, #28]
 8003920:	9307      	strlt	r3, [sp, #28]
 8003922:	bfb8      	it	lt
 8003924:	9204      	strlt	r2, [sp, #16]
 8003926:	7823      	ldrb	r3, [r4, #0]
 8003928:	2b2e      	cmp	r3, #46	; 0x2e
 800392a:	d10c      	bne.n	8003946 <_vfiprintf_r+0x15a>
 800392c:	7863      	ldrb	r3, [r4, #1]
 800392e:	2b2a      	cmp	r3, #42	; 0x2a
 8003930:	d134      	bne.n	800399c <_vfiprintf_r+0x1b0>
 8003932:	9b03      	ldr	r3, [sp, #12]
 8003934:	3402      	adds	r4, #2
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	9203      	str	r2, [sp, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	bfb8      	it	lt
 8003940:	f04f 33ff 	movlt.w	r3, #4294967295
 8003944:	9305      	str	r3, [sp, #20]
 8003946:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a10 <_vfiprintf_r+0x224>
 800394a:	2203      	movs	r2, #3
 800394c:	4650      	mov	r0, sl
 800394e:	7821      	ldrb	r1, [r4, #0]
 8003950:	f000 fb38 	bl	8003fc4 <memchr>
 8003954:	b138      	cbz	r0, 8003966 <_vfiprintf_r+0x17a>
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	9b04      	ldr	r3, [sp, #16]
 800395a:	eba0 000a 	sub.w	r0, r0, sl
 800395e:	4082      	lsls	r2, r0
 8003960:	4313      	orrs	r3, r2
 8003962:	3401      	adds	r4, #1
 8003964:	9304      	str	r3, [sp, #16]
 8003966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800396a:	2206      	movs	r2, #6
 800396c:	4829      	ldr	r0, [pc, #164]	; (8003a14 <_vfiprintf_r+0x228>)
 800396e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003972:	f000 fb27 	bl	8003fc4 <memchr>
 8003976:	2800      	cmp	r0, #0
 8003978:	d03f      	beq.n	80039fa <_vfiprintf_r+0x20e>
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <_vfiprintf_r+0x22c>)
 800397c:	bb1b      	cbnz	r3, 80039c6 <_vfiprintf_r+0x1da>
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	3307      	adds	r3, #7
 8003982:	f023 0307 	bic.w	r3, r3, #7
 8003986:	3308      	adds	r3, #8
 8003988:	9303      	str	r3, [sp, #12]
 800398a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398c:	443b      	add	r3, r7
 800398e:	9309      	str	r3, [sp, #36]	; 0x24
 8003990:	e768      	b.n	8003864 <_vfiprintf_r+0x78>
 8003992:	460c      	mov	r4, r1
 8003994:	2001      	movs	r0, #1
 8003996:	fb0c 3202 	mla	r2, ip, r2, r3
 800399a:	e7a6      	b.n	80038ea <_vfiprintf_r+0xfe>
 800399c:	2300      	movs	r3, #0
 800399e:	f04f 0c0a 	mov.w	ip, #10
 80039a2:	4619      	mov	r1, r3
 80039a4:	3401      	adds	r4, #1
 80039a6:	9305      	str	r3, [sp, #20]
 80039a8:	4620      	mov	r0, r4
 80039aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039ae:	3a30      	subs	r2, #48	; 0x30
 80039b0:	2a09      	cmp	r2, #9
 80039b2:	d903      	bls.n	80039bc <_vfiprintf_r+0x1d0>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0c6      	beq.n	8003946 <_vfiprintf_r+0x15a>
 80039b8:	9105      	str	r1, [sp, #20]
 80039ba:	e7c4      	b.n	8003946 <_vfiprintf_r+0x15a>
 80039bc:	4604      	mov	r4, r0
 80039be:	2301      	movs	r3, #1
 80039c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039c4:	e7f0      	b.n	80039a8 <_vfiprintf_r+0x1bc>
 80039c6:	ab03      	add	r3, sp, #12
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	462a      	mov	r2, r5
 80039cc:	4630      	mov	r0, r6
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <_vfiprintf_r+0x230>)
 80039d0:	a904      	add	r1, sp, #16
 80039d2:	f3af 8000 	nop.w
 80039d6:	4607      	mov	r7, r0
 80039d8:	1c78      	adds	r0, r7, #1
 80039da:	d1d6      	bne.n	800398a <_vfiprintf_r+0x19e>
 80039dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039de:	07d9      	lsls	r1, r3, #31
 80039e0:	d405      	bmi.n	80039ee <_vfiprintf_r+0x202>
 80039e2:	89ab      	ldrh	r3, [r5, #12]
 80039e4:	059a      	lsls	r2, r3, #22
 80039e6:	d402      	bmi.n	80039ee <_vfiprintf_r+0x202>
 80039e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ea:	f7ff fde1 	bl	80035b0 <__retarget_lock_release_recursive>
 80039ee:	89ab      	ldrh	r3, [r5, #12]
 80039f0:	065b      	lsls	r3, r3, #25
 80039f2:	f53f af1d 	bmi.w	8003830 <_vfiprintf_r+0x44>
 80039f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039f8:	e71c      	b.n	8003834 <_vfiprintf_r+0x48>
 80039fa:	ab03      	add	r3, sp, #12
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	462a      	mov	r2, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <_vfiprintf_r+0x230>)
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	f000 f87d 	bl	8003b04 <_printf_i>
 8003a0a:	e7e4      	b.n	80039d6 <_vfiprintf_r+0x1ea>
 8003a0c:	08004070 	.word	0x08004070
 8003a10:	08004076 	.word	0x08004076
 8003a14:	0800407a 	.word	0x0800407a
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	080037c7 	.word	0x080037c7

08003a20 <_printf_common>:
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	4616      	mov	r6, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	688a      	ldr	r2, [r1, #8]
 8003a2a:	690b      	ldr	r3, [r1, #16]
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	bfb8      	it	lt
 8003a32:	4613      	movlt	r3, r2
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a40:	b10a      	cbz	r2, 8003a46 <_printf_common+0x26>
 8003a42:	3301      	adds	r3, #1
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	0699      	lsls	r1, r3, #26
 8003a4a:	bf42      	ittt	mi
 8003a4c:	6833      	ldrmi	r3, [r6, #0]
 8003a4e:	3302      	addmi	r3, #2
 8003a50:	6033      	strmi	r3, [r6, #0]
 8003a52:	6825      	ldr	r5, [r4, #0]
 8003a54:	f015 0506 	ands.w	r5, r5, #6
 8003a58:	d106      	bne.n	8003a68 <_printf_common+0x48>
 8003a5a:	f104 0a19 	add.w	sl, r4, #25
 8003a5e:	68e3      	ldr	r3, [r4, #12]
 8003a60:	6832      	ldr	r2, [r6, #0]
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	42ab      	cmp	r3, r5
 8003a66:	dc2b      	bgt.n	8003ac0 <_printf_common+0xa0>
 8003a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a6c:	1e13      	subs	r3, r2, #0
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	bf18      	it	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	0692      	lsls	r2, r2, #26
 8003a76:	d430      	bmi.n	8003ada <_printf_common+0xba>
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d023      	beq.n	8003ace <_printf_common+0xae>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	6922      	ldr	r2, [r4, #16]
 8003a8a:	f003 0306 	and.w	r3, r3, #6
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf14      	ite	ne
 8003a92:	2500      	movne	r5, #0
 8003a94:	6833      	ldreq	r3, [r6, #0]
 8003a96:	f04f 0600 	mov.w	r6, #0
 8003a9a:	bf08      	it	eq
 8003a9c:	68e5      	ldreq	r5, [r4, #12]
 8003a9e:	f104 041a 	add.w	r4, r4, #26
 8003aa2:	bf08      	it	eq
 8003aa4:	1aed      	subeq	r5, r5, r3
 8003aa6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003aaa:	bf08      	it	eq
 8003aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfc4      	itt	gt
 8003ab4:	1a9b      	subgt	r3, r3, r2
 8003ab6:	18ed      	addgt	r5, r5, r3
 8003ab8:	42b5      	cmp	r5, r6
 8003aba:	d11a      	bne.n	8003af2 <_printf_common+0xd2>
 8003abc:	2000      	movs	r0, #0
 8003abe:	e008      	b.n	8003ad2 <_printf_common+0xb2>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4652      	mov	r2, sl
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	47c0      	blx	r8
 8003aca:	3001      	adds	r0, #1
 8003acc:	d103      	bne.n	8003ad6 <_printf_common+0xb6>
 8003ace:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	e7c1      	b.n	8003a5e <_printf_common+0x3e>
 8003ada:	2030      	movs	r0, #48	; 0x30
 8003adc:	18e1      	adds	r1, r4, r3
 8003ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ae8:	4422      	add	r2, r4
 8003aea:	3302      	adds	r3, #2
 8003aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003af0:	e7c2      	b.n	8003a78 <_printf_common+0x58>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4622      	mov	r2, r4
 8003af6:	4649      	mov	r1, r9
 8003af8:	4638      	mov	r0, r7
 8003afa:	47c0      	blx	r8
 8003afc:	3001      	adds	r0, #1
 8003afe:	d0e6      	beq.n	8003ace <_printf_common+0xae>
 8003b00:	3601      	adds	r6, #1
 8003b02:	e7d9      	b.n	8003ab8 <_printf_common+0x98>

08003b04 <_printf_i>:
 8003b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	7e0f      	ldrb	r7, [r1, #24]
 8003b0a:	4691      	mov	r9, r2
 8003b0c:	2f78      	cmp	r7, #120	; 0x78
 8003b0e:	4680      	mov	r8, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	469a      	mov	sl, r3
 8003b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b1a:	d807      	bhi.n	8003b2c <_printf_i+0x28>
 8003b1c:	2f62      	cmp	r7, #98	; 0x62
 8003b1e:	d80a      	bhi.n	8003b36 <_printf_i+0x32>
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	f000 80d5 	beq.w	8003cd0 <_printf_i+0x1cc>
 8003b26:	2f58      	cmp	r7, #88	; 0x58
 8003b28:	f000 80c1 	beq.w	8003cae <_printf_i+0x1aa>
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b34:	e03a      	b.n	8003bac <_printf_i+0xa8>
 8003b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b3a:	2b15      	cmp	r3, #21
 8003b3c:	d8f6      	bhi.n	8003b2c <_printf_i+0x28>
 8003b3e:	a101      	add	r1, pc, #4	; (adr r1, 8003b44 <_printf_i+0x40>)
 8003b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003b2d 	.word	0x08003b2d
 8003b50:	08003b2d 	.word	0x08003b2d
 8003b54:	08003b2d 	.word	0x08003b2d
 8003b58:	08003b2d 	.word	0x08003b2d
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003b2d 	.word	0x08003b2d
 8003b64:	08003b2d 	.word	0x08003b2d
 8003b68:	08003b2d 	.word	0x08003b2d
 8003b6c:	08003b2d 	.word	0x08003b2d
 8003b70:	08003cb7 	.word	0x08003cb7
 8003b74:	08003bdd 	.word	0x08003bdd
 8003b78:	08003c71 	.word	0x08003c71
 8003b7c:	08003b2d 	.word	0x08003b2d
 8003b80:	08003b2d 	.word	0x08003b2d
 8003b84:	08003cd9 	.word	0x08003cd9
 8003b88:	08003b2d 	.word	0x08003b2d
 8003b8c:	08003bdd 	.word	0x08003bdd
 8003b90:	08003b2d 	.word	0x08003b2d
 8003b94:	08003b2d 	.word	0x08003b2d
 8003b98:	08003c79 	.word	0x08003c79
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	602a      	str	r2, [r5, #0]
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0a0      	b.n	8003cf2 <_printf_i+0x1ee>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	0607      	lsls	r7, r0, #24
 8003bb6:	f103 0104 	add.w	r1, r3, #4
 8003bba:	6029      	str	r1, [r5, #0]
 8003bbc:	d501      	bpl.n	8003bc2 <_printf_i+0xbe>
 8003bbe:	681e      	ldr	r6, [r3, #0]
 8003bc0:	e003      	b.n	8003bca <_printf_i+0xc6>
 8003bc2:	0646      	lsls	r6, r0, #25
 8003bc4:	d5fb      	bpl.n	8003bbe <_printf_i+0xba>
 8003bc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	da03      	bge.n	8003bd6 <_printf_i+0xd2>
 8003bce:	232d      	movs	r3, #45	; 0x2d
 8003bd0:	4276      	negs	r6, r6
 8003bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	4859      	ldr	r0, [pc, #356]	; (8003d40 <_printf_i+0x23c>)
 8003bda:	e012      	b.n	8003c02 <_printf_i+0xfe>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	1d19      	adds	r1, r3, #4
 8003be2:	6029      	str	r1, [r5, #0]
 8003be4:	0605      	lsls	r5, r0, #24
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0xe8>
 8003be8:	681e      	ldr	r6, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <_printf_i+0xee>
 8003bec:	0641      	lsls	r1, r0, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0xe4>
 8003bf0:	881e      	ldrh	r6, [r3, #0]
 8003bf2:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2308      	moveq	r3, #8
 8003bf8:	230a      	movne	r3, #10
 8003bfa:	4851      	ldr	r0, [pc, #324]	; (8003d40 <_printf_i+0x23c>)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c02:	6865      	ldr	r5, [r4, #4]
 8003c04:	2d00      	cmp	r5, #0
 8003c06:	bfa8      	it	ge
 8003c08:	6821      	ldrge	r1, [r4, #0]
 8003c0a:	60a5      	str	r5, [r4, #8]
 8003c0c:	bfa4      	itt	ge
 8003c0e:	f021 0104 	bicge.w	r1, r1, #4
 8003c12:	6021      	strge	r1, [r4, #0]
 8003c14:	b90e      	cbnz	r6, 8003c1a <_printf_i+0x116>
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	d04b      	beq.n	8003cb2 <_printf_i+0x1ae>
 8003c1a:	4615      	mov	r5, r2
 8003c1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c20:	fb03 6711 	mls	r7, r3, r1, r6
 8003c24:	5dc7      	ldrb	r7, [r0, r7]
 8003c26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c2a:	4637      	mov	r7, r6
 8003c2c:	42bb      	cmp	r3, r7
 8003c2e:	460e      	mov	r6, r1
 8003c30:	d9f4      	bls.n	8003c1c <_printf_i+0x118>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d10b      	bne.n	8003c4e <_printf_i+0x14a>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	07de      	lsls	r6, r3, #31
 8003c3a:	d508      	bpl.n	8003c4e <_printf_i+0x14a>
 8003c3c:	6923      	ldr	r3, [r4, #16]
 8003c3e:	6861      	ldr	r1, [r4, #4]
 8003c40:	4299      	cmp	r1, r3
 8003c42:	bfde      	ittt	le
 8003c44:	2330      	movle	r3, #48	; 0x30
 8003c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c4e:	1b52      	subs	r2, r2, r5
 8003c50:	6122      	str	r2, [r4, #16]
 8003c52:	464b      	mov	r3, r9
 8003c54:	4621      	mov	r1, r4
 8003c56:	4640      	mov	r0, r8
 8003c58:	f8cd a000 	str.w	sl, [sp]
 8003c5c:	aa03      	add	r2, sp, #12
 8003c5e:	f7ff fedf 	bl	8003a20 <_printf_common>
 8003c62:	3001      	adds	r0, #1
 8003c64:	d14a      	bne.n	8003cfc <_printf_i+0x1f8>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	b004      	add	sp, #16
 8003c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f043 0320 	orr.w	r3, r3, #32
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	2778      	movs	r7, #120	; 0x78
 8003c7a:	4832      	ldr	r0, [pc, #200]	; (8003d44 <_printf_i+0x240>)
 8003c7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	6829      	ldr	r1, [r5, #0]
 8003c84:	061f      	lsls	r7, r3, #24
 8003c86:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c8a:	d402      	bmi.n	8003c92 <_printf_i+0x18e>
 8003c8c:	065f      	lsls	r7, r3, #25
 8003c8e:	bf48      	it	mi
 8003c90:	b2b6      	uxthmi	r6, r6
 8003c92:	07df      	lsls	r7, r3, #31
 8003c94:	bf48      	it	mi
 8003c96:	f043 0320 	orrmi.w	r3, r3, #32
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	bf48      	it	mi
 8003c9e:	6023      	strmi	r3, [r4, #0]
 8003ca0:	b91e      	cbnz	r6, 8003caa <_printf_i+0x1a6>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f023 0320 	bic.w	r3, r3, #32
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	2310      	movs	r3, #16
 8003cac:	e7a6      	b.n	8003bfc <_printf_i+0xf8>
 8003cae:	4824      	ldr	r0, [pc, #144]	; (8003d40 <_printf_i+0x23c>)
 8003cb0:	e7e4      	b.n	8003c7c <_printf_i+0x178>
 8003cb2:	4615      	mov	r5, r2
 8003cb4:	e7bd      	b.n	8003c32 <_printf_i+0x12e>
 8003cb6:	682b      	ldr	r3, [r5, #0]
 8003cb8:	6826      	ldr	r6, [r4, #0]
 8003cba:	1d18      	adds	r0, r3, #4
 8003cbc:	6961      	ldr	r1, [r4, #20]
 8003cbe:	6028      	str	r0, [r5, #0]
 8003cc0:	0635      	lsls	r5, r6, #24
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	d501      	bpl.n	8003cca <_printf_i+0x1c6>
 8003cc6:	6019      	str	r1, [r3, #0]
 8003cc8:	e002      	b.n	8003cd0 <_printf_i+0x1cc>
 8003cca:	0670      	lsls	r0, r6, #25
 8003ccc:	d5fb      	bpl.n	8003cc6 <_printf_i+0x1c2>
 8003cce:	8019      	strh	r1, [r3, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4615      	mov	r5, r2
 8003cd4:	6123      	str	r3, [r4, #16]
 8003cd6:	e7bc      	b.n	8003c52 <_printf_i+0x14e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	602a      	str	r2, [r5, #0]
 8003ce0:	681d      	ldr	r5, [r3, #0]
 8003ce2:	6862      	ldr	r2, [r4, #4]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f000 f96d 	bl	8003fc4 <memchr>
 8003cea:	b108      	cbz	r0, 8003cf0 <_printf_i+0x1ec>
 8003cec:	1b40      	subs	r0, r0, r5
 8003cee:	6060      	str	r0, [r4, #4]
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cfa:	e7aa      	b.n	8003c52 <_printf_i+0x14e>
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4649      	mov	r1, r9
 8003d00:	4640      	mov	r0, r8
 8003d02:	6923      	ldr	r3, [r4, #16]
 8003d04:	47d0      	blx	sl
 8003d06:	3001      	adds	r0, #1
 8003d08:	d0ad      	beq.n	8003c66 <_printf_i+0x162>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	079b      	lsls	r3, r3, #30
 8003d0e:	d413      	bmi.n	8003d38 <_printf_i+0x234>
 8003d10:	68e0      	ldr	r0, [r4, #12]
 8003d12:	9b03      	ldr	r3, [sp, #12]
 8003d14:	4298      	cmp	r0, r3
 8003d16:	bfb8      	it	lt
 8003d18:	4618      	movlt	r0, r3
 8003d1a:	e7a6      	b.n	8003c6a <_printf_i+0x166>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4632      	mov	r2, r6
 8003d20:	4649      	mov	r1, r9
 8003d22:	4640      	mov	r0, r8
 8003d24:	47d0      	blx	sl
 8003d26:	3001      	adds	r0, #1
 8003d28:	d09d      	beq.n	8003c66 <_printf_i+0x162>
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	68e3      	ldr	r3, [r4, #12]
 8003d2e:	9903      	ldr	r1, [sp, #12]
 8003d30:	1a5b      	subs	r3, r3, r1
 8003d32:	42ab      	cmp	r3, r5
 8003d34:	dcf2      	bgt.n	8003d1c <_printf_i+0x218>
 8003d36:	e7eb      	b.n	8003d10 <_printf_i+0x20c>
 8003d38:	2500      	movs	r5, #0
 8003d3a:	f104 0619 	add.w	r6, r4, #25
 8003d3e:	e7f5      	b.n	8003d2c <_printf_i+0x228>
 8003d40:	08004081 	.word	0x08004081
 8003d44:	08004092 	.word	0x08004092

08003d48 <__sflush_r>:
 8003d48:	898a      	ldrh	r2, [r1, #12]
 8003d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	0710      	lsls	r0, r2, #28
 8003d50:	460c      	mov	r4, r1
 8003d52:	d457      	bmi.n	8003e04 <__sflush_r+0xbc>
 8003d54:	684b      	ldr	r3, [r1, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	dc04      	bgt.n	8003d64 <__sflush_r+0x1c>
 8003d5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dc01      	bgt.n	8003d64 <__sflush_r+0x1c>
 8003d60:	2000      	movs	r0, #0
 8003d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d0fa      	beq.n	8003d60 <__sflush_r+0x18>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d70:	682f      	ldr	r7, [r5, #0]
 8003d72:	6a21      	ldr	r1, [r4, #32]
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	d032      	beq.n	8003dde <__sflush_r+0x96>
 8003d78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	075a      	lsls	r2, r3, #29
 8003d7e:	d505      	bpl.n	8003d8c <__sflush_r+0x44>
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	1ac0      	subs	r0, r0, r3
 8003d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d86:	b10b      	cbz	r3, 8003d8c <__sflush_r+0x44>
 8003d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8a:	1ac0      	subs	r0, r0, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d92:	4628      	mov	r0, r5
 8003d94:	6a21      	ldr	r1, [r4, #32]
 8003d96:	47b0      	blx	r6
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	d106      	bne.n	8003dac <__sflush_r+0x64>
 8003d9e:	6829      	ldr	r1, [r5, #0]
 8003da0:	291d      	cmp	r1, #29
 8003da2:	d82b      	bhi.n	8003dfc <__sflush_r+0xb4>
 8003da4:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <__sflush_r+0x100>)
 8003da6:	410a      	asrs	r2, r1
 8003da8:	07d6      	lsls	r6, r2, #31
 8003daa:	d427      	bmi.n	8003dfc <__sflush_r+0xb4>
 8003dac:	2200      	movs	r2, #0
 8003dae:	6062      	str	r2, [r4, #4]
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	04d9      	lsls	r1, r3, #19
 8003db4:	6022      	str	r2, [r4, #0]
 8003db6:	d504      	bpl.n	8003dc2 <__sflush_r+0x7a>
 8003db8:	1c42      	adds	r2, r0, #1
 8003dba:	d101      	bne.n	8003dc0 <__sflush_r+0x78>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b903      	cbnz	r3, 8003dc2 <__sflush_r+0x7a>
 8003dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc4:	602f      	str	r7, [r5, #0]
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	d0ca      	beq.n	8003d60 <__sflush_r+0x18>
 8003dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	d002      	beq.n	8003dd8 <__sflush_r+0x90>
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f7ff fbee 	bl	80035b4 <_free_r>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	6360      	str	r0, [r4, #52]	; 0x34
 8003ddc:	e7c1      	b.n	8003d62 <__sflush_r+0x1a>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b0      	blx	r6
 8003de4:	1c41      	adds	r1, r0, #1
 8003de6:	d1c8      	bne.n	8003d7a <__sflush_r+0x32>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0c5      	beq.n	8003d7a <__sflush_r+0x32>
 8003dee:	2b1d      	cmp	r3, #29
 8003df0:	d001      	beq.n	8003df6 <__sflush_r+0xae>
 8003df2:	2b16      	cmp	r3, #22
 8003df4:	d101      	bne.n	8003dfa <__sflush_r+0xb2>
 8003df6:	602f      	str	r7, [r5, #0]
 8003df8:	e7b2      	b.n	8003d60 <__sflush_r+0x18>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	e7ae      	b.n	8003d62 <__sflush_r+0x1a>
 8003e04:	690f      	ldr	r7, [r1, #16]
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	d0aa      	beq.n	8003d60 <__sflush_r+0x18>
 8003e0a:	0793      	lsls	r3, r2, #30
 8003e0c:	bf18      	it	ne
 8003e0e:	2300      	movne	r3, #0
 8003e10:	680e      	ldr	r6, [r1, #0]
 8003e12:	bf08      	it	eq
 8003e14:	694b      	ldreq	r3, [r1, #20]
 8003e16:	1bf6      	subs	r6, r6, r7
 8003e18:	600f      	str	r7, [r1, #0]
 8003e1a:	608b      	str	r3, [r1, #8]
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	dd9f      	ble.n	8003d60 <__sflush_r+0x18>
 8003e20:	4633      	mov	r3, r6
 8003e22:	463a      	mov	r2, r7
 8003e24:	4628      	mov	r0, r5
 8003e26:	6a21      	ldr	r1, [r4, #32]
 8003e28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003e2c:	47e0      	blx	ip
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	dc06      	bgt.n	8003e40 <__sflush_r+0xf8>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	e790      	b.n	8003d62 <__sflush_r+0x1a>
 8003e40:	4407      	add	r7, r0
 8003e42:	1a36      	subs	r6, r6, r0
 8003e44:	e7ea      	b.n	8003e1c <__sflush_r+0xd4>
 8003e46:	bf00      	nop
 8003e48:	dfbffffe 	.word	0xdfbffffe

08003e4c <_fflush_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	b913      	cbnz	r3, 8003e5c <_fflush_r+0x10>
 8003e56:	2500      	movs	r5, #0
 8003e58:	4628      	mov	r0, r5
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	b118      	cbz	r0, 8003e66 <_fflush_r+0x1a>
 8003e5e:	6a03      	ldr	r3, [r0, #32]
 8003e60:	b90b      	cbnz	r3, 8003e66 <_fflush_r+0x1a>
 8003e62:	f7ff f9af 	bl	80031c4 <__sinit>
 8003e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f3      	beq.n	8003e56 <_fflush_r+0xa>
 8003e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e70:	07d0      	lsls	r0, r2, #31
 8003e72:	d404      	bmi.n	8003e7e <_fflush_r+0x32>
 8003e74:	0599      	lsls	r1, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_fflush_r+0x32>
 8003e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7a:	f7ff fb98 	bl	80035ae <__retarget_lock_acquire_recursive>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	4621      	mov	r1, r4
 8003e82:	f7ff ff61 	bl	8003d48 <__sflush_r>
 8003e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e88:	4605      	mov	r5, r0
 8003e8a:	07da      	lsls	r2, r3, #31
 8003e8c:	d4e4      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	d4e1      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e96:	f7ff fb8b 	bl	80035b0 <__retarget_lock_release_recursive>
 8003e9a:	e7dd      	b.n	8003e58 <_fflush_r+0xc>

08003e9c <__swhatbuf_r>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea4:	4615      	mov	r5, r2
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	461e      	mov	r6, r3
 8003eaa:	b096      	sub	sp, #88	; 0x58
 8003eac:	da0c      	bge.n	8003ec8 <__swhatbuf_r+0x2c>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003eb6:	bf0c      	ite	eq
 8003eb8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003ebc:	2340      	movne	r3, #64	; 0x40
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	6031      	str	r1, [r6, #0]
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	b016      	add	sp, #88	; 0x58
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	466a      	mov	r2, sp
 8003eca:	f000 f849 	bl	8003f60 <_fstat_r>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	dbed      	blt.n	8003eae <__swhatbuf_r+0x12>
 8003ed2:	9901      	ldr	r1, [sp, #4]
 8003ed4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003ed8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003edc:	4259      	negs	r1, r3
 8003ede:	4159      	adcs	r1, r3
 8003ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee4:	e7eb      	b.n	8003ebe <__swhatbuf_r+0x22>

08003ee6 <__smakebuf_r>:
 8003ee6:	898b      	ldrh	r3, [r1, #12]
 8003ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eea:	079d      	lsls	r5, r3, #30
 8003eec:	4606      	mov	r6, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	d507      	bpl.n	8003f02 <__smakebuf_r+0x1c>
 8003ef2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	2301      	movs	r3, #1
 8003efc:	6163      	str	r3, [r4, #20]
 8003efe:	b002      	add	sp, #8
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	466a      	mov	r2, sp
 8003f04:	ab01      	add	r3, sp, #4
 8003f06:	f7ff ffc9 	bl	8003e9c <__swhatbuf_r>
 8003f0a:	9900      	ldr	r1, [sp, #0]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f7ff fbb8 	bl	8003684 <_malloc_r>
 8003f14:	b948      	cbnz	r0, 8003f2a <__smakebuf_r+0x44>
 8003f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1a:	059a      	lsls	r2, r3, #22
 8003f1c:	d4ef      	bmi.n	8003efe <__smakebuf_r+0x18>
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	e7e3      	b.n	8003ef2 <__smakebuf_r+0xc>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	6020      	str	r0, [r4, #0]
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	9b00      	ldr	r3, [sp, #0]
 8003f36:	6120      	str	r0, [r4, #16]
 8003f38:	6163      	str	r3, [r4, #20]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	b15b      	cbz	r3, 8003f56 <__smakebuf_r+0x70>
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f44:	f000 f81e 	bl	8003f84 <_isatty_r>
 8003f48:	b128      	cbz	r0, 8003f56 <__smakebuf_r+0x70>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f023 0303 	bic.w	r3, r3, #3
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	431d      	orrs	r5, r3
 8003f5a:	81a5      	strh	r5, [r4, #12]
 8003f5c:	e7cf      	b.n	8003efe <__smakebuf_r+0x18>
	...

08003f60 <_fstat_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	2300      	movs	r3, #0
 8003f64:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_fstat_r+0x20>)
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	f7fc fea9 	bl	8000cc4 <_fstat>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d102      	bne.n	8003f7c <_fstat_r+0x1c>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	b103      	cbz	r3, 8003f7c <_fstat_r+0x1c>
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	bf00      	nop
 8003f80:	200002b8 	.word	0x200002b8

08003f84 <_isatty_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4d05      	ldr	r5, [pc, #20]	; (8003fa0 <_isatty_r+0x1c>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fc fea7 	bl	8000ce2 <_isatty>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_isatty_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_isatty_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200002b8 	.word	0x200002b8

08003fa4 <_sbrk_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	4d05      	ldr	r5, [pc, #20]	; (8003fc0 <_sbrk_r+0x1c>)
 8003faa:	4604      	mov	r4, r0
 8003fac:	4608      	mov	r0, r1
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	f7fc feae 	bl	8000d10 <_sbrk>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_sbrk_r+0x1a>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_sbrk_r+0x1a>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	200002b8 	.word	0x200002b8

08003fc4 <memchr>:
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	b2c9      	uxtb	r1, r1
 8003fca:	4402      	add	r2, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	d101      	bne.n	8003fd6 <memchr+0x12>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e003      	b.n	8003fde <memchr+0x1a>
 8003fd6:	7804      	ldrb	r4, [r0, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	428c      	cmp	r4, r1
 8003fdc:	d1f6      	bne.n	8003fcc <memchr+0x8>
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
