
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c8  080065c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d0  080065d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000070  08006648  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006648  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbda  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002489  00000000  00000000  0002dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00030140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0e  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae7f  00000000  00000000  00031ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004258  00000000  00000000  0003c955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004380  00000000  00000000  00040bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00044f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080063dc 	.word	0x080063dc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080063dc 	.word	0x080063dc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14c      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d967      	bls.n	80002a2 <__udivmoddi4+0xe6>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b153      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e4:	fa20 f202 	lsr.w	r2, r0, r2
 80001e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fbbe f1f7 	udiv	r1, lr, r7
 80001f6:	fa1f f58c 	uxth.w	r5, ip
 80001fa:	fb07 ee11 	mls	lr, r7, r1, lr
 80001fe:	fb01 f005 	mul.w	r0, r1, r5
 8000202:	0c22      	lsrs	r2, r4, #16
 8000204:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0202 	adds.w	r2, ip, r2
 8000210:	f101 3eff 	add.w	lr, r1, #4294967295
 8000214:	f080 8119 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000218:	4290      	cmp	r0, r2
 800021a:	f240 8116 	bls.w	800044a <__udivmoddi4+0x28e>
 800021e:	3902      	subs	r1, #2
 8000220:	4462      	add	r2, ip
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f7 	udiv	r0, r2, r7
 8000228:	fb07 2210 	mls	r2, r7, r0, r2
 800022c:	fb00 f505 	mul.w	r5, r0, r5
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a5      	cmp	r5, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000242:	f080 8104 	bcs.w	800044e <__udivmoddi4+0x292>
 8000246:	42a5      	cmp	r5, r4
 8000248:	f240 8101 	bls.w	800044e <__udivmoddi4+0x292>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	1b64      	subs	r4, r4, r5
 8000258:	b11e      	cbz	r6, 8000262 <__udivmoddi4+0xa6>
 800025a:	40dc      	lsrs	r4, r3
 800025c:	2300      	movs	r3, #0
 800025e:	e9c6 4300 	strd	r4, r3, [r6]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d908      	bls.n	800027c <__udivmoddi4+0xc0>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80ea 	beq.w	8000444 <__udivmoddi4+0x288>
 8000270:	2100      	movs	r1, #0
 8000272:	e9c6 0500 	strd	r0, r5, [r6]
 8000276:	4608      	mov	r0, r1
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	fab3 f183 	clz	r1, r3
 8000280:	2900      	cmp	r1, #0
 8000282:	d148      	bne.n	8000316 <__udivmoddi4+0x15a>
 8000284:	42ab      	cmp	r3, r5
 8000286:	d302      	bcc.n	800028e <__udivmoddi4+0xd2>
 8000288:	4282      	cmp	r2, r0
 800028a:	f200 80f8 	bhi.w	800047e <__udivmoddi4+0x2c2>
 800028e:	1a84      	subs	r4, r0, r2
 8000290:	eb65 0203 	sbc.w	r2, r5, r3
 8000294:	2001      	movs	r0, #1
 8000296:	4696      	mov	lr, r2
 8000298:	2e00      	cmp	r6, #0
 800029a:	d0e2      	beq.n	8000262 <__udivmoddi4+0xa6>
 800029c:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a0:	e7df      	b.n	8000262 <__udivmoddi4+0xa6>
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xea>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f382 	clz	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 808e 	bne.w	80003cc <__udivmoddi4+0x210>
 80002b0:	1a88      	subs	r0, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	0c17      	lsrs	r7, r2, #16
 80002b6:	fa1f fe82 	uxth.w	lr, r2
 80002ba:	fbb0 f5f7 	udiv	r5, r0, r7
 80002be:	fb07 0015 	mls	r0, r7, r5, r0
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c8:	fb0e f005 	mul.w	r0, lr, r5
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d0:	eb1c 0202 	adds.w	r2, ip, r2
 80002d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 80cc 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002e0:	4645      	mov	r5, r8
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0x150>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14e>
 8000304:	45a6      	cmp	lr, r4
 8000306:	f200 80b4 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 800030a:	4610      	mov	r0, r2
 800030c:	eba4 040e 	sub.w	r4, r4, lr
 8000310:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000314:	e7a0      	b.n	8000258 <__udivmoddi4+0x9c>
 8000316:	f1c1 0720 	rsb	r7, r1, #32
 800031a:	408b      	lsls	r3, r1
 800031c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000320:	ea4c 0c03 	orr.w	ip, ip, r3
 8000324:	fa25 fa07 	lsr.w	sl, r5, r7
 8000328:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032c:	fbba f8f9 	udiv	r8, sl, r9
 8000330:	408d      	lsls	r5, r1
 8000332:	fa20 f307 	lsr.w	r3, r0, r7
 8000336:	fb09 aa18 	mls	sl, r9, r8, sl
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	432b      	orrs	r3, r5
 8000340:	fa00 f501 	lsl.w	r5, r0, r1
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	0c1c      	lsrs	r4, r3, #16
 800034a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800034e:	42a0      	cmp	r0, r4
 8000350:	fa02 f201 	lsl.w	r2, r2, r1
 8000354:	d90b      	bls.n	800036e <__udivmoddi4+0x1b2>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f108 3aff 	add.w	sl, r8, #4294967295
 800035e:	f080 8086 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000362:	42a0      	cmp	r0, r4
 8000364:	f240 8083 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000368:	f1a8 0802 	sub.w	r8, r8, #2
 800036c:	4464      	add	r4, ip
 800036e:	1a24      	subs	r4, r4, r0
 8000370:	b298      	uxth	r0, r3
 8000372:	fbb4 f3f9 	udiv	r3, r4, r9
 8000376:	fb09 4413 	mls	r4, r9, r3, r4
 800037a:	fb03 fe0e 	mul.w	lr, r3, lr
 800037e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000382:	45a6      	cmp	lr, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f103 30ff 	add.w	r0, r3, #4294967295
 800038e:	d26a      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 8000390:	45a6      	cmp	lr, r4
 8000392:	d968      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000394:	3b02      	subs	r3, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800039c:	fba0 9302 	umull	r9, r3, r0, r2
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	429c      	cmp	r4, r3
 80003a6:	46c8      	mov	r8, r9
 80003a8:	469e      	mov	lr, r3
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d067      	beq.n	8000482 <__udivmoddi4+0x2c6>
 80003b2:	ebb5 0308 	subs.w	r3, r5, r8
 80003b6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ba:	40cb      	lsrs	r3, r1
 80003bc:	fa04 f707 	lsl.w	r7, r4, r7
 80003c0:	431f      	orrs	r7, r3
 80003c2:	40cc      	lsrs	r4, r1
 80003c4:	e9c6 7400 	strd	r7, r4, [r6]
 80003c8:	2100      	movs	r1, #0
 80003ca:	e74a      	b.n	8000262 <__udivmoddi4+0xa6>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0020 	rsb	r0, r3, #32
 80003d4:	40c1      	lsrs	r1, r0
 80003d6:	409d      	lsls	r5, r3
 80003d8:	fa24 f000 	lsr.w	r0, r4, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	4328      	orrs	r0, r5
 80003e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003e6:	fb07 1115 	mls	r1, r7, r5, r1
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	0c02      	lsrs	r2, r0, #16
 80003f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f4:	fb05 f10e 	mul.w	r1, r5, lr
 80003f8:	4291      	cmp	r1, r2
 80003fa:	fa04 f403 	lsl.w	r4, r4, r3
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x256>
 8000400:	eb1c 0202 	adds.w	r2, ip, r2
 8000404:	f105 38ff 	add.w	r8, r5, #4294967295
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	4291      	cmp	r1, r2
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3d02      	subs	r5, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a52      	subs	r2, r2, r1
 8000414:	fbb2 f1f7 	udiv	r1, r2, r7
 8000418:	fb07 2211 	mls	r2, r7, r1, r2
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000422:	fb01 f20e 	mul.w	r2, r1, lr
 8000426:	4282      	cmp	r2, r0
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x280>
 800042a:	eb1c 0000 	adds.w	r0, ip, r0
 800042e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000432:	d216      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000434:	4282      	cmp	r2, r0
 8000436:	d914      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000438:	3902      	subs	r1, #2
 800043a:	4460      	add	r0, ip
 800043c:	1a80      	subs	r0, r0, r2
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70b      	b.n	8000262 <__udivmoddi4+0xa6>
 800044a:	4671      	mov	r1, lr
 800044c:	e6e9      	b.n	8000222 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6fe      	b.n	8000250 <__udivmoddi4+0x94>
 8000452:	454d      	cmp	r5, r9
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb9 0802 	subs.w	r8, r9, r2
 800045a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7a5      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000462:	4641      	mov	r1, r8
 8000464:	e7ea      	b.n	800043c <__udivmoddi4+0x280>
 8000466:	4603      	mov	r3, r0
 8000468:	e796      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046a:	4645      	mov	r5, r8
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	46d0      	mov	r8, sl
 8000470:	e77d      	b.n	800036e <__udivmoddi4+0x1b2>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e749      	b.n	800030c <__udivmoddi4+0x150>
 8000478:	3d02      	subs	r5, #2
 800047a:	4462      	add	r2, ip
 800047c:	e731      	b.n	80002e2 <__udivmoddi4+0x126>
 800047e:	4608      	mov	r0, r1
 8000480:	e70a      	b.n	8000298 <__udivmoddi4+0xdc>
 8000482:	4631      	mov	r1, r6
 8000484:	e6ed      	b.n	8000262 <__udivmoddi4+0xa6>
 8000486:	bf00      	nop

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d013      	beq.n	80004cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d00b      	beq.n	80004cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004b4:	e000      	b.n	80004b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80004dc:	f001 fbd5 	bl	8001c8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e0:	f000 f810 	bl	8000504 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e4:	f000 f9ea 	bl	80008bc <MX_GPIO_Init>
	MX_TIM3_Init();
 80004e8:	f000 f966 	bl	80007b8 <MX_TIM3_Init>
	MX_SPI1_Init();
 80004ec:	f000 f92e 	bl	800074c <MX_SPI1_Init>
	MX_ADC_Init();
 80004f0:	f000 f86c 	bl	80005cc <MX_ADC_Init>
	MX_RTC_Init();
 80004f4:	f000 f8d0 	bl	8000698 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	affichemod();
 80004f8:	f000 fa8e 	bl	8000a18 <affichemod>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		fonctionmod();
 80004fc:	f000 fc7a 	bl	8000df4 <fonctionmod>
 8000500:	e7fc      	b.n	80004fc <main+0x24>
	...

08000504 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	2234      	movs	r2, #52	; 0x34
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 f9d0 	bl	80058b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xc4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800053a:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <SystemClock_Config+0xc4>)
 800053c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000540:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000542:	230a      	movs	r3, #10
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800054e:	2301      	movs	r3, #1
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800055a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000560:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000564:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fbda 	bl	8002d24 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x76>
	{
		Error_Handler();
 8000576:	f001 f955 	bl	8001824 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	613b      	str	r3, [r7, #16]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fef5 	bl	8003384 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80005a0:	f001 f940 	bl	8001824 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ac:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f939 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 80005bc:	f001 f932 	bl	8001824 <Error_Handler>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80005dc:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_ADC_Init+0xc4>)
 80005de:	4a2d      	ldr	r2, [pc, #180]	; (8000694 <MX_ADC_Init+0xc8>)
 80005e0:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_ADC_Init+0xc4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <MX_ADC_Init+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <MX_ADC_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <MX_ADC_Init+0xc4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_ADC_Init+0xc4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_ADC_Init+0xc4>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_ADC_Init+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_ADC_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ADC_Init+0xc4>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 2;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_ADC_Init+0xc4>)
 800061c:	2202      	movs	r2, #2
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_ADC_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_ADC_Init+0xc4>)
 800062a:	2210      	movs	r2, #16
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_ADC_Init+0xc4>)
 8000630:	2200      	movs	r2, #0
 8000632:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC_Init+0xc4>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <MX_ADC_Init+0xc4>)
 800063e:	f001 fbb5 	bl	8001dac <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8000648:	f001 f8ec 	bl	8001824 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8000654:	2307      	movs	r3, #7
 8000656:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_ADC_Init+0xc4>)
 800065e:	f001 fe71 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8000668:	f001 f8dc 	bl	8001824 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800066c:	2301      	movs	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_ADC_Init+0xc4>)
 800067a:	f001 fe63 	bl	8002344 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC_Init+0xbc>
	{
		Error_Handler();
 8000684:	f001 f8ce 	bl	8001824 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000008c 	.word	0x2000008c
 8000694:	40012400 	.word	0x40012400

08000698 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_RTC_Init+0xac>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	; (8000748 <MX_RTC_Init+0xb0>)
 80006b4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_RTC_Init+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_RTC_Init+0xac>)
 80006be:	227f      	movs	r2, #127	; 0x7f
 80006c0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_RTC_Init+0xac>)
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_RTC_Init+0xac>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_RTC_Init+0xac>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_RTC_Init+0xac>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <MX_RTC_Init+0xac>)
 80006dc:	f003 f9ae 	bl	8003a3c <HAL_RTC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_RTC_Init+0x52>
	{
		Error_Handler();
 80006e6:	f001 f89d 	bl	8001824 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x13;
 80006ea:	2313      	movs	r3, #19
 80006ec:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x14;
 80006ee:	2314      	movs	r3, #20
 80006f0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	480f      	ldr	r0, [pc, #60]	; (8000744 <MX_RTC_Init+0xac>)
 8000706:	f003 fa1c 	bl	8003b42 <HAL_RTC_SetTime>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 8000710:	f001 f888 	bl	8001824 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000714:	2304      	movs	r3, #4
 8000716:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000718:	2302      	movs	r3, #2
 800071a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x22;
 800071c:	2322      	movs	r3, #34	; 0x22
 800071e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24;
 8000720:	2324      	movs	r3, #36	; 0x24
 8000722:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_RTC_Init+0xac>)
 800072c:	f003 fb01 	bl	8003d32 <HAL_RTC_SetDate>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 8000736:	f001 f875 	bl	8001824 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000e0 	.word	0x200000e0
 8000748:	40002800 	.word	0x40002800

0800074c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800075c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x64>)
 8000798:	220a      	movs	r2, #10
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_SPI1_Init+0x64>)
 800079e:	f003 fc56 	bl	800404e <HAL_SPI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007a8:	f001 f83c 	bl	8001824 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000100 	.word	0x20000100
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_TIM3_Init+0xfc>)
 80007e4:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <MX_TIM3_Init+0x100>)
 80007e6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32000;
 80007e8:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <MX_TIM3_Init+0xfc>)
 80007ea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80007ee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <MX_TIM3_Init+0xfc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_TIM3_Init+0xfc>)
 80007f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007fc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080a:	482a      	ldr	r0, [pc, #168]	; (80008b4 <MX_TIM3_Init+0xfc>)
 800080c:	f003 feb6 	bl	800457c <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 8000816:	f001 f805 	bl	8001824 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4619      	mov	r1, r3
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000828:	f004 f9ec 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 8000832:	f000 fff7 	bl	8001824 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000838:	f003 ff2a 	bl	8004690 <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 8000842:	f000 ffef 	bl	8001824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	4817      	ldr	r0, [pc, #92]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000856:	f004 fce9 	bl	800522c <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 8000860:	f000 ffe0 	bl	8001824 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_TIM3_Init+0xfc>)
 800087c:	f004 f900 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 8000886:	f000 ffcd 	bl	8001824 <Error_Handler>
	}
	sConfigOC.Pulse = 500;
 800088a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800088e:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2204      	movs	r2, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM3_Init+0xfc>)
 8000898:	f004 f8f2 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 80008a2:	f000 ffbf 	bl	8001824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM3_Init+0xfc>)
 80008a8:	f001 f8b0 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000158 	.word	0x20000158
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a38      	ldr	r2, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_GPIO_Init+0x114>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <MX_GPIO_Init+0x114>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x114>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <MX_GPIO_Init+0x114>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2106      	movs	r1, #6
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x118>)
 8000920:	f002 f9cf 	bl	8002cc2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	482b      	ldr	r0, [pc, #172]	; (80009d8 <MX_GPIO_Init+0x11c>)
 800092c:	f002 f9c9 	bl	8002cc2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BTNCarte_Pin */
	GPIO_InitStruct.Pin = BTNCarte_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BTNCarte_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4825      	ldr	r0, [pc, #148]	; (80009dc <MX_GPIO_Init+0x120>)
 8000948:	f002 f814 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800094c:	2360      	movs	r3, #96	; 0x60
 800094e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	481f      	ldr	r0, [pc, #124]	; (80009dc <MX_GPIO_Init+0x120>)
 8000960:	f002 f808 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pins : L0_Pin L1_Pin */
	GPIO_InitStruct.Pin = L0_Pin|L1_Pin;
 8000964:	2306      	movs	r3, #6
 8000966:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x118>)
 800097c:	f001 fffa 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	480f      	ldr	r0, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x11c>)
 800099a:	f001 ffeb 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800099e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_GPIO_Init+0x11c>)
 80009b4:	f001 ffde 	bl	8002974 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2028      	movs	r0, #40	; 0x28
 80009be:	f001 ffa2 	bl	8002906 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f001 ffbb 	bl	800293e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <_write>:




int _write(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e009      	b.n	8000a06 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd46 	bl	800048c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbf1      	blt.n	80009f2 <_write+0x12>
	}
	return len;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <affichemod>:



void affichemod(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000a1c:	f004 fcb3 	bl	8005386 <MAX7219_Clear>
	MAX7219_Init();
 8000a20:	f004 fc7a 	bl	8005318 <MAX7219_Init>
	MAX7219_DisplayChar(1,'S', 0); // Pas de point décimal
 8000a24:	2200      	movs	r2, #0
 8000a26:	2153      	movs	r1, #83	; 0x53
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f004 fcc2 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2,'E', 0); // Avec point décimal
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2145      	movs	r1, #69	; 0x45
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 fcbd 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3,'T', 1); // Pas de point décimal
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2154      	movs	r1, #84	; 0x54
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f004 fcb8 	bl	80053b2 <MAX7219_DisplayChar>
	switchmode();
 8000a42:	f000 fb45 	bl	80010d0 <switchmode>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <affiche_num>:

void affiche_num(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000a50:	f004 fc99 	bl	8005386 <MAX7219_Clear>
	MAX7219_Init();
 8000a54:	f004 fc60 	bl	8005318 <MAX7219_Init>

	dizainesminutes = valeurMin / 10;
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <affiche_num+0xb4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <affiche_num+0xb8>)
 8000a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a62:	1092      	asrs	r2, r2, #2
 8000a64:	17db      	asrs	r3, r3, #31
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <affiche_num+0xbc>)
 8000a6a:	6013      	str	r3, [r2, #0]
	minutes = valeurMin % 10;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <affiche_num+0xb4>)
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <affiche_num+0xb8>)
 8000a72:	fb83 2301 	smull	r2, r3, r3, r1
 8000a76:	109a      	asrs	r2, r3, #2
 8000a78:	17cb      	asrs	r3, r1, #31
 8000a7a:	1ad2      	subs	r2, r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	1aca      	subs	r2, r1, r3
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <affiche_num+0xc0>)
 8000a88:	601a      	str	r2, [r3, #0]
	dizaines = valeur / 10;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <affiche_num+0xc4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <affiche_num+0xb8>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1092      	asrs	r2, r2, #2
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <affiche_num+0xc8>)
 8000a9c:	6013      	str	r3, [r2, #0]
	unites = valeur % 10;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <affiche_num+0xc4>)
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <affiche_num+0xb8>)
 8000aa4:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa8:	109a      	asrs	r2, r3, #2
 8000aaa:	17cb      	asrs	r3, r1, #31
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1aca      	subs	r2, r1, r3
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <affiche_num+0xcc>)
 8000aba:	601a      	str	r2, [r3, #0]

	MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <affiche_num+0xbc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3330      	adds	r3, #48	; 0x30
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f004 fc73 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, minutes + '0', 1);
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <affiche_num+0xc0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3330      	adds	r3, #48	; 0x30
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f004 fc6b 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <affiche_num+0xc8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3330      	adds	r3, #48	; 0x30
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f004 fc63 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, unites + '0', 0);
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <affiche_num+0xcc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3330      	adds	r3, #48	; 0x30
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	2004      	movs	r0, #4
 8000af8:	f004 fc5b 	bl	80053b2 <MAX7219_DisplayChar>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001a8 	.word	0x200001a8
 8000b04:	66666667 	.word	0x66666667
 8000b08:	200001b4 	.word	0x200001b4
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	200001a4 	.word	0x200001a4
 8000b14:	200001ac 	.word	0x200001ac
 8000b18:	200001b0 	.word	0x200001b0

08000b1c <affiche_horloge>:

void affiche_horloge(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000b20:	f004 fc31 	bl	8005386 <MAX7219_Clear>
	MAX7219_Init();
 8000b24:	f004 fbf8 	bl	8005318 <MAX7219_Init>

	dizainesminutes = valeurMin / 10;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <affiche_horloge+0xb4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <affiche_horloge+0xb8>)
 8000b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b32:	1092      	asrs	r2, r2, #2
 8000b34:	17db      	asrs	r3, r3, #31
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <affiche_horloge+0xbc>)
 8000b3a:	6013      	str	r3, [r2, #0]
	minutes = valeurMin % 10;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <affiche_horloge+0xb4>)
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <affiche_horloge+0xb8>)
 8000b42:	fb83 2301 	smull	r2, r3, r3, r1
 8000b46:	109a      	asrs	r2, r3, #2
 8000b48:	17cb      	asrs	r3, r1, #31
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	1aca      	subs	r2, r1, r3
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <affiche_horloge+0xc0>)
 8000b58:	601a      	str	r2, [r3, #0]
	dizainesheures = valeur / 10;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <affiche_horloge+0xc4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <affiche_horloge+0xb8>)
 8000b60:	fb82 1203 	smull	r1, r2, r2, r3
 8000b64:	1092      	asrs	r2, r2, #2
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <affiche_horloge+0xc8>)
 8000b6c:	6013      	str	r3, [r2, #0]
	heures = valeur % 10;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <affiche_horloge+0xc4>)
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <affiche_horloge+0xb8>)
 8000b74:	fb83 2301 	smull	r2, r3, r3, r1
 8000b78:	109a      	asrs	r2, r3, #2
 8000b7a:	17cb      	asrs	r3, r1, #31
 8000b7c:	1ad2      	subs	r2, r2, r3
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <affiche_horloge+0xcc>)
 8000b8a:	601a      	str	r2, [r3, #0]

	MAX7219_DisplayChar(1, dizainesheures + '0', 0);
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <affiche_horloge+0xc8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3330      	adds	r3, #48	; 0x30
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	f004 fc0b 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, heures + '0', 1);
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <affiche_horloge+0xcc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3330      	adds	r3, #48	; 0x30
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f004 fc03 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizainesminutes + '0', 0);
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <affiche_horloge+0xbc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3330      	adds	r3, #48	; 0x30
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f004 fbfb 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, minutes + '0', 0);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <affiche_horloge+0xc0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3330      	adds	r3, #48	; 0x30
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f004 fbf3 	bl	80053b2 <MAX7219_DisplayChar>

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001a8 	.word	0x200001a8
 8000bd4:	66666667 	.word	0x66666667
 8000bd8:	200001b4 	.word	0x200001b4
 8000bdc:	200001b8 	.word	0x200001b8
 8000be0:	200001a4 	.word	0x200001a4
 8000be4:	200001c0 	.word	0x200001c0
 8000be8:	200001bc 	.word	0x200001bc

08000bec <affiche_clear>:

void affiche_clear(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	MAX7219_Clear();
 8000bf0:	f004 fbc9 	bl	8005386 <MAX7219_Clear>
	MAX7219_Init();
 8000bf4:	f004 fb90 	bl	8005318 <MAX7219_Init>
	MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <affiche_clear+0x50>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3330      	adds	r3, #48	; 0x30
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	f004 fbd5 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, minutes + '0', 1);
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <affiche_clear+0x54>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3330      	adds	r3, #48	; 0x30
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	2002      	movs	r0, #2
 8000c14:	f004 fbcd 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, dizaines + '0', 0);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <affiche_clear+0x58>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3330      	adds	r3, #48	; 0x30
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	2003      	movs	r0, #3
 8000c24:	f004 fbc5 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, unites + '0', 0);
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <affiche_clear+0x5c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3330      	adds	r3, #48	; 0x30
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	2004      	movs	r0, #4
 8000c34:	f004 fbbd 	bl	80053b2 <MAX7219_DisplayChar>

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001b4 	.word	0x200001b4
 8000c40:	200001b8 	.word	0x200001b8
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	200001b0 	.word	0x200001b0

08000c4c <affiche_fuseau_horaire_et_heure>:


void affiche_fuseau_horaire_et_heure() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
	// Afficher le fuseau horaire
	// Afficher le fuseau horaire
	char *fuseau = fuseaux_horaires[current_index].nom;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <affiche_fuseau_horaire_et_heure+0x80>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <affiche_fuseau_horaire_et_heure+0x84>)
 8000c5a:	4413      	add	r3, r2
 8000c5c:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < strlen(fuseau); i++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e010      	b.n	8000c86 <affiche_fuseau_horaire_et_heure+0x3a>
		MAX7219_DisplayChar(i+1, fuseau[i], 0);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	1c58      	adds	r0, r3, #1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	f004 fb9d 	bl	80053b2 <MAX7219_DisplayChar>
		HAL_Delay(500); // Attendre un court laps de temps pour un effet de défilement
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f001 f874 	bl	8001d68 <HAL_Delay>
	for (size_t i = 0; i < strlen(fuseau); i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fa78 	bl	800017c <strlen>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d3e7      	bcc.n	8000c64 <affiche_fuseau_horaire_et_heure+0x18>
	}
	// Effacer les caractères restants
	for (size_t i = strlen(fuseau); i < 4; i++) {
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fa71 	bl	800017c <strlen>
 8000c9a:	60b8      	str	r0, [r7, #8]
 8000c9c:	e00d      	b.n	8000cba <affiche_fuseau_horaire_et_heure+0x6e>
		MAX7219_DisplayChar(i+1, ' ', 0); // Afficher un espace pour effacer les caractères précédents
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fb83 	bl	80053b2 <MAX7219_DisplayChar>
		HAL_Delay(500); // Attendre un court laps de temps pour un effet de défilement
 8000cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb0:	f001 f85a 	bl	8001d68 <HAL_Delay>
	for (size_t i = strlen(fuseau); i < 4; i++) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d9ee      	bls.n	8000c9e <affiche_fuseau_horaire_et_heure+0x52>
	}

	// Calculer et afficher l'heure locale
	affiche_heure_locale();
 8000cc0:	f000 f808 	bl	8000cd4 <affiche_heure_locale>
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000198 	.word	0x20000198
 8000cd0:	08006514 	.word	0x08006514

08000cd4 <affiche_heure_locale>:

void affiche_heure_locale() {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
	// Récupérer le décalage horaire du fuseau horaire actuel
	int decalage = fuseaux_horaires[current_index].decalage;
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <affiche_heure_locale+0xd4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a33      	ldr	r2, [pc, #204]	; (8000dac <affiche_heure_locale+0xd8>)
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4830      	ldr	r0, [pc, #192]	; (8000db0 <affiche_heure_locale+0xdc>)
 8000cf0:	f003 f8a3 	bl	8003e3a <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	482d      	ldr	r0, [pc, #180]	; (8000db0 <affiche_heure_locale+0xdc>)
 8000cfc:	f002 ffbb 	bl	8003c76 <HAL_RTC_GetTime>

	// Calculer l'heure locale en ajoutant le décalage
	int valeurdecalage = sTime.Hours + decalage;
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	461a      	mov	r2, r3
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	4413      	add	r3, r2
 8000d08:	61fb      	str	r3, [r7, #28]

	// Gérer les cas où l'heure dépasse 24 heures ou est inférieure à 0
	if (valeurdecalage >= 24) {
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	2b17      	cmp	r3, #23
 8000d0e:	dd03      	ble.n	8000d18 <affiche_heure_locale+0x44>
		valeurdecalage -= 24;
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3b18      	subs	r3, #24
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e005      	b.n	8000d24 <affiche_heure_locale+0x50>
	} else if (valeurdecalage < 0) {
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da02      	bge.n	8000d24 <affiche_heure_locale+0x50>
		valeurdecalage += 24;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3318      	adds	r3, #24
 8000d22:	61fb      	str	r3, [r7, #28]
	}

	// Afficher l'heure locale sur l'afficheur 7 segments
	MAX7219_DisplayChar(1, (valeurdecalage / 10) + '0', 0);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <affiche_heure_locale+0xe0>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1092      	asrs	r2, r2, #2
 8000d2e:	17db      	asrs	r3, r3, #31
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	3330      	adds	r3, #48	; 0x30
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f004 fb3a 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, (valeurdecalage % 10) + '0', 1);
 8000d3e:	69f9      	ldr	r1, [r7, #28]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <affiche_heure_locale+0xe0>)
 8000d42:	fb83 2301 	smull	r2, r3, r3, r1
 8000d46:	109a      	asrs	r2, r3, #2
 8000d48:	17cb      	asrs	r3, r1, #31
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	1aca      	subs	r2, r1, r3
 8000d56:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f004 fb27 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, (sTime.Minutes / 10) + '0', 0);
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <affiche_heure_locale+0xe4>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3330      	adds	r3, #48	; 0x30
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	2003      	movs	r0, #3
 8000d78:	f004 fb1b 	bl	80053b2 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, (sTime.Minutes  % 10) + '0', 0);
 8000d7c:	797a      	ldrb	r2, [r7, #5]
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <affiche_heure_locale+0xe4>)
 8000d80:	fba3 1302 	umull	r1, r3, r3, r2
 8000d84:	08d9      	lsrs	r1, r3, #3
 8000d86:	460b      	mov	r3, r1
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3330      	adds	r3, #48	; 0x30
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	2004      	movs	r0, #4
 8000d9a:	f004 fb0a 	bl	80053b2 <MAX7219_DisplayChar>
}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000198 	.word	0x20000198
 8000dac:	08006514 	.word	0x08006514
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	66666667 	.word	0x66666667
 8000db8:	cccccccd 	.word	0xcccccccd

08000dbc <boucle_affiche>:

void boucle_affiche() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
		affiche_fuseau_horaire_et_heure();
 8000dc0:	f7ff ff44 	bl	8000c4c <affiche_fuseau_horaire_et_heure>
		current_index = (current_index + 1) % (sizeof(fuseaux_horaires) / sizeof(fuseaux_horaires[0])); // Passer au prochain fuseau horaire
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <boucle_affiche+0x30>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <boucle_affiche+0x34>)
 8000dce:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd2:	089a      	lsrs	r2, r3, #2
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	1aca      	subs	r2, r1, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <boucle_affiche+0x30>)
 8000dde:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000); // Attendre un certain temps avant de passer au suivant (2 secondes dans cet exemple)
 8000de0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000de4:	f000 ffc0 	bl	8001d68 <HAL_Delay>

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000198 	.word	0x20000198
 8000df0:	cccccccd 	.word	0xcccccccd

08000df4 <fonctionmod>:


void fonctionmod(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch(mode){
 8000df8:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <fonctionmod+0x16c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 80a4 	bhi.w	8000f4c <fonctionmod+0x158>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fonctionmod+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e9d 	.word	0x08000e9d
 8000e18:	08000f27 	.word	0x08000f27
	case 1:
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET) {
 8000e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e20:	4850      	ldr	r0, [pc, #320]	; (8000f64 <fonctionmod+0x170>)
 8000e22:	f001 ff37 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 8091 	bne.w	8000f50 <fonctionmod+0x15c>
			printf("Lancement du chronometre \n");
 8000e2e:	484e      	ldr	r0, [pc, #312]	; (8000f68 <fonctionmod+0x174>)
 8000e30:	f004 fc62 	bl	80056f8 <puts>
			chronometre();
 8000e34:	f000 f8aa 	bl	8000f8c <chronometre>
		}
		break;
 8000e38:	e08a      	b.n	8000f50 <fonctionmod+0x15c>

	case 2:
		HAL_Delay(200);
 8000e3a:	20c8      	movs	r0, #200	; 0xc8
 8000e3c:	f000 ff94 	bl	8001d68 <HAL_Delay>
		if (mode == 2){
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <fonctionmod+0x16c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d129      	bne.n	8000e9c <fonctionmod+0xa8>
			if (valide == 0){
 8000e48:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <fonctionmod+0x178>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <fonctionmod+0x6a>
				//Faire un getTickCount pour eviter de spam le terminal.
				printf("Reglage du minuteur\n");
 8000e50:	4847      	ldr	r0, [pc, #284]	; (8000f70 <fonctionmod+0x17c>)
 8000e52:	f004 fc51 	bl	80056f8 <puts>
				adcfunction();
 8000e56:	f000 fa37 	bl	80012c8 <adcfunction>
				affiche_num();
 8000e5a:	f7ff fdf7 	bl	8000a4c <affiche_num>
			}
			if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET){
 8000e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e62:	4840      	ldr	r0, [pc, #256]	; (8000f64 <fonctionmod+0x170>)
 8000e64:	f001 ff16 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d116      	bne.n	8000e9c <fonctionmod+0xa8>
				HAL_ADC_Stop(&hadc);
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <fonctionmod+0x180>)
 8000e70:	f001 f942 	bl	80020f8 <HAL_ADC_Stop>
				adccheck ++;
 8000e74:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <fonctionmod+0x184>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a3f      	ldr	r2, [pc, #252]	; (8000f78 <fonctionmod+0x184>)
 8000e7c:	6013      	str	r3, [r2, #0]
				printf("Temps valide !\n");
 8000e7e:	483f      	ldr	r0, [pc, #252]	; (8000f7c <fonctionmod+0x188>)
 8000e80:	f004 fc3a 	bl	80056f8 <puts>
				if (adccheck == 2){
 8000e84:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <fonctionmod+0x184>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d107      	bne.n	8000e9c <fonctionmod+0xa8>
					valide = 1;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <fonctionmod+0x178>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
					printf("Lancement du minuteur\n");
 8000e92:	483b      	ldr	r0, [pc, #236]	; (8000f80 <fonctionmod+0x18c>)
 8000e94:	f004 fc30 	bl	80056f8 <puts>
					minuteur();
 8000e98:	f000 fb5a 	bl	8001550 <minuteur>
				}
			}
		}

	case 3:
		HAL_Delay(200);
 8000e9c:	20c8      	movs	r0, #200	; 0xc8
 8000e9e:	f000 ff63 	bl	8001d68 <HAL_Delay>
		if (mode == 3){
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <fonctionmod+0x16c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d154      	bne.n	8000f54 <fonctionmod+0x160>
			if (valide == 0){
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <fonctionmod+0x178>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d11c      	bne.n	8000eec <fonctionmod+0xf8>
				if (horlogevar != 0){
 8000eb2:	4b34      	ldr	r3, [pc, #208]	; (8000f84 <fonctionmod+0x190>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <fonctionmod+0xd6>
					printf("Reglage de l'alarme\n");
 8000eba:	4833      	ldr	r0, [pc, #204]	; (8000f88 <fonctionmod+0x194>)
 8000ebc:	f004 fc1c 	bl	80056f8 <puts>
					adchorloge();
 8000ec0:	f000 fa1e 	bl	8001300 <adchorloge>
					affiche_horloge();
 8000ec4:	f7ff fe2a 	bl	8000b1c <affiche_horloge>
 8000ec8:	e005      	b.n	8000ed6 <fonctionmod+0xe2>
				}
				else{
					horloge();
 8000eca:	f000 fba3 	bl	8001614 <horloge>
					HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 ff49 	bl	8001d68 <HAL_Delay>
				}
				if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4822      	ldr	r0, [pc, #136]	; (8000f64 <fonctionmod+0x170>)
 8000edc:	f001 feda 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <fonctionmod+0xf8>
					horlogevar = 1;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <fonctionmod+0x190>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
				}
			}
			if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET){
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	481c      	ldr	r0, [pc, #112]	; (8000f64 <fonctionmod+0x170>)
 8000ef2:	f001 fecf 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10a      	bne.n	8000f12 <fonctionmod+0x11e>
				HAL_ADC_Stop(&hadc);
 8000efc:	481d      	ldr	r0, [pc, #116]	; (8000f74 <fonctionmod+0x180>)
 8000efe:	f001 f8fb 	bl	80020f8 <HAL_ADC_Stop>
				adccheck ++;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <fonctionmod+0x184>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <fonctionmod+0x184>)
 8000f0a:	6013      	str	r3, [r2, #0]
				printf("Temps valide !\n");
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <fonctionmod+0x188>)
 8000f0e:	f004 fbf3 	bl	80056f8 <puts>
			}
			if (adccheck >= 2){
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <fonctionmod+0x184>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	dd1c      	ble.n	8000f54 <fonctionmod+0x160>
				valide =1;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <fonctionmod+0x178>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
				checkhorloge();
 8000f20:	f000 fbd8 	bl	80016d4 <checkhorloge>
			}
		}

		break;
 8000f24:	e016      	b.n	8000f54 <fonctionmod+0x160>
	case 4:
		HAL_Delay(200);
 8000f26:	20c8      	movs	r0, #200	; 0xc8
 8000f28:	f000 ff1e 	bl	8001d68 <HAL_Delay>
			if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET){
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <fonctionmod+0x170>)
 8000f32:	f001 feaf 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10d      	bne.n	8000f58 <fonctionmod+0x164>
				while (mode == 4){
 8000f3c:	e001      	b.n	8000f42 <fonctionmod+0x14e>
				boucle_affiche();
 8000f3e:	f7ff ff3d 	bl	8000dbc <boucle_affiche>
				while (mode == 4){
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <fonctionmod+0x16c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d0f9      	beq.n	8000f3e <fonctionmod+0x14a>
			}

		}

		break;
 8000f4a:	e005      	b.n	8000f58 <fonctionmod+0x164>
	default :
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e004      	b.n	8000f5a <fonctionmod+0x166>
		break;
 8000f50:	bf00      	nop
 8000f52:	e002      	b.n	8000f5a <fonctionmod+0x166>
		break;
 8000f54:	bf00      	nop
 8000f56:	e000      	b.n	8000f5a <fonctionmod+0x166>
		break;
 8000f58:	bf00      	nop

		break;
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000000 	.word	0x20000000
 8000f64:	40020000 	.word	0x40020000
 8000f68:	080063f4 	.word	0x080063f4
 8000f6c:	200001c4 	.word	0x200001c4
 8000f70:	08006410 	.word	0x08006410
 8000f74:	2000008c 	.word	0x2000008c
 8000f78:	200001c8 	.word	0x200001c8
 8000f7c:	08006424 	.word	0x08006424
 8000f80:	08006434 	.word	0x08006434
 8000f84:	200001cc 	.word	0x200001cc
 8000f88:	0800644c 	.word	0x0800644c

08000f8c <chronometre>:





	void chronometre() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
		MAX7219_Clear();
 8000f92:	f004 f9f8 	bl	8005386 <MAX7219_Clear>
		MAX7219_Init();
 8000f96:	f004 f9bf 	bl	8005318 <MAX7219_Init>
		stopchrono = 1 ;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <chronometre+0x10c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

		uint32_t start_time = HAL_GetTick(); // Temps de départ en millisecondes
 8000fa0:	f000 fed8 	bl	8001d54 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]

		uint32_t minutes = 0; // Initialisation des minutes à 0
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
		uint32_t seconds = 0; // Initialisation des secondes à 0
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
		while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 8000fae:	e068      	b.n	8001082 <chronometre+0xf6>
			uint32_t elapsed_time = HAL_GetTick() - start_time; // Temps écoulé depuis le début du chronomètre
 8000fb0:	f000 fed0 	bl	8001d54 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	603b      	str	r3, [r7, #0]

			// Calculez les minutes et les secondes
			minutes = (elapsed_time / (1000 * 60)) % 100; // Limiter les minutes à 99
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4a37      	ldr	r2, [pc, #220]	; (800109c <chronometre+0x110>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	0b9b      	lsrs	r3, r3, #14
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <chronometre+0x114>)
 8000fc8:	fba2 1203 	umull	r1, r2, r2, r3
 8000fcc:	0952      	lsrs	r2, r2, #5
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	fb01 f202 	mul.w	r2, r1, r2
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
			seconds = (elapsed_time / 1000) % 60;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <chronometre+0x118>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	099a      	lsrs	r2, r3, #6
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <chronometre+0x11c>)
 8000fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe8:	0959      	lsrs	r1, r3, #5
 8000fea:	460b      	mov	r3, r1
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	607b      	str	r3, [r7, #4]

			// Affichez les valeurs calculées sur les afficheurs 7 segments
			MAX7219_DisplayChar(1, minutes / 10 + '0', 0); // Affiche les dizaines de minutes
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <chronometre+0x120>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	3330      	adds	r3, #48	; 0x30
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	2001      	movs	r0, #1
 8001008:	f004 f9d3 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(2, minutes % 10 + '0', 1); // Affiche les minutes
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <chronometre+0x120>)
 8001010:	fba3 2301 	umull	r2, r3, r3, r1
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	1aca      	subs	r2, r1, r3
 8001020:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	2002      	movs	r0, #2
 800102a:	f004 f9c2 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(3, seconds / 10 + '0', 0); // Affiche les dizaines de secondes
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <chronometre+0x120>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	3330      	adds	r3, #48	; 0x30
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	2003      	movs	r0, #3
 8001040:	f004 f9b7 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(4, seconds % 10 + '0', 0); // Affiche les secondes
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <chronometre+0x120>)
 8001048:	fba3 2301 	umull	r2, r3, r3, r1
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	1aca      	subs	r2, r1, r3
 8001058:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	2004      	movs	r0, #4
 8001062:	f004 f9a6 	bl	80053b2 <MAX7219_DisplayChar>

			HAL_Delay(1000); // Attendez une seconde avant de mettre à jour l'affichage
 8001066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106a:	f000 fe7d 	bl	8001d68 <HAL_Delay>

			//MAX7219_Clear(); // Effacez l'affichage une fois que 99 minutes se sont écoulées
			if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <chronometre+0x124>)
 8001074:	f001 fe0e 	bl	8002c94 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <chronometre+0xf6>
				arreter_chronometre();
 800107e:	f000 f819 	bl	80010b4 <arreter_chronometre>
		while ((minutes < 99)&&(stopchrono == 1)) { // Tant que moins de 99 minutes se sont écoulées
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b62      	cmp	r3, #98	; 0x62
 8001086:	d803      	bhi.n	8001090 <chronometre+0x104>
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <chronometre+0x10c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d08f      	beq.n	8000fb0 <chronometre+0x24>
			}
		}
	}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000004 	.word	0x20000004
 800109c:	45e7b273 	.word	0x45e7b273
 80010a0:	51eb851f 	.word	0x51eb851f
 80010a4:	10624dd3 	.word	0x10624dd3
 80010a8:	88888889 	.word	0x88888889
 80010ac:	cccccccd 	.word	0xcccccccd
 80010b0:	40020000 	.word	0x40020000

080010b4 <arreter_chronometre>:





	void arreter_chronometre() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
		printf("Arret du chronometre\n");
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <arreter_chronometre+0x14>)
 80010ba:	f004 fb1d 	bl	80056f8 <puts>
		stopchrono = 0;
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <arreter_chronometre+0x18>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
		//MAX7219_DisplayChar(2, '0', 1);
		//MAX7219_DisplayChar(3, '0', 0);
		//MAX7219_DisplayChar(4, '0', 0);
		// Maintenant c'est dans la fonction affiche_clear();

	}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	08006460 	.word	0x08006460
 80010cc:	20000004 	.word	0x20000004

080010d0 <switchmode>:

	void switchmode(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
		switch(mode){
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <switchmode+0x58>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d822      	bhi.n	8001124 <switchmode+0x54>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <switchmode+0x14>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	08001101 	.word	0x08001101
 80010ec:	0800110d 	.word	0x0800110d
 80010f0:	08001119 	.word	0x08001119
		case 1:
			MAX7219_DisplayChar(4,'1', 0); // Pas de point décimal
 80010f4:	2200      	movs	r2, #0
 80010f6:	2131      	movs	r1, #49	; 0x31
 80010f8:	2004      	movs	r0, #4
 80010fa:	f004 f95a 	bl	80053b2 <MAX7219_DisplayChar>
			break;
 80010fe:	e011      	b.n	8001124 <switchmode+0x54>
		case 2:
			MAX7219_DisplayChar(4,'2', 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2132      	movs	r1, #50	; 0x32
 8001104:	2004      	movs	r0, #4
 8001106:	f004 f954 	bl	80053b2 <MAX7219_DisplayChar>
			break;
 800110a:	e00b      	b.n	8001124 <switchmode+0x54>
		case 3:
			MAX7219_DisplayChar(4,'3', 0); // Pas de point décimal
 800110c:	2200      	movs	r2, #0
 800110e:	2133      	movs	r1, #51	; 0x33
 8001110:	2004      	movs	r0, #4
 8001112:	f004 f94e 	bl	80053b2 <MAX7219_DisplayChar>
			break;
 8001116:	e005      	b.n	8001124 <switchmode+0x54>
		case 4:
			MAX7219_DisplayChar(4,'4', 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2134      	movs	r1, #52	; 0x34
 800111c:	2004      	movs	r0, #4
 800111e:	f004 f948 	bl	80053b2 <MAX7219_DisplayChar>
			break;
 8001122:	bf00      	nop
		}
	}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000

0800112c <adcsecondes>:

	void adcsecondes(){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
		//Secondes
		HAL_ADC_Start(&hadc);
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <adcsecondes+0x70>)
 8001134:	f000 ff80 	bl	8002038 <HAL_ADC_Start>
		ADC_ChannelConfTypeDef sConfig = {0}; // Réinitialisation de la structure sConfig
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_0;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <adcsecondes+0x70>)
 800114c:	f001 f8fa 	bl	8002344 <HAL_ADC_ConfigChannel>
		HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 8001150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001154:	2101      	movs	r1, #1
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <adcsecondes+0x70>)
 8001158:	f001 f88a 	bl	8002270 <HAL_ADC_PollForEvent>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800115c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <adcsecondes+0x70>)
 8001162:	f000 fff5 	bl	8002150 <HAL_ADC_PollForConversion>
		analogValue = HAL_ADC_GetValue(&hadc);
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <adcsecondes+0x70>)
 8001168:	f001 f8df 	bl	800232a <HAL_ADC_GetValue>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <adcsecondes+0x74>)
 8001172:	601a      	str	r2, [r3, #0]
		valeur = analogValue / 68;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <adcsecondes+0x74>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <adcsecondes+0x78>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	1152      	asrs	r2, r2, #5
 8001180:	17db      	asrs	r3, r3, #31
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <adcsecondes+0x7c>)
 8001186:	6013      	str	r3, [r2, #0]

		HAL_ADC_Stop(&hadc);
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <adcsecondes+0x70>)
 800118a:	f000 ffb5 	bl	80020f8 <HAL_ADC_Stop>
		//printf("ADC Value= %d\n", analogValue);
		//printf("Valeur 60 : %d\n",valeur);
		HAL_Delay(50);
 800118e:	2032      	movs	r0, #50	; 0x32
 8001190:	f000 fdea 	bl	8001d68 <HAL_Delay>
	}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	2000019c 	.word	0x2000019c
 80011a4:	78787879 	.word	0x78787879
 80011a8:	200001a4 	.word	0x200001a4

080011ac <adcminutes>:

	void adcminutes(int conversion){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
		// Minutes
		HAL_ADC_Start(&hadc);
 80011b4:	481c      	ldr	r0, [pc, #112]	; (8001228 <adcminutes+0x7c>)
 80011b6:	f000 ff3f 	bl	8002038 <HAL_ADC_Start>
		ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_1; // Réaffectation du canal ADC
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <adcminutes+0x7c>)
 80011d2:	f001 f8b7 	bl	8002344 <HAL_ADC_ConfigChannel>
		HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 80011d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011da:	2101      	movs	r1, #1
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <adcminutes+0x7c>)
 80011de:	f001 f847 	bl	8002270 <HAL_ADC_PollForEvent>
		HAL_ADC_PollForConversion(&hadc, 1000);
 80011e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e6:	4810      	ldr	r0, [pc, #64]	; (8001228 <adcminutes+0x7c>)
 80011e8:	f000 ffb2 	bl	8002150 <HAL_ADC_PollForConversion>
		analogValueMin = HAL_ADC_GetValue(&hadc);
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <adcminutes+0x7c>)
 80011ee:	f001 f89c 	bl	800232a <HAL_ADC_GetValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <adcminutes+0x80>)
 80011f8:	601a      	str	r2, [r3, #0]
		valeurMin = analogValueMin / conversion;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <adcminutes+0x80>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	fb92 f3f3 	sdiv	r3, r2, r3
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <adcminutes+0x84>)
 8001206:	6013      	str	r3, [r2, #0]

		HAL_ADC_Stop(&hadc);
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <adcminutes+0x7c>)
 800120a:	f000 ff75 	bl	80020f8 <HAL_ADC_Stop>
		//printf("ADC ValueMin= %d\n", analogValueMin);
		printf("Minutes : %d\n",valeurMin);
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <adcminutes+0x84>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <adcminutes+0x88>)
 8001216:	f004 fa09 	bl	800562c <iprintf>
		HAL_Delay(50);
 800121a:	2032      	movs	r0, #50	; 0x32
 800121c:	f000 fda4 	bl	8001d68 <HAL_Delay>
	}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000008c 	.word	0x2000008c
 800122c:	200001a0 	.word	0x200001a0
 8001230:	200001a8 	.word	0x200001a8
 8001234:	08006478 	.word	0x08006478

08001238 <adcheures>:

	void adcheures(){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
		// Heures
		HAL_ADC_Start(&hadc);
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <adcheures+0x7c>)
 8001240:	f000 fefa 	bl	8002038 <HAL_ADC_Start>
		ADC_ChannelConfTypeDef sConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_1; // Réaffectation du canal ADC
 800124e:	2301      	movs	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4817      	ldr	r0, [pc, #92]	; (80012b4 <adcheures+0x7c>)
 8001258:	f001 f874 	bl	8002344 <HAL_ADC_ConfigChannel>
		HAL_ADC_PollForEvent(&hadc, ADC_AWD_EVENT, 1000);
 800125c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001260:	2101      	movs	r1, #1
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <adcheures+0x7c>)
 8001264:	f001 f804 	bl	8002270 <HAL_ADC_PollForEvent>
		HAL_ADC_PollForConversion(&hadc, 1000);
 8001268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <adcheures+0x7c>)
 800126e:	f000 ff6f 	bl	8002150 <HAL_ADC_PollForConversion>
		analogValue = HAL_ADC_GetValue(&hadc);
 8001272:	4810      	ldr	r0, [pc, #64]	; (80012b4 <adcheures+0x7c>)
 8001274:	f001 f859 	bl	800232a <HAL_ADC_GetValue>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <adcheures+0x80>)
 800127e:	601a      	str	r2, [r3, #0]
		valeur = analogValue / 170;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <adcheures+0x80>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <adcheures+0x84>)
 8001286:	fb82 1203 	smull	r1, r2, r2, r3
 800128a:	1192      	asrs	r2, r2, #6
 800128c:	17db      	asrs	r3, r3, #31
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <adcheures+0x88>)
 8001292:	6013      	str	r3, [r2, #0]

		printf("Heures : %d\n",valeur);
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <adcheures+0x88>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <adcheures+0x8c>)
 800129c:	f004 f9c6 	bl	800562c <iprintf>

		HAL_ADC_Stop(&hadc);
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <adcheures+0x7c>)
 80012a2:	f000 ff29 	bl	80020f8 <HAL_ADC_Stop>
		HAL_Delay(50);
 80012a6:	2032      	movs	r0, #50	; 0x32
 80012a8:	f000 fd5e 	bl	8001d68 <HAL_Delay>
	}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000008c 	.word	0x2000008c
 80012b8:	2000019c 	.word	0x2000019c
 80012bc:	60606061 	.word	0x60606061
 80012c0:	200001a4 	.word	0x200001a4
 80012c4:	08006488 	.word	0x08006488

080012c8 <adcfunction>:

	void adcfunction(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
		if (adccheck == 0){
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <adcfunction+0x30>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <adcfunction+0x12>
			adcsecondes();
 80012d4:	f7ff ff2a 	bl	800112c <adcsecondes>
		}
		else if (adccheck == 1){
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
			adcminutes(41);
		}
	}
 80012d8:	e00b      	b.n	80012f2 <adcfunction+0x2a>
		else if (adccheck == 1){
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <adcfunction+0x30>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <adcfunction+0x2a>
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2102      	movs	r1, #2
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <adcfunction+0x34>)
 80012e8:	f001 fceb 	bl	8002cc2 <HAL_GPIO_WritePin>
			adcminutes(41);
 80012ec:	2029      	movs	r0, #41	; 0x29
 80012ee:	f7ff ff5d 	bl	80011ac <adcminutes>
	}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001c8 	.word	0x200001c8
 80012fc:	40020400 	.word	0x40020400

08001300 <adchorloge>:

	void adchorloge(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
		if (adccheck == 0){
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <adchorloge+0x30>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d103      	bne.n	8001314 <adchorloge+0x14>
			adcminutes(68);
 800130c:	2044      	movs	r0, #68	; 0x44
 800130e:	f7ff ff4d 	bl	80011ac <adcminutes>
		}
		else if (adccheck == 1){
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
			adcheures();
		}
	}
 8001312:	e00a      	b.n	800132a <adchorloge+0x2a>
		else if (adccheck == 1){
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <adchorloge+0x30>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <adchorloge+0x2a>
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2102      	movs	r1, #2
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <adchorloge+0x34>)
 8001322:	f001 fcce 	bl	8002cc2 <HAL_GPIO_WritePin>
			adcheures();
 8001326:	f7ff ff87 	bl	8001238 <adcheures>
	}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001c8 	.word	0x200001c8
 8001334:	40020400 	.word	0x40020400

08001338 <decrementunites>:

	void decrementunites(){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
		while (unites > 0){
 800133c:	e010      	b.n	8001360 <decrementunites+0x28>
			unites --;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <decrementunites+0x38>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <decrementunites+0x38>)
 8001346:	6013      	str	r3, [r2, #0]
			MAX7219_DisplayChar(4, unites + '0', 0);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <decrementunites+0x38>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3330      	adds	r3, #48	; 0x30
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	2004      	movs	r0, #4
 8001354:	f004 f82d 	bl	80053b2 <MAX7219_DisplayChar>
			HAL_Delay(1000);
 8001358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135c:	f000 fd04 	bl	8001d68 <HAL_Delay>
		while (unites > 0){
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <decrementunites+0x38>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dcea      	bgt.n	800133e <decrementunites+0x6>
		}
	}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001b0 	.word	0x200001b0

08001374 <decrementdizaines>:

	void decrementdizaines(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
		while (dizaines > 0){
 8001378:	e01f      	b.n	80013ba <decrementdizaines+0x46>
			decrementunites();
 800137a:	f7ff ffdd 	bl	8001338 <decrementunites>
			dizaines --;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <decrementdizaines+0x54>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <decrementdizaines+0x54>)
 8001386:	6013      	str	r3, [r2, #0]
			unites = 9;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <decrementdizaines+0x58>)
 800138a:	2209      	movs	r2, #9
 800138c:	601a      	str	r2, [r3, #0]
			MAX7219_DisplayChar(3, dizaines + '0', 0);
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <decrementdizaines+0x54>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3330      	adds	r3, #48	; 0x30
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	2003      	movs	r0, #3
 800139a:	f004 f80a 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(4, unites + '0', 0);
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <decrementdizaines+0x58>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3330      	adds	r3, #48	; 0x30
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	2004      	movs	r0, #4
 80013aa:	f004 f802 	bl	80053b2 <MAX7219_DisplayChar>
			HAL_Delay(1000);
 80013ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b2:	f000 fcd9 	bl	8001d68 <HAL_Delay>
			decrementunites();
 80013b6:	f7ff ffbf 	bl	8001338 <decrementunites>
		while (dizaines > 0){
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <decrementdizaines+0x54>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dcdb      	bgt.n	800137a <decrementdizaines+0x6>
		}
	}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001ac 	.word	0x200001ac
 80013cc:	200001b0 	.word	0x200001b0

080013d0 <decrementminutes>:

	void decrementminutes(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
		while(minutes > 0){
 80013d4:	e01f      	b.n	8001416 <decrementminutes+0x46>
			decrementunites();
 80013d6:	f7ff ffaf 	bl	8001338 <decrementunites>
			decrementdizaines();
 80013da:	f7ff ffcb 	bl	8001374 <decrementdizaines>
			minutes --;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <decrementminutes+0x54>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <decrementminutes+0x54>)
 80013e6:	6013      	str	r3, [r2, #0]
			dizaines = 6;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <decrementminutes+0x58>)
 80013ea:	2206      	movs	r2, #6
 80013ec:	601a      	str	r2, [r3, #0]
			MAX7219_DisplayChar(2, minutes + '0', 1);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <decrementminutes+0x54>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3330      	adds	r3, #48	; 0x30
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	2002      	movs	r0, #2
 80013fa:	f003 ffda 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(3, dizaines + '0', 0);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <decrementminutes+0x58>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3330      	adds	r3, #48	; 0x30
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	2003      	movs	r0, #3
 800140a:	f003 ffd2 	bl	80053b2 <MAX7219_DisplayChar>
			decrementunites();
 800140e:	f7ff ff93 	bl	8001338 <decrementunites>
			decrementdizaines();
 8001412:	f7ff ffaf 	bl	8001374 <decrementdizaines>
		while(minutes > 0){
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <decrementminutes+0x54>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dcdb      	bgt.n	80013d6 <decrementminutes+0x6>
		}
	}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001b8 	.word	0x200001b8
 8001428:	200001ac 	.word	0x200001ac

0800142c <decrementdizainesminutes>:

	void decrementdizainesminutes(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
		while(dizainesminutes > 0){
 8001430:	e023      	b.n	800147a <decrementdizainesminutes+0x4e>
			decrementunites();
 8001432:	f7ff ff81 	bl	8001338 <decrementunites>
			decrementdizaines();
 8001436:	f7ff ff9d 	bl	8001374 <decrementdizaines>
			decrementminutes();
 800143a:	f7ff ffc9 	bl	80013d0 <decrementminutes>
			dizainesminutes --;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <decrementdizainesminutes+0x5c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3b01      	subs	r3, #1
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <decrementdizainesminutes+0x5c>)
 8001446:	6013      	str	r3, [r2, #0]
			minutes = 10;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <decrementdizainesminutes+0x60>)
 800144a:	220a      	movs	r2, #10
 800144c:	601a      	str	r2, [r3, #0]
			MAX7219_DisplayChar(1, dizainesminutes + '0', 0);
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <decrementdizainesminutes+0x5c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3330      	adds	r3, #48	; 0x30
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	2001      	movs	r0, #1
 800145a:	f003 ffaa 	bl	80053b2 <MAX7219_DisplayChar>
			MAX7219_DisplayChar(2, minutes + '0', 1);
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <decrementdizainesminutes+0x60>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3330      	adds	r3, #48	; 0x30
 8001464:	2201      	movs	r2, #1
 8001466:	4619      	mov	r1, r3
 8001468:	2002      	movs	r0, #2
 800146a:	f003 ffa2 	bl	80053b2 <MAX7219_DisplayChar>
			decrementunites();
 800146e:	f7ff ff63 	bl	8001338 <decrementunites>
			decrementdizaines();
 8001472:	f7ff ff7f 	bl	8001374 <decrementdizaines>
			decrementminutes();
 8001476:	f7ff ffab 	bl	80013d0 <decrementminutes>
		while(dizainesminutes > 0){
 800147a:	4b03      	ldr	r3, [pc, #12]	; (8001488 <decrementdizainesminutes+0x5c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dcd7      	bgt.n	8001432 <decrementdizainesminutes+0x6>
		}
	}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200001b4 	.word	0x200001b4
 800148c:	200001b8 	.word	0x200001b8

08001490 <BUZZ>:

	void BUZZ(int i){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Start(&htim3);
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <BUZZ+0x44>)
 800149a:	f003 f8af 	bl	80045fc <HAL_TIM_Base_Start>
		for (int j=0; j<i;j++){
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e00e      	b.n	80014c2 <BUZZ+0x32>
			HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <BUZZ+0x44>)
 80014a8:	f003 f93a 	bl	8004720 <HAL_TIM_PWM_Start>
			HAL_Delay(2000);
 80014ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014b0:	f000 fc5a 	bl	8001d68 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80014b4:	2104      	movs	r1, #4
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <BUZZ+0x44>)
 80014b8:	f003 f9c8 	bl	800484c <HAL_TIM_PWM_Stop>
		for (int j=0; j<i;j++){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbec      	blt.n	80014a4 <BUZZ+0x14>
		}
	}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000158 	.word	0x20000158

080014d8 <MOT>:

	void MOT(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Start(&htim3);
 80014dc:	4819      	ldr	r0, [pc, #100]	; (8001544 <MOT+0x6c>)
 80014de:	f003 f88d 	bl	80045fc <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <MOT+0x6c>)
 80014e6:	f003 f91b 	bl	8004720 <HAL_TIM_PWM_Start>
		while (moteur == 0){
 80014ea:	e021      	b.n	8001530 <MOT+0x58>
			if (htim3.Instance->CCR1 < 250){
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MOT+0x6c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2bf9      	cmp	r3, #249	; 0xf9
 80014f4:	d80a      	bhi.n	800150c <MOT+0x34>
				htim3.Instance->CCR1 += 50;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MOT+0x6c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MOT+0x6c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3232      	adds	r2, #50	; 0x32
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(200);
 8001504:	20c8      	movs	r0, #200	; 0xc8
 8001506:	f000 fc2f 	bl	8001d68 <HAL_Delay>
 800150a:	e006      	b.n	800151a <MOT+0x42>
			}
			else{
				htim3.Instance->CCR1 = 0;
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MOT+0x6c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(100);
 8001514:	2064      	movs	r0, #100	; 0x64
 8001516:	f000 fc27 	bl	8001d68 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET){
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	480a      	ldr	r0, [pc, #40]	; (8001548 <MOT+0x70>)
 8001520:	f001 fbb8 	bl	8002c94 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <MOT+0x58>
				moteur = 1;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MOT+0x74>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
		while (moteur == 0){
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MOT+0x74>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0d9      	beq.n	80014ec <MOT+0x14>
			}
		}
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8001538:	2100      	movs	r1, #0
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <MOT+0x6c>)
 800153c:	f003 f986 	bl	800484c <HAL_TIM_PWM_Stop>
	}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000158 	.word	0x20000158
 8001548:	40020000 	.word	0x40020000
 800154c:	200001d0 	.word	0x200001d0

08001550 <minuteur>:

	void minuteur(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
		while ((dizainesminutes != 0) || (minutes != 0) || (dizaines != 0) || (unites !=0 )){
 8001554:	e01c      	b.n	8001590 <minuteur+0x40>
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2104      	movs	r1, #4
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <minuteur+0xa8>)
 800155c:	f001 fbb1 	bl	8002cc2 <HAL_GPIO_WritePin>
			if (dizainesminutes != 0) {decrementdizainesminutes();}
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <minuteur+0xac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <minuteur+0x1c>
 8001568:	f7ff ff60 	bl	800142c <decrementdizainesminutes>
			if (minutes !=0) {decrementminutes();}
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <minuteur+0xb0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <minuteur+0x28>
 8001574:	f7ff ff2c 	bl	80013d0 <decrementminutes>
			if (dizaines !=0) {decrementdizaines();}
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <minuteur+0xb4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <minuteur+0x34>
 8001580:	f7ff fef8 	bl	8001374 <decrementdizaines>
			if (unites !=0) {decrementunites();}
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <minuteur+0xb8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <minuteur+0x40>
 800158c:	f7ff fed4 	bl	8001338 <decrementunites>
		while ((dizainesminutes != 0) || (minutes != 0) || (dizaines != 0) || (unites !=0 )){
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <minuteur+0xac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1de      	bne.n	8001556 <minuteur+0x6>
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <minuteur+0xb0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1da      	bne.n	8001556 <minuteur+0x6>
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <minuteur+0xb4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1d6      	bne.n	8001556 <minuteur+0x6>
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <minuteur+0xb8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1d2      	bne.n	8001556 <minuteur+0x6>
		}
		BUZZ(5);
 80015b0:	2005      	movs	r0, #5
 80015b2:	f7ff ff6d 	bl	8001490 <BUZZ>

		// Faut tout reset apres mais l'affichage marche pas
		unites = 0;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <minuteur+0xb8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
		dizaines = 0;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <minuteur+0xb4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
		minutes = 0;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <minuteur+0xb0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
		dizainesminutes = 0;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <minuteur+0xac>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2102      	movs	r1, #2
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <minuteur+0xa8>)
 80015d4:	f001 fb75 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2104      	movs	r1, #4
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <minuteur+0xa8>)
 80015de:	f001 fb70 	bl	8002cc2 <HAL_GPIO_WritePin>

		adccheck = 0;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <minuteur+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
		valide = 0;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <minuteur+0xc0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
		affiche_num();
 80015ee:	f7ff fa2d 	bl	8000a4c <affiche_num>
	}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400
 80015fc:	200001b4 	.word	0x200001b4
 8001600:	200001b8 	.word	0x200001b8
 8001604:	200001ac 	.word	0x200001ac
 8001608:	200001b0 	.word	0x200001b0
 800160c:	200001c8 	.word	0x200001c8
 8001610:	200001c4 	.word	0x200001c4

08001614 <horloge>:


	void horloge(){
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;

		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4829      	ldr	r0, [pc, #164]	; (80016c8 <horloge+0xb4>)
 8001622:	f002 fc0a 	bl	8003e3a <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4826      	ldr	r0, [pc, #152]	; (80016c8 <horloge+0xb4>)
 800162e:	f002 fb22 	bl	8003c76 <HAL_RTC_GetTime>

		MAX7219_Clear();
 8001632:	f003 fea8 	bl	8005386 <MAX7219_Clear>
		MAX7219_Init();
 8001636:	f003 fe6f 	bl	8005318 <MAX7219_Init>
		MAX7219_DisplayChar(1, sTime.Hours / 10 + '0', 0); // Affiche les dizaines de minutes
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <horloge+0xb8>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	3330      	adds	r3, #48	; 0x30
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	2001      	movs	r0, #1
 800164e:	f003 feb0 	bl	80053b2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, sTime.Hours % 10 + '0', 1); // Affiche les minutes
 8001652:	793a      	ldrb	r2, [r7, #4]
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <horloge+0xb8>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	08d9      	lsrs	r1, r3, #3
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3330      	adds	r3, #48	; 0x30
 800166a:	2201      	movs	r2, #1
 800166c:	4619      	mov	r1, r3
 800166e:	2002      	movs	r0, #2
 8001670:	f003 fe9f 	bl	80053b2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, sTime.Minutes / 10 + '0', 0); // Affiche les dizaines de secondes
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <horloge+0xb8>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3330      	adds	r3, #48	; 0x30
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	2003      	movs	r0, #3
 8001688:	f003 fe93 	bl	80053b2 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, sTime.Minutes % 10 + '0', 0);
 800168c:	797a      	ldrb	r2, [r7, #5]
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <horloge+0xb8>)
 8001690:	fba3 1302 	umull	r1, r3, r3, r2
 8001694:	08d9      	lsrs	r1, r3, #3
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3330      	adds	r3, #48	; 0x30
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	2004      	movs	r0, #4
 80016aa:	f003 fe82 	bl	80053b2 <MAX7219_DisplayChar>
		printf("%02d:%02d:%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	461a      	mov	r2, r3
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <horloge+0xbc>)
 80016ba:	f003 ffb7 	bl	800562c <iprintf>

	}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000e0 	.word	0x200000e0
 80016cc:	cccccccd 	.word	0xcccccccd
 80016d0:	08006498 	.word	0x08006498

080016d4 <checkhorloge>:

	void inithorloge(){
		horloge();
	}

	void checkhorloge(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	482e      	ldr	r0, [pc, #184]	; (800179c <checkhorloge+0xc8>)
 80016e2:	f002 fbaa 	bl	8003e3a <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	482b      	ldr	r0, [pc, #172]	; (800179c <checkhorloge+0xc8>)
 80016ee:	f002 fac2 	bl	8003c76 <HAL_RTC_GetTime>

		if (((valeur >= sTime.Hours) &&(valeurMin >= sTime.Minutes)) || (valeur >= sTime.Hours)){
 80016f2:	793b      	ldrb	r3, [r7, #4]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <checkhorloge+0xcc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dc05      	bgt.n	800170a <checkhorloge+0x36>
 80016fe:	797b      	ldrb	r3, [r7, #5]
 8001700:	461a      	mov	r2, r3
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <checkhorloge+0xd0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	dd05      	ble.n	8001716 <checkhorloge+0x42>
 800170a:	793b      	ldrb	r3, [r7, #4]
 800170c:	461a      	mov	r2, r3
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <checkhorloge+0xcc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	dc1a      	bgt.n	800174c <checkhorloge+0x78>
			printf("Temps actuel : %d Heures, %d Minutes\n",sTime.Hours, sTime.Minutes);
 8001716:	793b      	ldrb	r3, [r7, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	461a      	mov	r2, r3
 800171e:	4822      	ldr	r0, [pc, #136]	; (80017a8 <checkhorloge+0xd4>)
 8001720:	f003 ff84 	bl	800562c <iprintf>
			printf("Heure de l'alarme : %d Heures, %d Minutes\n",valeur, valeurMin);
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <checkhorloge+0xcc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <checkhorloge+0xd0>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	481f      	ldr	r0, [pc, #124]	; (80017ac <checkhorloge+0xd8>)
 8001730:	f003 ff7c 	bl	800562c <iprintf>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	4818      	ldr	r0, [pc, #96]	; (800179c <checkhorloge+0xc8>)
 800173c:	f002 fb7d 	bl	8003e3a <HAL_RTC_GetDate>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <checkhorloge+0xc8>)
 8001748:	f002 fa95 	bl	8003c76 <HAL_RTC_GetTime>
		}

		if ((valeurMin <= sTime.Minutes) && (valeur <= sTime.Hours)){
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	461a      	mov	r2, r3
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <checkhorloge+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	db1d      	blt.n	8001794 <checkhorloge+0xc0>
 8001758:	793b      	ldrb	r3, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <checkhorloge+0xcc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	db17      	blt.n	8001794 <checkhorloge+0xc0>

			printf("ALARME\n");
 8001764:	4812      	ldr	r0, [pc, #72]	; (80017b0 <checkhorloge+0xdc>)
 8001766:	f003 ffc7 	bl	80056f8 <puts>
			MOT();
 800176a:	f7ff feb5 	bl	80014d8 <MOT>
			horlogevar = 0;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <checkhorloge+0xe0>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
			valide = 0;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <checkhorloge+0xe4>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
			adccheck = 0;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <checkhorloge+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			moteur = 0;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <checkhorloge+0xec>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
			affiche_clear();
 8001786:	f7ff fa31 	bl	8000bec <affiche_clear>
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2102      	movs	r1, #2
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <checkhorloge+0xf0>)
 8001790:	f001 fa97 	bl	8002cc2 <HAL_GPIO_WritePin>


		}
	}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200000e0 	.word	0x200000e0
 80017a0:	200001a4 	.word	0x200001a4
 80017a4:	200001a8 	.word	0x200001a8
 80017a8:	080064ac 	.word	0x080064ac
 80017ac:	080064d4 	.word	0x080064d4
 80017b0:	08006500 	.word	0x08006500
 80017b4:	200001cc 	.word	0x200001cc
 80017b8:	200001c4 	.word	0x200001c4
 80017bc:	200001c8 	.word	0x200001c8
 80017c0:	200001d0 	.word	0x200001d0
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_GPIO_EXTI_Callback>:


	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]

		switch (GPIO_Pin){
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d8:	d11b      	bne.n	8001812 <HAL_GPIO_EXTI_Callback+0x4a>
		case BTNCarte_Pin :
			if (mode < 4){
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	dc0b      	bgt.n	80017fa <HAL_GPIO_EXTI_Callback+0x32>
				mode ++;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 80017ea:	6013      	str	r3, [r2, #0]
				printf("Mode : %d\n", mode);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <HAL_GPIO_EXTI_Callback+0x58>)
 80017f4:	f003 ff1a 	bl	800562c <iprintf>
 80017f8:	e008      	b.n	800180c <HAL_GPIO_EXTI_Callback+0x44>
			}
			else{
				mode = 1;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
				printf("Mode : %d\n", mode);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_GPIO_EXTI_Callback+0x54>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <HAL_GPIO_EXTI_Callback+0x58>)
 8001808:	f003 ff10 	bl	800562c <iprintf>
			}
			affichemod();
 800180c:	f7ff f904 	bl	8000a18 <affichemod>
			break;
 8001810:	bf00      	nop
		}
	}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000000 	.word	0x20000000
 8001820:	08006508 	.word	0x08006508

08001824 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_MspInit+0x58>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <HAL_MspInit+0x58>)
 800183c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001840:	6253      	str	r3, [r2, #36]	; 0x24
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_MspInit+0x58>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_MspInit+0x58>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_MspInit+0x58>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_MspInit+0x58>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_MspInit+0x58>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_MspInit+0x58>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6253      	str	r3, [r2, #36]	; 0x24
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_MspInit+0x58>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_ADC_MspInit+0x74>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d123      	bne.n	80018f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = RV1_Pin|RV2_Pin;
 80018de:	2303      	movs	r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_ADC_MspInit+0x7c>)
 80018f2:	f001 f83f 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012400 	.word	0x40012400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_RTC_MspInit+0x24>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d102      	bne.n	8001924 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RTC_MspInit+0x28>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40002800 	.word	0x40002800
 8001934:	424706d8 	.word	0x424706d8

08001938 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_SPI_MspInit+0x7c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d127      	bne.n	80019aa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 8001960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_SPI_MspInit+0x80>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800198a:	23e0      	movs	r3, #224	; 0xe0
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199a:	2305      	movs	r3, #5
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_SPI_MspInit+0x84>)
 80019a6:	f000 ffe5 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_TIM_Base_MspInit+0x44>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d113      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_Base_MspInit+0x48>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_TIM_Base_MspInit+0x48>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6253      	str	r3, [r2, #36]	; 0x24
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x48>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	201d      	movs	r0, #29
 80019f0:	f000 ff89 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f4:	201d      	movs	r0, #29
 80019f6:	f000 ffa2 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40000400 	.word	0x40000400
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_TIM_MspPostInit+0x9c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d137      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_TIM_MspPostInit+0xa0>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HAL_TIM_MspPostInit+0xa4>)
 8001a7a:	f000 ff7b 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT_Pin;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOT_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <HAL_TIM_MspPostInit+0xa8>)
 8001a9a:	f000 ff6b 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 f917 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM3_IRQHandler+0x10>)
 8001b0e:	f002 feda 	bl	80048c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000158 	.word	0x20000158

08001b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTNCarte_Pin);
 8001b20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b24:	f001 f8e6 	bl	8002cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
  }

  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_isatty>:

int _isatty(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f003 feac 	bl	8005954 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20014000 	.word	0x20014000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200001d4 	.word	0x200001d4
 8001c30:	20000328 	.word	0x20000328

08001c34 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff fff8 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f003 fe79 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7fe fc33 	bl	80004d8 <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c7c:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8001c80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c84:	20000328 	.word	0x20000328

08001c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_IRQHandler>

08001c8a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 fe2b 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f000 f80e 	bl	8001cbc <HAL_InitTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	e001      	b.n	8001cb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cac:	f7ff fdc0 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_InitTick+0x68>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d022      	beq.n	8001d16 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_InitTick+0x6c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_InitTick+0x68>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fe38 	bl	800295a <HAL_SYSTICK_Config>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10f      	bne.n	8001d10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	d809      	bhi.n	8001d0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfe:	f000 fe02 	bl	8002906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_InitTick+0x70>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e004      	b.n	8001d1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e001      	b.n	8001d1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000010 	.word	0x20000010
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x1c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x20>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_IncTick+0x1c>)
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200001d8 	.word	0x200001d8
 8001d50:	20000010 	.word	0x20000010

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_GetTick+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	200001d8 	.word	0x200001d8

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d004      	beq.n	8001d8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_Delay+0x40>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8c:	bf00      	nop
 8001d8e:	f7ff ffe1 	bl	8001d54 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d8f7      	bhi.n	8001d8e <HAL_Delay+0x26>
  {
  }
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000010 	.word	0x20000010

08001dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e127      	b.n	800201c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de8:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <HAL_ADC_Init+0x278>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a8d      	ldr	r2, [pc, #564]	; (8002024 <HAL_ADC_Init+0x278>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_ADC_Init+0x278>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff fd43 	bl	800188c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 80ff 	bne.w	8002012 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1c:	f023 0302 	bic.w	r3, r3, #2
 8001e20:	f043 0202 	orr.w	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_ADC_Init+0x27c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	497c      	ldr	r1, [pc, #496]	; (8002028 <HAL_ADC_Init+0x27c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e42:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e50:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001e66:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	2302      	movs	r3, #2
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001e8e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e92:	4313      	orrs	r3, r2
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d007      	beq.n	8001eae <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d04f      	beq.n	8001f5c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ece:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6912      	ldr	r2, [r2, #16]
 8001ed4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001ed8:	d003      	beq.n	8001ee2 <HAL_ADC_Init+0x136>
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6912      	ldr	r2, [r2, #16]
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_ADC_Init+0x13c>
 8001ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_Init+0x13e>
 8001ee8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001eea:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d125      	bne.n	8001f48 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d114      	bne.n	8001f30 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	617a      	str	r2, [r7, #20]
  return result;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f2e:	e00b      	b.n	8001f48 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_ADC_Init+0x280>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_ADC_Init+0x284>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f78:	d003      	beq.n	8001f82 <HAL_ADC_Init+0x1d6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d119      	bne.n	8001fb6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001f96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	fa03 f202 	lsl.w	r2, r3, r2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_ADC_Init+0x288>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10b      	bne.n	8001fee <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	f023 0303 	bic.w	r3, r3, #3
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fec:	e014      	b.n	8002018 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f023 0312 	bic.w	r3, r3, #18
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002010:	e002      	b.n	8002018 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800201c:	4618      	mov	r0, r3
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40012700 	.word	0x40012700
 800202c:	fcfc16ff 	.word	0xfcfc16ff
 8002030:	c0fff189 	.word	0xc0fff189
 8002034:	bf80fffe 	.word	0xbf80fffe

08002038 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Start+0x1a>
 800204e:	2302      	movs	r3, #2
 8002050:	e04e      	b.n	80020f0 <HAL_ADC_Start+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fade 	bl	800261c <ADC_Enable>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d141      	bne.n	80020ee <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	f023 0206 	bic.w	r2, r3, #6
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
 80020b6:	e002      	b.n	80020be <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020ce:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ec:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Stop+0x1a>
 800210e:	2302      	movs	r3, #2
 8002110:	e01a      	b.n	8002148 <HAL_ADC_Stop+0x50>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fada 	bl	80026d4 <ADC_ConversionStop_Disable>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216c:	d113      	bne.n	8002196 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217c:	d10b      	bne.n	8002196 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e068      	b.n	8002268 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002196:	f7ff fddd 	bl	8001d54 <HAL_GetTick>
 800219a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800219c:	e021      	b.n	80021e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d01d      	beq.n	80021e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_ADC_PollForConversion+0x6c>
 80021ac:	f7ff fdd2 	bl	8001d54 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d212      	bcs.n	80021e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10b      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	f043 0204 	orr.w	r2, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e042      	b.n	8002268 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0d6      	beq.n	800219e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0212 	mvn.w	r2, #18
 8002200:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d124      	bne.n	8002266 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11f      	bne.n	8002266 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800223e:	2b00      	cmp	r3, #0
 8002240:	d111      	bne.n	8002266 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_ADC_PollForEvent>:
  *            @arg ADC_OVR_EVENT: ADC Overrun event.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002280:	f7ff fd68 	bl	8001d54 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]
  
  /* Check selected event flag */
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8002286:	e022      	b.n	80022ce <HAL_ADC_PollForEvent+0x5e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d01e      	beq.n	80022ce <HAL_ADC_PollForEvent+0x5e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <HAL_ADC_PollForEvent+0x36>
 8002296:	f7ff fd5d 	bl	8001d54 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d213      	bcs.n	80022ce <HAL_ADC_PollForEvent+0x5e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4013      	ands	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d00b      	beq.n	80022ce <HAL_ADC_PollForEvent+0x5e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f043 0204 	orr.w	r2, r3, #4
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e029      	b.n	8002322 <HAL_ADC_PollForEvent+0xb2>
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d1d4      	bne.n	8002288 <HAL_ADC_PollForEvent+0x18>
        }
      }
    }
  }
  
  switch(EventType)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10b      	bne.n	80022fc <HAL_ADC_PollForEvent+0x8c>
  {
  /* Analog watchdog (level out of window) event */
  case ADC_AWD_EVENT:
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	64da      	str	r2, [r3, #76]	; 0x4c
      
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0201 	mvn.w	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    break;
 80022fa:	e011      	b.n	8002320 <HAL_ADC_PollForEvent+0xb0>
    /* Note: On STM32L1, ADC overrun can be set through other parameters      */
    /*       refer to description of parameter "EOCSelection" for more        */
    /*       details.                                                         */

    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	f043 0202 	orr.w	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0220 	mvn.w	r2, #32
 800231c:	601a      	str	r2, [r3, #0]
    break;
 800231e:	bf00      	nop
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x20>
 8002360:	2302      	movs	r3, #2
 8002362:	e14f      	b.n	8002604 <HAL_ADC_ConfigChannel+0x2c0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d81c      	bhi.n	80023ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b05      	subs	r3, #5
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4019      	ands	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3b05      	subs	r3, #5
 80023a0:	fa00 f203 	lsl.w	r2, r0, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
 80023ac:	e07e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d81c      	bhi.n	80023f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b23      	subs	r3, #35	; 0x23
 80023c8:	221f      	movs	r2, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4019      	ands	r1, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b23      	subs	r3, #35	; 0x23
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80023ee:	e05d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b12      	cmp	r3, #18
 80023f6:	d81c      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b41      	subs	r3, #65	; 0x41
 800240a:	221f      	movs	r2, #31
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b41      	subs	r3, #65	; 0x41
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
 8002430:	e03c      	b.n	80024ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b18      	cmp	r3, #24
 8002438:	d81c      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b5f      	subs	r3, #95	; 0x5f
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b5f      	subs	r3, #95	; 0x5f
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
 8002472:	e01b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b7d      	subs	r3, #125	; 0x7d
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b7d      	subs	r3, #125	; 0x7d
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d81a      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6959      	ldr	r1, [r3, #20]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	2207      	movs	r2, #7
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4019      	ands	r1, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6898      	ldr	r0, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	e05d      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b13      	cmp	r3, #19
 80024f0:	d81c      	bhi.n	800252c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	3b1e      	subs	r3, #30
 8002504:	2207      	movs	r2, #7
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	4019      	ands	r1, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6898      	ldr	r0, [r3, #8]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	3b1e      	subs	r3, #30
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
 800252a:	e03c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b1d      	cmp	r3, #29
 8002532:	d81c      	bhi.n	800256e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	3b3c      	subs	r3, #60	; 0x3c
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4019      	ands	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6898      	ldr	r0, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	3b3c      	subs	r3, #60	; 0x3c
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	e01b      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	3b5a      	subs	r3, #90	; 0x5a
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6898      	ldr	r0, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b5a      	subs	r3, #90	; 0x5a
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d003      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025b2:	2b11      	cmp	r3, #17
 80025b4:	d121      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_ADC_ConfigChannel+0x2cc>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11b      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_ADC_ConfigChannel+0x2cc>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_ADC_ConfigChannel+0x2cc>)
 80025c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025cc:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d111      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_ADC_ConfigChannel+0x2d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_ADC_ConfigChannel+0x2d4>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	0c9a      	lsrs	r2, r3, #18
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40012700 	.word	0x40012700
 8002614:	20000008 	.word	0x20000008
 8002618:	431bde83 	.word	0x431bde83

0800261c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d043      	beq.n	80026c2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <ADC_Enable+0xb0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <ADC_Enable+0xb4>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800265e:	e002      	b.n	8002666 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3b01      	subs	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800266c:	f7ff fb72 	bl	8001d54 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002672:	e01f      	b.n	80026b4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002674:	f7ff fb6e 	bl	8001d54 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d918      	bls.n	80026b4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d011      	beq.n	80026b4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d1d8      	bne.n	8002674 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000008 	.word	0x20000008
 80026d0:	431bde83 	.word	0x431bde83

080026d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d12e      	bne.n	800274c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fe:	f7ff fb29 	bl	8001d54 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002704:	e01b      	b.n	800273e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002706:	f7ff fb25 	bl	8001d54 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d914      	bls.n	800273e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d10d      	bne.n	800273e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d0dc      	beq.n	8002706 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <__NVIC_SetPriorityGrouping>:
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4906      	ldr	r1, [pc, #24]	; (80027f0 <__NVIC_EnableIRQ+0x34>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100

080027f4 <__NVIC_SetPriority>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db0a      	blt.n	800281e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <__NVIC_SetPriority+0x4c>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800281c:	e00a      	b.n	8002834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4908      	ldr	r1, [pc, #32]	; (8002844 <__NVIC_SetPriority+0x50>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3b04      	subs	r3, #4
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	440b      	add	r3, r1
 8002832:	761a      	strb	r2, [r3, #24]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <NVIC_EncodePriority>:
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf28      	it	cs
 8002866:	2304      	movcs	r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	d902      	bls.n	8002878 <NVIC_EncodePriority+0x30>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3b03      	subs	r3, #3
 8002876:	e000      	b.n	800287a <NVIC_EncodePriority+0x32>
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43d9      	mvns	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	4313      	orrs	r3, r2
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <SysTick_Config>:
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff90 	bl	80027f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff2d 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff42 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff90 	bl	8002848 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5f 	bl	80027f4 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff35 	bl	80027bc <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800298a:	e160      	b.n	8002c4e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2101      	movs	r1, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8152 	beq.w	8002c48 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d005      	beq.n	80029bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d130      	bne.n	8002a1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80029f2:	2201      	movs	r2, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f003 0201 	and.w	r2, r3, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d017      	beq.n	8002a5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d123      	bne.n	8002aae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	6939      	ldr	r1, [r7, #16]
 8002aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0203 	and.w	r2, r3, #3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80ac 	beq.w	8002c48 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af0:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_GPIO_Init+0x2f8>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <HAL_GPIO_Init+0x2f8>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <HAL_GPIO_Init+0x2f8>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b08:	4a59      	ldr	r2, [pc, #356]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	220f      	movs	r2, #15
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d025      	beq.n	8002b80 <HAL_GPIO_Init+0x20c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d01f      	beq.n	8002b7c <HAL_GPIO_Init+0x208>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x308>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d019      	beq.n	8002b78 <HAL_GPIO_Init+0x204>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_GPIO_Init+0x200>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x310>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00d      	beq.n	8002b70 <HAL_GPIO_Init+0x1fc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x314>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <HAL_GPIO_Init+0x1f8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x318>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_GPIO_Init+0x1f4>
 8002b64:	2306      	movs	r3, #6
 8002b66:	e00c      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b68:	2307      	movs	r3, #7
 8002b6a:	e00a      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	e008      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b70:	2304      	movs	r3, #4
 8002b72:	e006      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b74:	2303      	movs	r3, #3
 8002b76:	e004      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b80:	2300      	movs	r3, #0
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b92:	4937      	ldr	r1, [pc, #220]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bc4:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f ae97 	bne.w	800298c <HAL_GPIO_Init+0x18>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020400 	.word	0x40020400
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	40020c00 	.word	0x40020c00
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40021400 	.word	0x40021400
 8002c8c:	40021800 	.word	0x40021800
 8002c90:	40010400 	.word	0x40010400

08002c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd2:	787b      	ldrb	r3, [r7, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002cde:	e003      	b.n	8002ce8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	041a      	lsls	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fd58 	bl	80017c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e31d      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d40:	4b91      	ldr	r3, [pc, #580]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d07b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d006      	beq.n	8002d6a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5e>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d10b      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6a:	4b87      	ldr	r3, [pc, #540]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d06a      	beq.n	8002e4c <HAL_RCC_OscConfig+0x128>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d166      	bne.n	8002e4c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e2f7      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x74>
 8002d8a:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7e      	ldr	r2, [pc, #504]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e02d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0x96>
 8002da0:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e01c      	b.n	8002df4 <HAL_RCC_OscConfig+0xd0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xb8>
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6e      	ldr	r3, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6d      	ldr	r2, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd0>
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe ffaa 	bl	8001d54 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe ffa6 	bl	8001d54 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2ad      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e16:	4b5c      	ldr	r3, [pc, #368]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe0>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe ff96 	bl	8001d54 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe ff92 	bl	8001d54 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e299      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e3e:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x108>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d05a      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_OscConfig+0x176>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x160>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e276      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	493d      	ldr	r1, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e98:	e03a      	b.n	8002f10 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d020      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea2:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCC_OscConfig+0x268>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe ff54 	bl	8001d54 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe ff50 	bl	8001d54 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e257      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	492a      	ldr	r1, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	e015      	b.n	8002f10 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_OscConfig+0x268>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe ff33 	bl	8001d54 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fe ff2f 	bl	8001d54 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e236      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80b8 	beq.w	800308e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d170      	bne.n	8003006 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_OscConfig+0x218>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e21a      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d921      	bls.n	8002f90 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc09 	bl	8003768 <RCC_SetFlashLatencyFromMSIRange>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e208      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4906      	ldr	r1, [pc, #24]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <HAL_RCC_OscConfig+0x264>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	e020      	b.n	8002fca <HAL_RCC_OscConfig+0x2a6>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f90:	4b99      	ldr	r3, [pc, #612]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4996      	ldr	r1, [pc, #600]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa2:	4b95      	ldr	r3, [pc, #596]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	4991      	ldr	r1, [pc, #580]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fbd4 	bl	8003768 <RCC_SetFlashLatencyFromMSIRange>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e1d3      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	0b5b      	lsrs	r3, r3, #13
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	0912      	lsrs	r2, r2, #4
 8002fe0:	f002 020f 	and.w	r2, r2, #15
 8002fe4:	4985      	ldr	r1, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8002fe6:	5c8a      	ldrb	r2, [r1, r2]
 8002fe8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fea:	4a85      	ldr	r2, [pc, #532]	; (8003200 <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fee:	4b85      	ldr	r3, [pc, #532]	; (8003204 <HAL_RCC_OscConfig+0x4e0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fe62 	bl	8001cbc <HAL_InitTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d045      	beq.n	800308e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	e1b5      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d029      	beq.n	8003062 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800300e:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x4e4>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fe9e 	bl	8001d54 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800301c:	f7fe fe9a 	bl	8001d54 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1a1      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	496c      	ldr	r1, [pc, #432]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	4967      	ldr	r1, [pc, #412]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003062:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x4e4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fe74 	bl	8001d54 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003070:	f7fe fe70 	bl	8001d54 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e177      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003082:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d030      	beq.n	80030fc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fe54 	bl	8001d54 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fe50 	bl	8001d54 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e157      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c2:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x38c>
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b4e      	ldr	r3, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x4e8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fe3d 	bl	8001d54 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe fe39 	bl	8001d54 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e140      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80b5 	beq.w	8003274 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b3a      	ldr	r3, [pc, #232]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	4a36      	ldr	r2, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6253      	str	r3, [r2, #36]	; 0x24
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_OscConfig+0x4ec>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x4ec>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <HAL_RCC_OscConfig+0x4ec>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fe01 	bl	8001d54 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fdfd 	bl	8001d54 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e104      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <HAL_RCC_OscConfig+0x4ec>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x466>
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6353      	str	r3, [r2, #52]	; 0x34
 8003188:	e02d      	b.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x488>
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800319c:	6353      	str	r3, [r2, #52]	; 0x34
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a8:	6353      	str	r3, [r2, #52]	; 0x34
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x4aa>
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6353      	str	r3, [r2, #52]	; 0x34
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6353      	str	r3, [r2, #52]	; 0x34
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	6353      	str	r3, [r2, #52]	; 0x34
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d024      	beq.n	8003238 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fdb1 	bl	8001d54 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	e019      	b.n	800322a <HAL_RCC_OscConfig+0x506>
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08006548 	.word	0x08006548
 8003200:	20000008 	.word	0x20000008
 8003204:	2000000c 	.word	0x2000000c
 8003208:	42470020 	.word	0x42470020
 800320c:	42470680 	.word	0x42470680
 8003210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe fd9e 	bl	8001d54 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0a3      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800322a:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_RCC_OscConfig+0x658>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <HAL_RCC_OscConfig+0x4f0>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fe fd8c 	bl	8001d54 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe fd88 	bl	8001d54 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e08d      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x658>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003262:	7ffb      	ldrb	r3, [r7, #31]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <HAL_RCC_OscConfig+0x658>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	4a43      	ldr	r2, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x658>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d079      	beq.n	8003370 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d056      	beq.n	8003330 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b02      	cmp	r3, #2
 8003288:	d13b      	bne.n	8003302 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x65c>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fd60 	bl	8001d54 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fd5c 	bl	8001d54 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e063      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032aa:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x658>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_OscConfig+0x658>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4319      	orrs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	430b      	orrs	r3, r1
 80032ce:	492b      	ldr	r1, [pc, #172]	; (800337c <HAL_RCC_OscConfig+0x658>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x65c>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fd3b 	bl	8001d54 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fd37 	bl	8001d54 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03e      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x658>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x5be>
 8003300:	e036      	b.n	8003370 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_RCC_OscConfig+0x65c>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fd24 	bl	8001d54 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fd20 	bl	8001d54 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e027      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_RCC_OscConfig+0x658>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x5ec>
 800332e:	e01f      	b.n	8003370 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01a      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x658>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	429a      	cmp	r2, r3
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	42470060 	.word	0x42470060

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e11a      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b8f      	ldr	r3, [pc, #572]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d919      	bls.n	80033da <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x34>
 80033ac:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a89      	ldr	r2, [pc, #548]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b87      	ldr	r3, [pc, #540]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 0201 	bic.w	r2, r3, #1
 80033c0:	4985      	ldr	r1, [pc, #532]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0f9      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e6:	4b7d      	ldr	r3, [pc, #500]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	497a      	ldr	r1, [pc, #488]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 808e 	beq.w	8003522 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800340e:	4b73      	ldr	r3, [pc, #460]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d121      	bne.n	800345e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0d7      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003426:	4b6d      	ldr	r3, [pc, #436]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0cb      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0bf      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0b7      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	495c      	ldr	r1, [pc, #368]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fe fc70 	bl	8001d54 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d112      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fc68 	bl	8001d54 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e09b      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003496:	4b51      	ldr	r3, [pc, #324]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_ClockConfig+0xfc>
 80034a2:	e03e      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d112      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ae:	f7fe fc51 	bl	8001d54 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e084      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b45      	ldr	r3, [pc, #276]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d1ee      	bne.n	80034ae <HAL_RCC_ClockConfig+0x12a>
 80034d0:	e027      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d11d      	bne.n	8003516 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fe fc3a 	bl	8001d54 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e06d      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d1ee      	bne.n	80034dc <HAL_RCC_ClockConfig+0x158>
 80034fe:	e010      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe fc28 	bl	8001d54 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e05b      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d219      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_RCC_ClockConfig+0x1be>
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	4923      	ldr	r1, [pc, #140]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_RCC_ClockConfig+0x254>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e034      	b.n	80035ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4917      	ldr	r1, [pc, #92]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490f      	ldr	r1, [pc, #60]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f823 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RCC_ClockConfig+0x258>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490b      	ldr	r1, [pc, #44]	; (80035e0 <HAL_RCC_ClockConfig+0x25c>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x264>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fb7a 	bl	8001cbc <HAL_InitTick>
 80035c8:	4603      	mov	r3, r0
 80035ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08006548 	.word	0x08006548
 80035e4:	20000008 	.word	0x20000008
 80035e8:	2000000c 	.word	0x2000000c

080035ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f0:	b08e      	sub	sp, #56	; 0x38
 80035f2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80035f4:	4b58      	ldr	r3, [pc, #352]	; (8003758 <HAL_RCC_GetSysClockFreq+0x16c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d00d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 8003604:	2b0c      	cmp	r3, #12
 8003606:	f200 8092 	bhi.w	800372e <HAL_RCC_GetSysClockFreq+0x142>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x28>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x2e>
 8003612:	e08c      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_RCC_GetSysClockFreq+0x170>)
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003618:	e097      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_GetSysClockFreq+0x174>)
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800361e:	e094      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	0c9b      	lsrs	r3, r3, #18
 8003624:	f003 020f 	and.w	r2, r3, #15
 8003628:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <HAL_RCC_GetSysClockFreq+0x178>)
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	0d9b      	lsrs	r3, r3, #22
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_GetSysClockFreq+0x16c>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d021      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2200      	movs	r2, #0
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	61fa      	str	r2, [r7, #28]
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <HAL_RCC_GetSysClockFreq+0x174>)
 8003650:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003654:	464a      	mov	r2, r9
 8003656:	fb03 f202 	mul.w	r2, r3, r2
 800365a:	2300      	movs	r3, #0
 800365c:	4644      	mov	r4, r8
 800365e:	fb04 f303 	mul.w	r3, r4, r3
 8003662:	4413      	add	r3, r2
 8003664:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <HAL_RCC_GetSysClockFreq+0x174>)
 8003666:	4644      	mov	r4, r8
 8003668:	fba4 0102 	umull	r0, r1, r4, r2
 800366c:	440b      	add	r3, r1
 800366e:	4619      	mov	r1, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	2200      	movs	r2, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	617a      	str	r2, [r7, #20]
 8003678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800367c:	f7fc fd86 	bl	800018c <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	e04e      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	2200      	movs	r2, #0
 800368e:	469a      	mov	sl, r3
 8003690:	4693      	mov	fp, r2
 8003692:	4652      	mov	r2, sl
 8003694:	465b      	mov	r3, fp
 8003696:	f04f 0000 	mov.w	r0, #0
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	0159      	lsls	r1, r3, #5
 80036a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a4:	0150      	lsls	r0, r2, #5
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	ebb2 080a 	subs.w	r8, r2, sl
 80036ae:	eb63 090b 	sbc.w	r9, r3, fp
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036c6:	ebb2 0408 	subs.w	r4, r2, r8
 80036ca:	eb63 0509 	sbc.w	r5, r3, r9
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	00eb      	lsls	r3, r5, #3
 80036d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036dc:	00e2      	lsls	r2, r4, #3
 80036de:	4614      	mov	r4, r2
 80036e0:	461d      	mov	r5, r3
 80036e2:	eb14 030a 	adds.w	r3, r4, sl
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	eb45 030b 	adc.w	r3, r5, fp
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	4604      	mov	r4, r0
 8003704:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003708:	4601      	mov	r1, r0
 800370a:	028a      	lsls	r2, r1, #10
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2200      	movs	r2, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	60fa      	str	r2, [r7, #12]
 8003718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800371c:	f7fc fd36 	bl	800018c <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800372c:	e00d      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0b5b      	lsrs	r3, r3, #13
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	3301      	adds	r3, #1
 800373e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800374c:	4618      	mov	r0, r3
 800374e:	3738      	adds	r7, #56	; 0x38
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	00f42400 	.word	0x00f42400
 8003760:	016e3600 	.word	0x016e3600
 8003764:	0800653c 	.word	0x0800653c

08003768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d12c      	bne.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e016      	b.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6253      	str	r3, [r2, #36]	; 0x24
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037cc:	d105      	bne.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037d4:	d101      	bne.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037d6:	2301      	movs	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 0201 	bic.w	r2, r3, #1
 80037f4:	490b      	ldr	r1, [pc, #44]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ed 	beq.w	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4b75      	ldr	r3, [pc, #468]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	4a74      	ldr	r2, [pc, #464]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6253      	str	r3, [r2, #36]	; 0x24
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003876:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d118      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003882:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6b      	ldr	r2, [pc, #428]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388e:	f7fe fa61 	bl	8001d54 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	e008      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003896:	f7fe fa5d 	bl	8001d54 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b64      	cmp	r3, #100	; 0x64
 80038a2:	d901      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0be      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	4b62      	ldr	r3, [pc, #392]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80038b4:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80038bc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d106      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d00f      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e6:	d108      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038e8:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e095      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80038fa:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003902:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d041      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d005      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10c      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d02d      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d027      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800393e:	4b3c      	ldr	r3, [pc, #240]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003946:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003948:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003954:	4a36      	ldr	r2, [pc, #216]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d014      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe f9f6 	bl	8001d54 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800396a:	e00a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe f9f2 	bl	8001d54 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e051      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003982:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039a8:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80039b8:	491d      	ldr	r1, [pc, #116]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ca:	4919      	ldr	r1, [pc, #100]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e8:	d10a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0c:	4908      	ldr	r1, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40007000 	.word	0x40007000
 8003a38:	424706dc 	.word	0x424706dc

08003a3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e073      	b.n	8003b3a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7f5b      	ldrb	r3, [r3, #29]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd ff52 	bl	800190c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d055      	beq.n	8003b28 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	22ca      	movs	r2, #202	; 0xca
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2253      	movs	r2, #83	; 0x53
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fa48 	bl	8003f22 <RTC_EnterInitMode>
 8003a92:	4603      	mov	r3, r0
 8003a94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d12c      	bne.n	8003af6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	041a      	lsls	r2, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fa4f 	bl	8003f90 <RTC_ExitInitMode>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d110      	bne.n	8003b1e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
 8003b26:	e001      	b.n	8003b2c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b42:	b590      	push	{r4, r7, lr}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	7f1b      	ldrb	r3, [r3, #28]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_RTC_SetTime+0x1c>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e087      	b.n	8003c6e <HAL_RTC_SetTime+0x12c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2202      	movs	r2, #2
 8003b68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d126      	bne.n	8003bbe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fa26 	bl	8003fda <RTC_ByteToBcd2>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fa1f 	bl	8003fda <RTC_ByteToBcd2>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ba0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	789b      	ldrb	r3, [r3, #2]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fa17 	bl	8003fda <RTC_ByteToBcd2>
 8003bac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	78db      	ldrb	r3, [r3, #3]
 8003bb6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e018      	b.n	8003bf0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bde:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003be4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	78db      	ldrb	r3, [r3, #3]
 8003bea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	22ca      	movs	r2, #202	; 0xca
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2253      	movs	r2, #83	; 0x53
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f98e 	bl	8003f22 <RTC_EnterInitMode>
 8003c06:	4603      	mov	r3, r0
 8003c08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d120      	bne.n	8003c52 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c1e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f9a1 	bl	8003f90 <RTC_ExitInitMode>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]

  return status;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}

08003c76 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ca8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003cac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	0d9b      	lsrs	r3, r3, #22
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11a      	bne.n	8003d28 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f98c 	bl	8004014 <RTC_Bcd2ToByte>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f983 	bl	8004014 <RTC_Bcd2ToByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	789b      	ldrb	r3, [r3, #2]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f97a 	bl	8004014 <RTC_Bcd2ToByte>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d32:	b590      	push	{r4, r7, lr}
 8003d34:	b087      	sub	sp, #28
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	7f1b      	ldrb	r3, [r3, #28]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_RTC_SetDate+0x1c>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e071      	b.n	8003e32 <HAL_RTC_SetDate+0x100>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2202      	movs	r2, #2
 8003d58:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10e      	bne.n	8003d7e <HAL_RTC_SetDate+0x4c>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	f023 0310 	bic.w	r3, r3, #16
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	330a      	adds	r3, #10
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11c      	bne.n	8003dbe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	78db      	ldrb	r3, [r3, #3]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f926 	bl	8003fda <RTC_ByteToBcd2>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f91f 	bl	8003fda <RTC_ByteToBcd2>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003da0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	789b      	ldrb	r3, [r3, #2]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f917 	bl	8003fda <RTC_ByteToBcd2>
 8003dac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003dae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e00e      	b.n	8003ddc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	78db      	ldrb	r3, [r3, #3]
 8003dc2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dca:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003dd0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	22ca      	movs	r2, #202	; 0xca
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2253      	movs	r2, #83	; 0x53
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f898 	bl	8003f22 <RTC_EnterInitMode>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e0a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f8bf 	bl	8003f90 <RTC_ExitInitMode>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	22ff      	movs	r2, #255	; 0xff
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]

  return status;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}

08003e3a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	0b5b      	lsrs	r3, r3, #13
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11a      	bne.n	8003ece <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f8b9 	bl	8004014 <RTC_Bcd2ToByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f8b0 	bl	8004014 <RTC_Bcd2ToByte>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f8a7 	bl	8004014 <RTC_Bcd2ToByte>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f64f 7257 	movw	r2, #65367	; 0xff57
 8003eec:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eee:	f7fd ff31 	bl	8001d54 <HAL_GetTick>
 8003ef2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ef4:	e009      	b.n	8003f0a <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ef6:	f7fd ff2d 	bl	8001d54 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f04:	d901      	bls.n	8003f0a <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e007      	b.n	8003f1a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d122      	bne.n	8003f86 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f50:	f7fd ff00 	bl	8001d54 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f56:	e00c      	b.n	8003f72 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f58:	f7fd fefc 	bl	8001d54 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f66:	d904      	bls.n	8003f72 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <RTC_EnterInitMode+0x64>
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d1e8      	bne.n	8003f58 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003faa:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ff8c 	bl	8003ed8 <HAL_RTC_WaitForSynchro>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003fe8:	e005      	b.n	8003ff6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	3b0a      	subs	r3, #10
 8003ff4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d8f6      	bhi.n	8003fea <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	b2da      	uxtb	r2, r3
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	4313      	orrs	r3, r2
 8004008:	b2db      	uxtb	r3, r3
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4413      	add	r3, r2
 8004042:	b2db      	uxtb	r3, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e07b      	b.n	8004158 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004070:	d009      	beq.n	8004086 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	61da      	str	r2, [r3, #28]
 8004078:	e005      	b.n	8004086 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7fd fc49 	bl	8001938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	ea42 0103 	orr.w	r1, r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	f003 0104 	and.w	r1, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0210 	and.w	r2, r3, #16
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_SPI_Transmit+0x22>
 800417e:	2302      	movs	r3, #2
 8004180:	e12d      	b.n	80043de <HAL_SPI_Transmit+0x27e>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418a:	f7fd fde3 	bl	8001d54 <HAL_GetTick>
 800418e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041a4:	e116      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x52>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041b6:	e10d      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d10f      	bne.n	8004220 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d007      	beq.n	800423e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d14f      	bne.n	80042e8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Transmit+0xf6>
 8004250:	8afb      	ldrh	r3, [r7, #22]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d142      	bne.n	80042dc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800427a:	e02f      	b.n	80042dc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d112      	bne.n	80042b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ae:	e015      	b.n	80042dc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b0:	f7fd fd50 	bl	8001d54 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d803      	bhi.n	80042c8 <HAL_SPI_Transmit+0x168>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d102      	bne.n	80042ce <HAL_SPI_Transmit+0x16e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042da:	e07b      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ca      	bne.n	800427c <HAL_SPI_Transmit+0x11c>
 80042e6:	e050      	b.n	800438a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_Transmit+0x196>
 80042f0:	8afb      	ldrh	r3, [r7, #22]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d144      	bne.n	8004380 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800431c:	e030      	b.n	8004380 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d113      	bne.n	8004354 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	86da      	strh	r2, [r3, #54]	; 0x36
 8004352:	e015      	b.n	8004380 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004354:	f7fd fcfe 	bl	8001d54 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d803      	bhi.n	800436c <HAL_SPI_Transmit+0x20c>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Transmit+0x212>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800437e:	e029      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1c9      	bne.n	800431e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8b2 	bl	80044f8 <SPI_EndRxTxTransaction>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e003      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043f8:	f7fd fcac 	bl	8001d54 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	4413      	add	r3, r2
 8004406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004408:	f7fd fca4 	bl	8001d54 <HAL_GetTick>
 800440c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	015b      	lsls	r3, r3, #5
 8004414:	0d1b      	lsrs	r3, r3, #20
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441e:	e054      	b.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d050      	beq.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004428:	f7fd fc94 	bl	8001d54 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	429a      	cmp	r2, r3
 8004436:	d902      	bls.n	800443e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d13d      	bne.n	80044ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800444c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004456:	d111      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004460:	d004      	beq.n	800446c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d107      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d10f      	bne.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e017      	b.n	80044ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d19b      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000008 	.word	0x20000008

080044f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <SPI_EndRxTxTransaction+0x7c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <SPI_EndRxTxTransaction+0x80>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0d5b      	lsrs	r3, r3, #21
 8004510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d112      	bne.n	800454a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff5a 	bl	80043e8 <SPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e00f      	b.n	800456a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3b01      	subs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d0f2      	beq.n	800454a <SPI_EndRxTxTransaction+0x52>
 8004564:	e000      	b.n	8004568 <SPI_EndRxTxTransaction+0x70>
        break;
 8004566:	bf00      	nop
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000008 	.word	0x20000008
 8004578:	165e9f81 	.word	0x165e9f81

0800457c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e031      	b.n	80045f2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd fa0c 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fc16 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e032      	b.n	800467a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d00e      	beq.n	8004644 <HAL_TIM_Base_Start+0x48>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_TIM_Base_Start+0x88>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIM_Base_Start+0x48>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <HAL_TIM_Base_Start+0x8c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIM_Base_Start+0x48>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <HAL_TIM_Base_Start+0x90>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d111      	bne.n	8004668 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b06      	cmp	r3, #6
 8004654:	d010      	beq.n	8004678 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	e007      	b.n	8004678 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40010800 	.word	0x40010800

08004690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e031      	b.n	8004706 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f829 	bl	800470e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fb8c 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x24>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e022      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x3e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e015      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x58>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e008      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e051      	b.n	8004836 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x82>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80047a0:	e013      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x92>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047c0:	e003      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd05 	bl	80051e2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d00e      	beq.n	8004800 <HAL_TIM_PWM_Start+0xe0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <HAL_TIM_PWM_Start+0x120>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_TIM_PWM_Start+0xe0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a14      	ldr	r2, [pc, #80]	; (8004844 <HAL_TIM_PWM_Start+0x124>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_TIM_PWM_Start+0xe0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <HAL_TIM_PWM_Start+0x128>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d111      	bne.n	8004824 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b06      	cmp	r3, #6
 8004810:	d010      	beq.n	8004834 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	e007      	b.n	8004834 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40010800 	.word	0x40010800

0800484c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fcbf 	bl	80051e2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	f241 1311 	movw	r3, #4369	; 0x1111
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_TIM_PWM_Stop+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_TIM_PWM_Stop+0x48>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004892:	e013      	b.n	80048bc <HAL_TIM_PWM_Stop+0x70>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_PWM_Stop+0x58>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80048a2:	e00b      	b.n	80048bc <HAL_TIM_PWM_Stop+0x70>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d104      	bne.n	80048b4 <HAL_TIM_PWM_Stop+0x68>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048b2:	e003      	b.n	80048bc <HAL_TIM_PWM_Stop+0x70>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d122      	bne.n	8004922 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d11b      	bne.n	8004922 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f06f 0202 	mvn.w	r2, #2
 80048f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa54 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 800490e:	e005      	b.n	800491c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa47 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa56 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d122      	bne.n	8004976 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d11b      	bne.n	8004976 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0204 	mvn.w	r2, #4
 8004946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa2a 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004962:	e005      	b.n	8004970 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa1d 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa2c 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d122      	bne.n	80049ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11b      	bne.n	80049ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f06f 0208 	mvn.w	r2, #8
 800499a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2204      	movs	r2, #4
 80049a0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa00 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 80049b6:	e005      	b.n	80049c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f9f3 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa02 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d122      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d11b      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0210 	mvn.w	r2, #16
 80049ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2208      	movs	r2, #8
 80049f4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9d6 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004a0a:	e005      	b.n	8004a18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f9c9 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9d8 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0201 	mvn.w	r2, #1
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f9a4 	bl	8004d92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f9b2 	bl	8004dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0ae      	b.n	8004bfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f200 809f 	bhi.w	8004bec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bed 	.word	0x08004bed
 8004ac0:	08004bed 	.word	0x08004bed
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004bed 	.word	0x08004bed
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004bed 	.word	0x08004bed
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004bed 	.word	0x08004bed
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bed 	.word	0x08004bed
 8004ae4:	08004bab 	.word	0x08004bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9ec 	bl	8004ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e064      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa08 	bl	8004f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e043      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa25 	bl	8004fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e023      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fa42 	bl	800503a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0b4      	b.n	8004d8a <HAL_TIM_ConfigClockSource+0x186>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c58:	d03e      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5e:	f200 8087 	bhi.w	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	f000 8086 	beq.w	8004d76 <HAL_TIM_ConfigClockSource+0x172>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d87f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d01a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0xa6>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d87b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b60      	cmp	r3, #96	; 0x60
 8004c7a:	d050      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x11a>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d877      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b50      	cmp	r3, #80	; 0x50
 8004c82:	d03c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0xfa>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d873      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d058      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x13a>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d86f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d064      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d86b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d060      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d867      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05c      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d05a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	e062      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	f000 fa73 	bl	80051a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	609a      	str	r2, [r3, #8]
      break;
 8004cd6:	e04f      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	f000 fa5c 	bl	80051a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfa:	609a      	str	r2, [r3, #8]
      break;
 8004cfc:	e03c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f000 f9d3 	bl	80050b6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2150      	movs	r1, #80	; 0x50
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fa2a 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004d1c:	e02c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 f9f1 	bl	8005112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2160      	movs	r1, #96	; 0x60
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa1a 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 f9b3 	bl	80050b6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2140      	movs	r1, #64	; 0x40
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa0a 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e00c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 fa01 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004d6e:	e003      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e000      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0x38>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <TIM_Base_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0x38>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <TIM_Base_SetConfig+0xcc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0x38>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <TIM_Base_SetConfig+0xd0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0x38>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_Base_SetConfig+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d108      	bne.n	8004e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <TIM_Base_SetConfig+0xc8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <TIM_Base_SetConfig+0xcc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <TIM_Base_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <TIM_Base_SetConfig+0xd4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <TIM_Base_SetConfig+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x82>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <TIM_Base_SetConfig+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40010800 	.word	0x40010800
 8004ec4:	40010c00 	.word	0x40010c00
 8004ec8:	40011000 	.word	0x40011000

08004ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 0201 	bic.w	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0302 	bic.w	r3, r3, #2
 8004f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0210 	bic.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0320 	bic.w	r3, r3, #32
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005068:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	031b      	lsls	r3, r3, #12
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	621a      	str	r2, [r3, #32]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f023 0201 	bic.w	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 030a 	bic.w	r3, r3, #10
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f023 0210 	bic.w	r2, r3, #16
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	f043 0307 	orr.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	43db      	mvns	r3, r3
 8005204:	401a      	ands	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
	...

0800522c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e046      	b.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d00e      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10c      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40010800 	.word	0x40010800

080052e8 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80052ec:	2201      	movs	r2, #1
 80052ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052f2:	4802      	ldr	r0, [pc, #8]	; (80052fc <SPI_CS_High+0x14>)
 80052f4:	f7fd fce5 	bl	8002cc2 <HAL_GPIO_WritePin>
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40020000 	.word	0x40020000

08005300 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8005304:	2200      	movs	r2, #0
 8005306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800530a:	4802      	ldr	r0, [pc, #8]	; (8005314 <SPI_CS_Low+0x14>)
 800530c:	f7fd fcd9 	bl	8002cc2 <HAL_GPIO_WritePin>
}
 8005310:	bf00      	nop
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40020000 	.word	0x40020000

08005318 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800531c:	2107      	movs	r1, #7
 800531e:	200b      	movs	r0, #11
 8005320:	f000 f896 	bl	8005450 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8005324:	2100      	movs	r1, #0
 8005326:	2009      	movs	r0, #9
 8005328:	f000 f892 	bl	8005450 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800532c:	f000 f809 	bl	8005342 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8005330:	f000 f80f 	bl	8005352 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8005334:	f000 f827 	bl	8005386 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8005338:	200f      	movs	r0, #15
 800533a:	f000 f812 	bl	8005362 <MAX7219_SetBrightness>
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}

08005342 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8005346:	2101      	movs	r1, #1
 8005348:	200c      	movs	r0, #12
 800534a:	f000 f881 	bl	8005450 <MAX7219_Write>
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}

08005352 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8005356:	2100      	movs	r1, #0
 8005358:	200f      	movs	r0, #15
 800535a:	f000 f879 	bl	8005450 <MAX7219_Write>
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}

08005362 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	4603      	mov	r3, r0
 800536a:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	4619      	mov	r1, r3
 8005378:	200a      	movs	r0, #10
 800537a:	f000 f869 	bl	8005450 <MAX7219_Write>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 800538c:	2300      	movs	r3, #0
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	e007      	b.n	80053a2 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f85a 	bl	8005450 <MAX7219_Write>
  for (i=0; i < 8; i++)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	3301      	adds	r3, #1
 80053a0:	71fb      	strb	r3, [r7, #7]
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b07      	cmp	r3, #7
 80053a6:	d9f4      	bls.n	8005392 <MAX7219_Clear+0xc>
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <MAX7219_DisplayChar>:
* Arguments  : digit = digit number (0-7)
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character, char dp) {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	71fb      	strb	r3, [r7, #7]
 80053bc:	460b      	mov	r3, r1
 80053be:	71bb      	strb	r3, [r7, #6]
 80053c0:	4613      	mov	r3, r2
 80053c2:	717b      	strb	r3, [r7, #5]
    if (dp) {
 80053c4:	797b      	ldrb	r3, [r7, #5]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <MAX7219_DisplayChar+0x34>
        MAX7219_Write(digit, MAX7219_LookupCode(character) | 0x80); // Active le bit 7 pour le point décimal
 80053ca:	79bb      	ldrb	r3, [r7, #6]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f819 	bl	8005404 <MAX7219_LookupCode>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f836 	bl	8005450 <MAX7219_Write>
    } else {
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
    }
}
 80053e4:	e00a      	b.n	80053fc <MAX7219_DisplayChar+0x4a>
        MAX7219_Write(digit, MAX7219_LookupCode(character)); // Pas de point décimal
 80053e6:	79bb      	ldrb	r3, [r7, #6]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f80b 	bl	8005404 <MAX7219_LookupCode>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	4611      	mov	r1, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f82a 	bl	8005450 <MAX7219_Write>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
 8005412:	e00f      	b.n	8005434 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	4a0d      	ldr	r2, [pc, #52]	; (800544c <MAX7219_LookupCode+0x48>)
 8005418:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800541c:	79fa      	ldrb	r2, [r7, #7]
 800541e:	429a      	cmp	r2, r3
 8005420:	d105      	bne.n	800542e <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <MAX7219_LookupCode+0x48>)
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	e009      	b.n	8005442 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3301      	adds	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	4a05      	ldr	r2, [pc, #20]	; (800544c <MAX7219_LookupCode+0x48>)
 8005438:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e9      	bne.n	8005414 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	08006558 	.word	0x08006558

08005450 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	460a      	mov	r2, r1
 800545a:	71fb      	strb	r3, [r7, #7]
 800545c:	4613      	mov	r3, r2
 800545e:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8005460:	f7ff ff4e 	bl	8005300 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f80c 	bl	8005484 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 800546c:	79bb      	ldrb	r3, [r7, #6]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f808 	bl	8005484 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8005474:	f7ff ff38 	bl	80052e8 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8005478:	f7ff ff42 	bl	8005300 <SPI_CS_Low>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800548e:	1df9      	adds	r1, r7, #7
 8005490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005494:	2201      	movs	r2, #1
 8005496:	4803      	ldr	r0, [pc, #12]	; (80054a4 <MAX7219_SendByte+0x20>)
 8005498:	f7fe fe62 	bl	8004160 <HAL_SPI_Transmit>
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000100 	.word	0x20000100

080054a8 <std>:
 80054a8:	2300      	movs	r3, #0
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	e9c0 3300 	strd	r3, r3, [r0]
 80054b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054b6:	6083      	str	r3, [r0, #8]
 80054b8:	8181      	strh	r1, [r0, #12]
 80054ba:	6643      	str	r3, [r0, #100]	; 0x64
 80054bc:	81c2      	strh	r2, [r0, #14]
 80054be:	6183      	str	r3, [r0, #24]
 80054c0:	4619      	mov	r1, r3
 80054c2:	2208      	movs	r2, #8
 80054c4:	305c      	adds	r0, #92	; 0x5c
 80054c6:	f000 f9f7 	bl	80058b8 <memset>
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <std+0x58>)
 80054cc:	6224      	str	r4, [r4, #32]
 80054ce:	6263      	str	r3, [r4, #36]	; 0x24
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <std+0x5c>)
 80054d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <std+0x60>)
 80054d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <std+0x64>)
 80054da:	6323      	str	r3, [r4, #48]	; 0x30
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <std+0x68>)
 80054de:	429c      	cmp	r4, r3
 80054e0:	d006      	beq.n	80054f0 <std+0x48>
 80054e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054e6:	4294      	cmp	r4, r2
 80054e8:	d002      	beq.n	80054f0 <std+0x48>
 80054ea:	33d0      	adds	r3, #208	; 0xd0
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d105      	bne.n	80054fc <std+0x54>
 80054f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f8:	f000 ba56 	b.w	80059a8 <__retarget_lock_init_recursive>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	bf00      	nop
 8005500:	08005709 	.word	0x08005709
 8005504:	0800572b 	.word	0x0800572b
 8005508:	08005763 	.word	0x08005763
 800550c:	08005787 	.word	0x08005787
 8005510:	200001dc 	.word	0x200001dc

08005514 <stdio_exit_handler>:
 8005514:	4a02      	ldr	r2, [pc, #8]	; (8005520 <stdio_exit_handler+0xc>)
 8005516:	4903      	ldr	r1, [pc, #12]	; (8005524 <stdio_exit_handler+0x10>)
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <stdio_exit_handler+0x14>)
 800551a:	f000 b869 	b.w	80055f0 <_fwalk_sglue>
 800551e:	bf00      	nop
 8005520:	20000014 	.word	0x20000014
 8005524:	08006249 	.word	0x08006249
 8005528:	20000020 	.word	0x20000020

0800552c <cleanup_stdio>:
 800552c:	6841      	ldr	r1, [r0, #4]
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <cleanup_stdio+0x34>)
 8005530:	b510      	push	{r4, lr}
 8005532:	4299      	cmp	r1, r3
 8005534:	4604      	mov	r4, r0
 8005536:	d001      	beq.n	800553c <cleanup_stdio+0x10>
 8005538:	f000 fe86 	bl	8006248 <_fflush_r>
 800553c:	68a1      	ldr	r1, [r4, #8]
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <cleanup_stdio+0x38>)
 8005540:	4299      	cmp	r1, r3
 8005542:	d002      	beq.n	800554a <cleanup_stdio+0x1e>
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fe7f 	bl	8006248 <_fflush_r>
 800554a:	68e1      	ldr	r1, [r4, #12]
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <cleanup_stdio+0x3c>)
 800554e:	4299      	cmp	r1, r3
 8005550:	d004      	beq.n	800555c <cleanup_stdio+0x30>
 8005552:	4620      	mov	r0, r4
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	f000 be76 	b.w	8006248 <_fflush_r>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	200001dc 	.word	0x200001dc
 8005564:	20000244 	.word	0x20000244
 8005568:	200002ac 	.word	0x200002ac

0800556c <global_stdio_init.part.0>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <global_stdio_init.part.0+0x30>)
 8005570:	4c0b      	ldr	r4, [pc, #44]	; (80055a0 <global_stdio_init.part.0+0x34>)
 8005572:	4a0c      	ldr	r2, [pc, #48]	; (80055a4 <global_stdio_init.part.0+0x38>)
 8005574:	4620      	mov	r0, r4
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	2104      	movs	r1, #4
 800557a:	2200      	movs	r2, #0
 800557c:	f7ff ff94 	bl	80054a8 <std>
 8005580:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005584:	2201      	movs	r2, #1
 8005586:	2109      	movs	r1, #9
 8005588:	f7ff ff8e 	bl	80054a8 <std>
 800558c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005590:	2202      	movs	r2, #2
 8005592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005596:	2112      	movs	r1, #18
 8005598:	f7ff bf86 	b.w	80054a8 <std>
 800559c:	20000314 	.word	0x20000314
 80055a0:	200001dc 	.word	0x200001dc
 80055a4:	08005515 	.word	0x08005515

080055a8 <__sfp_lock_acquire>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__sfp_lock_acquire+0x8>)
 80055aa:	f000 b9fe 	b.w	80059aa <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	2000031d 	.word	0x2000031d

080055b4 <__sfp_lock_release>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__sfp_lock_release+0x8>)
 80055b6:	f000 b9f9 	b.w	80059ac <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	2000031d 	.word	0x2000031d

080055c0 <__sinit>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	f7ff fff0 	bl	80055a8 <__sfp_lock_acquire>
 80055c8:	6a23      	ldr	r3, [r4, #32]
 80055ca:	b11b      	cbz	r3, 80055d4 <__sinit+0x14>
 80055cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d0:	f7ff bff0 	b.w	80055b4 <__sfp_lock_release>
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <__sinit+0x28>)
 80055d6:	6223      	str	r3, [r4, #32]
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <__sinit+0x2c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f5      	bne.n	80055cc <__sinit+0xc>
 80055e0:	f7ff ffc4 	bl	800556c <global_stdio_init.part.0>
 80055e4:	e7f2      	b.n	80055cc <__sinit+0xc>
 80055e6:	bf00      	nop
 80055e8:	0800552d 	.word	0x0800552d
 80055ec:	20000314 	.word	0x20000314

080055f0 <_fwalk_sglue>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	4607      	mov	r7, r0
 80055f6:	4688      	mov	r8, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	2600      	movs	r6, #0
 80055fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005600:	f1b9 0901 	subs.w	r9, r9, #1
 8005604:	d505      	bpl.n	8005612 <_fwalk_sglue+0x22>
 8005606:	6824      	ldr	r4, [r4, #0]
 8005608:	2c00      	cmp	r4, #0
 800560a:	d1f7      	bne.n	80055fc <_fwalk_sglue+0xc>
 800560c:	4630      	mov	r0, r6
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d907      	bls.n	8005628 <_fwalk_sglue+0x38>
 8005618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800561c:	3301      	adds	r3, #1
 800561e:	d003      	beq.n	8005628 <_fwalk_sglue+0x38>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	4306      	orrs	r6, r0
 8005628:	3568      	adds	r5, #104	; 0x68
 800562a:	e7e9      	b.n	8005600 <_fwalk_sglue+0x10>

0800562c <iprintf>:
 800562c:	b40f      	push	{r0, r1, r2, r3}
 800562e:	b507      	push	{r0, r1, r2, lr}
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <iprintf+0x20>)
 8005632:	ab04      	add	r3, sp, #16
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	f853 2b04 	ldr.w	r2, [r3], #4
 800563a:	6881      	ldr	r1, [r0, #8]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	f000 fad3 	bl	8005be8 <_vfiprintf_r>
 8005642:	b003      	add	sp, #12
 8005644:	f85d eb04 	ldr.w	lr, [sp], #4
 8005648:	b004      	add	sp, #16
 800564a:	4770      	bx	lr
 800564c:	2000006c 	.word	0x2000006c

08005650 <_puts_r>:
 8005650:	6a03      	ldr	r3, [r0, #32]
 8005652:	b570      	push	{r4, r5, r6, lr}
 8005654:	4605      	mov	r5, r0
 8005656:	460e      	mov	r6, r1
 8005658:	6884      	ldr	r4, [r0, #8]
 800565a:	b90b      	cbnz	r3, 8005660 <_puts_r+0x10>
 800565c:	f7ff ffb0 	bl	80055c0 <__sinit>
 8005660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005662:	07db      	lsls	r3, r3, #31
 8005664:	d405      	bmi.n	8005672 <_puts_r+0x22>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	0598      	lsls	r0, r3, #22
 800566a:	d402      	bmi.n	8005672 <_puts_r+0x22>
 800566c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800566e:	f000 f99c 	bl	80059aa <__retarget_lock_acquire_recursive>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	0719      	lsls	r1, r3, #28
 8005676:	d513      	bpl.n	80056a0 <_puts_r+0x50>
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	b18b      	cbz	r3, 80056a0 <_puts_r+0x50>
 800567c:	3e01      	subs	r6, #1
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005684:	3b01      	subs	r3, #1
 8005686:	60a3      	str	r3, [r4, #8]
 8005688:	b9e9      	cbnz	r1, 80056c6 <_puts_r+0x76>
 800568a:	2b00      	cmp	r3, #0
 800568c:	da2e      	bge.n	80056ec <_puts_r+0x9c>
 800568e:	4622      	mov	r2, r4
 8005690:	210a      	movs	r1, #10
 8005692:	4628      	mov	r0, r5
 8005694:	f000 f87b 	bl	800578e <__swbuf_r>
 8005698:	3001      	adds	r0, #1
 800569a:	d007      	beq.n	80056ac <_puts_r+0x5c>
 800569c:	250a      	movs	r5, #10
 800569e:	e007      	b.n	80056b0 <_puts_r+0x60>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f8b0 	bl	8005808 <__swsetup_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d0e7      	beq.n	800567c <_puts_r+0x2c>
 80056ac:	f04f 35ff 	mov.w	r5, #4294967295
 80056b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b2:	07da      	lsls	r2, r3, #31
 80056b4:	d405      	bmi.n	80056c2 <_puts_r+0x72>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	059b      	lsls	r3, r3, #22
 80056ba:	d402      	bmi.n	80056c2 <_puts_r+0x72>
 80056bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056be:	f000 f975 	bl	80059ac <__retarget_lock_release_recursive>
 80056c2:	4628      	mov	r0, r5
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da04      	bge.n	80056d4 <_puts_r+0x84>
 80056ca:	69a2      	ldr	r2, [r4, #24]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	dc06      	bgt.n	80056de <_puts_r+0x8e>
 80056d0:	290a      	cmp	r1, #10
 80056d2:	d004      	beq.n	80056de <_puts_r+0x8e>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	6022      	str	r2, [r4, #0]
 80056da:	7019      	strb	r1, [r3, #0]
 80056dc:	e7cf      	b.n	800567e <_puts_r+0x2e>
 80056de:	4622      	mov	r2, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 f854 	bl	800578e <__swbuf_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	d1c9      	bne.n	800567e <_puts_r+0x2e>
 80056ea:	e7df      	b.n	80056ac <_puts_r+0x5c>
 80056ec:	250a      	movs	r5, #10
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	6022      	str	r2, [r4, #0]
 80056f4:	701d      	strb	r5, [r3, #0]
 80056f6:	e7db      	b.n	80056b0 <_puts_r+0x60>

080056f8 <puts>:
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <puts+0xc>)
 80056fa:	4601      	mov	r1, r0
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	f7ff bfa7 	b.w	8005650 <_puts_r>
 8005702:	bf00      	nop
 8005704:	2000006c 	.word	0x2000006c

08005708 <__sread>:
 8005708:	b510      	push	{r4, lr}
 800570a:	460c      	mov	r4, r1
 800570c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005710:	f000 f8fc 	bl	800590c <_read_r>
 8005714:	2800      	cmp	r0, #0
 8005716:	bfab      	itete	ge
 8005718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800571a:	89a3      	ldrhlt	r3, [r4, #12]
 800571c:	181b      	addge	r3, r3, r0
 800571e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005722:	bfac      	ite	ge
 8005724:	6563      	strge	r3, [r4, #84]	; 0x54
 8005726:	81a3      	strhlt	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__swrite>:
 800572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572e:	461f      	mov	r7, r3
 8005730:	898b      	ldrh	r3, [r1, #12]
 8005732:	4605      	mov	r5, r0
 8005734:	05db      	lsls	r3, r3, #23
 8005736:	460c      	mov	r4, r1
 8005738:	4616      	mov	r6, r2
 800573a:	d505      	bpl.n	8005748 <__swrite+0x1e>
 800573c:	2302      	movs	r3, #2
 800573e:	2200      	movs	r2, #0
 8005740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005744:	f000 f8d0 	bl	80058e8 <_lseek_r>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	4632      	mov	r2, r6
 800574c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	4628      	mov	r0, r5
 8005754:	463b      	mov	r3, r7
 8005756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575e:	f000 b8e7 	b.w	8005930 <_write_r>

08005762 <__sseek>:
 8005762:	b510      	push	{r4, lr}
 8005764:	460c      	mov	r4, r1
 8005766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576a:	f000 f8bd 	bl	80058e8 <_lseek_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	bf15      	itete	ne
 8005774:	6560      	strne	r0, [r4, #84]	; 0x54
 8005776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800577a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800577e:	81a3      	strheq	r3, [r4, #12]
 8005780:	bf18      	it	ne
 8005782:	81a3      	strhne	r3, [r4, #12]
 8005784:	bd10      	pop	{r4, pc}

08005786 <__sclose>:
 8005786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578a:	f000 b89d 	b.w	80058c8 <_close_r>

0800578e <__swbuf_r>:
 800578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005790:	460e      	mov	r6, r1
 8005792:	4614      	mov	r4, r2
 8005794:	4605      	mov	r5, r0
 8005796:	b118      	cbz	r0, 80057a0 <__swbuf_r+0x12>
 8005798:	6a03      	ldr	r3, [r0, #32]
 800579a:	b90b      	cbnz	r3, 80057a0 <__swbuf_r+0x12>
 800579c:	f7ff ff10 	bl	80055c0 <__sinit>
 80057a0:	69a3      	ldr	r3, [r4, #24]
 80057a2:	60a3      	str	r3, [r4, #8]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	071a      	lsls	r2, r3, #28
 80057a8:	d525      	bpl.n	80057f6 <__swbuf_r+0x68>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	b31b      	cbz	r3, 80057f6 <__swbuf_r+0x68>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	b2f6      	uxtb	r6, r6
 80057b4:	1a98      	subs	r0, r3, r2
 80057b6:	6963      	ldr	r3, [r4, #20]
 80057b8:	4637      	mov	r7, r6
 80057ba:	4283      	cmp	r3, r0
 80057bc:	dc04      	bgt.n	80057c8 <__swbuf_r+0x3a>
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fd41 	bl	8006248 <_fflush_r>
 80057c6:	b9e0      	cbnz	r0, 8005802 <__swbuf_r+0x74>
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	60a3      	str	r3, [r4, #8]
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	6022      	str	r2, [r4, #0]
 80057d4:	701e      	strb	r6, [r3, #0]
 80057d6:	6962      	ldr	r2, [r4, #20]
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	429a      	cmp	r2, r3
 80057dc:	d004      	beq.n	80057e8 <__swbuf_r+0x5a>
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	07db      	lsls	r3, r3, #31
 80057e2:	d506      	bpl.n	80057f2 <__swbuf_r+0x64>
 80057e4:	2e0a      	cmp	r6, #10
 80057e6:	d104      	bne.n	80057f2 <__swbuf_r+0x64>
 80057e8:	4621      	mov	r1, r4
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fd2c 	bl	8006248 <_fflush_r>
 80057f0:	b938      	cbnz	r0, 8005802 <__swbuf_r+0x74>
 80057f2:	4638      	mov	r0, r7
 80057f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f6:	4621      	mov	r1, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 f805 	bl	8005808 <__swsetup_r>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0d5      	beq.n	80057ae <__swbuf_r+0x20>
 8005802:	f04f 37ff 	mov.w	r7, #4294967295
 8005806:	e7f4      	b.n	80057f2 <__swbuf_r+0x64>

08005808 <__swsetup_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <__swsetup_r+0xac>)
 800580c:	4605      	mov	r5, r0
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	460c      	mov	r4, r1
 8005812:	b118      	cbz	r0, 800581c <__swsetup_r+0x14>
 8005814:	6a03      	ldr	r3, [r0, #32]
 8005816:	b90b      	cbnz	r3, 800581c <__swsetup_r+0x14>
 8005818:	f7ff fed2 	bl	80055c0 <__sinit>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005822:	0718      	lsls	r0, r3, #28
 8005824:	d422      	bmi.n	800586c <__swsetup_r+0x64>
 8005826:	06d9      	lsls	r1, r3, #27
 8005828:	d407      	bmi.n	800583a <__swsetup_r+0x32>
 800582a:	2309      	movs	r3, #9
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	e034      	b.n	80058a4 <__swsetup_r+0x9c>
 800583a:	0758      	lsls	r0, r3, #29
 800583c:	d512      	bpl.n	8005864 <__swsetup_r+0x5c>
 800583e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005840:	b141      	cbz	r1, 8005854 <__swsetup_r+0x4c>
 8005842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005846:	4299      	cmp	r1, r3
 8005848:	d002      	beq.n	8005850 <__swsetup_r+0x48>
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f8b0 	bl	80059b0 <_free_r>
 8005850:	2300      	movs	r3, #0
 8005852:	6363      	str	r3, [r4, #52]	; 0x34
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	2300      	movs	r3, #0
 800585e:	6063      	str	r3, [r4, #4]
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f043 0308 	orr.w	r3, r3, #8
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	b94b      	cbnz	r3, 8005884 <__swsetup_r+0x7c>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587a:	d003      	beq.n	8005884 <__swsetup_r+0x7c>
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fd2f 	bl	80062e2 <__smakebuf_r>
 8005884:	89a0      	ldrh	r0, [r4, #12]
 8005886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800588a:	f010 0301 	ands.w	r3, r0, #1
 800588e:	d00a      	beq.n	80058a6 <__swsetup_r+0x9e>
 8005890:	2300      	movs	r3, #0
 8005892:	60a3      	str	r3, [r4, #8]
 8005894:	6963      	ldr	r3, [r4, #20]
 8005896:	425b      	negs	r3, r3
 8005898:	61a3      	str	r3, [r4, #24]
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	b943      	cbnz	r3, 80058b0 <__swsetup_r+0xa8>
 800589e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058a2:	d1c4      	bne.n	800582e <__swsetup_r+0x26>
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	0781      	lsls	r1, r0, #30
 80058a8:	bf58      	it	pl
 80058aa:	6963      	ldrpl	r3, [r4, #20]
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	e7f4      	b.n	800589a <__swsetup_r+0x92>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e7f7      	b.n	80058a4 <__swsetup_r+0x9c>
 80058b4:	2000006c 	.word	0x2000006c

080058b8 <memset>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <_close_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	2300      	movs	r3, #0
 80058cc:	4d05      	ldr	r5, [pc, #20]	; (80058e4 <_close_r+0x1c>)
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc f947 	bl	8001b66 <_close>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_close_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_close_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000318 	.word	0x20000318

080058e8 <_lseek_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	2200      	movs	r2, #0
 80058f2:	4d05      	ldr	r5, [pc, #20]	; (8005908 <_lseek_r+0x20>)
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7fc f959 	bl	8001bae <_lseek>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_lseek_r+0x1e>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_lseek_r+0x1e>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000318 	.word	0x20000318

0800590c <_read_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	2200      	movs	r2, #0
 8005916:	4d05      	ldr	r5, [pc, #20]	; (800592c <_read_r+0x20>)
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fc f906 	bl	8001b2c <_read>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_read_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_read_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	20000318 	.word	0x20000318

08005930 <_write_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	2200      	movs	r2, #0
 800593a:	4d05      	ldr	r5, [pc, #20]	; (8005950 <_write_r+0x20>)
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fb f84e 	bl	80009e0 <_write>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_write_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_write_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20000318 	.word	0x20000318

08005954 <__errno>:
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <__errno+0x8>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2000006c 	.word	0x2000006c

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	2600      	movs	r6, #0
 8005964:	4d0c      	ldr	r5, [pc, #48]	; (8005998 <__libc_init_array+0x38>)
 8005966:	4c0d      	ldr	r4, [pc, #52]	; (800599c <__libc_init_array+0x3c>)
 8005968:	1b64      	subs	r4, r4, r5
 800596a:	10a4      	asrs	r4, r4, #2
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	f000 fd34 	bl	80063dc <_init>
 8005974:	2600      	movs	r6, #0
 8005976:	4d0a      	ldr	r5, [pc, #40]	; (80059a0 <__libc_init_array+0x40>)
 8005978:	4c0a      	ldr	r4, [pc, #40]	; (80059a4 <__libc_init_array+0x44>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	080065d0 	.word	0x080065d0
 800599c:	080065d0 	.word	0x080065d0
 80059a0:	080065d0 	.word	0x080065d0
 80059a4:	080065d4 	.word	0x080065d4

080059a8 <__retarget_lock_init_recursive>:
 80059a8:	4770      	bx	lr

080059aa <__retarget_lock_acquire_recursive>:
 80059aa:	4770      	bx	lr

080059ac <__retarget_lock_release_recursive>:
 80059ac:	4770      	bx	lr
	...

080059b0 <_free_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d040      	beq.n	8005a3a <_free_r+0x8a>
 80059b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059bc:	1f0c      	subs	r4, r1, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	18e4      	addlt	r4, r4, r3
 80059c4:	f000 f8dc 	bl	8005b80 <__malloc_lock>
 80059c8:	4a1c      	ldr	r2, [pc, #112]	; (8005a3c <_free_r+0x8c>)
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	b933      	cbnz	r3, 80059dc <_free_r+0x2c>
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6014      	str	r4, [r2, #0]
 80059d2:	4628      	mov	r0, r5
 80059d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d8:	f000 b8d8 	b.w	8005b8c <__malloc_unlock>
 80059dc:	42a3      	cmp	r3, r4
 80059de:	d908      	bls.n	80059f2 <_free_r+0x42>
 80059e0:	6820      	ldr	r0, [r4, #0]
 80059e2:	1821      	adds	r1, r4, r0
 80059e4:	428b      	cmp	r3, r1
 80059e6:	bf01      	itttt	eq
 80059e8:	6819      	ldreq	r1, [r3, #0]
 80059ea:	685b      	ldreq	r3, [r3, #4]
 80059ec:	1809      	addeq	r1, r1, r0
 80059ee:	6021      	streq	r1, [r4, #0]
 80059f0:	e7ed      	b.n	80059ce <_free_r+0x1e>
 80059f2:	461a      	mov	r2, r3
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b10b      	cbz	r3, 80059fc <_free_r+0x4c>
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d9fa      	bls.n	80059f2 <_free_r+0x42>
 80059fc:	6811      	ldr	r1, [r2, #0]
 80059fe:	1850      	adds	r0, r2, r1
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d10b      	bne.n	8005a1c <_free_r+0x6c>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	4401      	add	r1, r0
 8005a08:	1850      	adds	r0, r2, r1
 8005a0a:	4283      	cmp	r3, r0
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	d1e0      	bne.n	80059d2 <_free_r+0x22>
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4408      	add	r0, r1
 8005a16:	6010      	str	r0, [r2, #0]
 8005a18:	6053      	str	r3, [r2, #4]
 8005a1a:	e7da      	b.n	80059d2 <_free_r+0x22>
 8005a1c:	d902      	bls.n	8005a24 <_free_r+0x74>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	e7d6      	b.n	80059d2 <_free_r+0x22>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	1821      	adds	r1, r4, r0
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	bf01      	itttt	eq
 8005a2c:	6819      	ldreq	r1, [r3, #0]
 8005a2e:	685b      	ldreq	r3, [r3, #4]
 8005a30:	1809      	addeq	r1, r1, r0
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	6054      	str	r4, [r2, #4]
 8005a38:	e7cb      	b.n	80059d2 <_free_r+0x22>
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000320 	.word	0x20000320

08005a40 <sbrk_aligned>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4e0e      	ldr	r6, [pc, #56]	; (8005a7c <sbrk_aligned+0x3c>)
 8005a44:	460c      	mov	r4, r1
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	b911      	cbnz	r1, 8005a52 <sbrk_aligned+0x12>
 8005a4c:	f000 fca8 	bl	80063a0 <_sbrk_r>
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 fca3 	bl	80063a0 <_sbrk_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <sbrk_aligned+0x34>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d007      	beq.n	8005a78 <sbrk_aligned+0x38>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 fc98 	bl	80063a0 <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d101      	bne.n	8005a78 <sbrk_aligned+0x38>
 8005a74:	f04f 34ff 	mov.w	r4, #4294967295
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	20000324 	.word	0x20000324

08005a80 <_malloc_r>:
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	1ccd      	adds	r5, r1, #3
 8005a86:	f025 0503 	bic.w	r5, r5, #3
 8005a8a:	3508      	adds	r5, #8
 8005a8c:	2d0c      	cmp	r5, #12
 8005a8e:	bf38      	it	cc
 8005a90:	250c      	movcc	r5, #12
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	4607      	mov	r7, r0
 8005a96:	db01      	blt.n	8005a9c <_malloc_r+0x1c>
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	d905      	bls.n	8005aa8 <_malloc_r+0x28>
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b7c <_malloc_r+0xfc>
 8005aac:	f000 f868 	bl	8005b80 <__malloc_lock>
 8005ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	bb5c      	cbnz	r4, 8005b10 <_malloc_r+0x90>
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4638      	mov	r0, r7
 8005abc:	f7ff ffc0 	bl	8005a40 <sbrk_aligned>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	d155      	bne.n	8005b72 <_malloc_r+0xf2>
 8005ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8005aca:	4626      	mov	r6, r4
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	d145      	bne.n	8005b5c <_malloc_r+0xdc>
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	d048      	beq.n	8005b66 <_malloc_r+0xe6>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4638      	mov	r0, r7
 8005ada:	eb04 0903 	add.w	r9, r4, r3
 8005ade:	f000 fc5f 	bl	80063a0 <_sbrk_r>
 8005ae2:	4581      	cmp	r9, r0
 8005ae4:	d13f      	bne.n	8005b66 <_malloc_r+0xe6>
 8005ae6:	6821      	ldr	r1, [r4, #0]
 8005ae8:	4638      	mov	r0, r7
 8005aea:	1a6d      	subs	r5, r5, r1
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7ff ffa7 	bl	8005a40 <sbrk_aligned>
 8005af2:	3001      	adds	r0, #1
 8005af4:	d037      	beq.n	8005b66 <_malloc_r+0xe6>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	442b      	add	r3, r5
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	f8d8 3000 	ldr.w	r3, [r8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d038      	beq.n	8005b76 <_malloc_r+0xf6>
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	42a2      	cmp	r2, r4
 8005b08:	d12b      	bne.n	8005b62 <_malloc_r+0xe2>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e00f      	b.n	8005b30 <_malloc_r+0xb0>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	1b52      	subs	r2, r2, r5
 8005b14:	d41f      	bmi.n	8005b56 <_malloc_r+0xd6>
 8005b16:	2a0b      	cmp	r2, #11
 8005b18:	d917      	bls.n	8005b4a <_malloc_r+0xca>
 8005b1a:	1961      	adds	r1, r4, r5
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	6025      	str	r5, [r4, #0]
 8005b20:	bf18      	it	ne
 8005b22:	6059      	strne	r1, [r3, #4]
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	bf08      	it	eq
 8005b28:	f8c8 1000 	streq.w	r1, [r8]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f104 060b 	add.w	r6, r4, #11
 8005b36:	f000 f829 	bl	8005b8c <__malloc_unlock>
 8005b3a:	f026 0607 	bic.w	r6, r6, #7
 8005b3e:	1d23      	adds	r3, r4, #4
 8005b40:	1af2      	subs	r2, r6, r3
 8005b42:	d0ae      	beq.n	8005aa2 <_malloc_r+0x22>
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7ab      	b.n	8005aa2 <_malloc_r+0x22>
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	6862      	ldr	r2, [r4, #4]
 8005b4e:	d1dd      	bne.n	8005b0c <_malloc_r+0x8c>
 8005b50:	f8c8 2000 	str.w	r2, [r8]
 8005b54:	e7ec      	b.n	8005b30 <_malloc_r+0xb0>
 8005b56:	4623      	mov	r3, r4
 8005b58:	6864      	ldr	r4, [r4, #4]
 8005b5a:	e7ac      	b.n	8005ab6 <_malloc_r+0x36>
 8005b5c:	4634      	mov	r4, r6
 8005b5e:	6876      	ldr	r6, [r6, #4]
 8005b60:	e7b4      	b.n	8005acc <_malloc_r+0x4c>
 8005b62:	4613      	mov	r3, r2
 8005b64:	e7cc      	b.n	8005b00 <_malloc_r+0x80>
 8005b66:	230c      	movs	r3, #12
 8005b68:	4638      	mov	r0, r7
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	f000 f80e 	bl	8005b8c <__malloc_unlock>
 8005b70:	e797      	b.n	8005aa2 <_malloc_r+0x22>
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	e7dc      	b.n	8005b30 <_malloc_r+0xb0>
 8005b76:	605b      	str	r3, [r3, #4]
 8005b78:	deff      	udf	#255	; 0xff
 8005b7a:	bf00      	nop
 8005b7c:	20000320 	.word	0x20000320

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f7ff bf12 	b.w	80059aa <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	2000031c 	.word	0x2000031c

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f7ff bf0d 	b.w	80059ac <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	2000031c 	.word	0x2000031c

08005b98 <__sfputc_r>:
 8005b98:	6893      	ldr	r3, [r2, #8]
 8005b9a:	b410      	push	{r4}
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	6093      	str	r3, [r2, #8]
 8005ba2:	da07      	bge.n	8005bb4 <__sfputc_r+0x1c>
 8005ba4:	6994      	ldr	r4, [r2, #24]
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	db01      	blt.n	8005bae <__sfputc_r+0x16>
 8005baa:	290a      	cmp	r1, #10
 8005bac:	d102      	bne.n	8005bb4 <__sfputc_r+0x1c>
 8005bae:	bc10      	pop	{r4}
 8005bb0:	f7ff bded 	b.w	800578e <__swbuf_r>
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	1c58      	adds	r0, r3, #1
 8005bb8:	6010      	str	r0, [r2, #0]
 8005bba:	7019      	strb	r1, [r3, #0]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	bc10      	pop	{r4}
 8005bc0:	4770      	bx	lr

08005bc2 <__sfputs_r>:
 8005bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	18d5      	adds	r5, r2, r3
 8005bcc:	42ac      	cmp	r4, r5
 8005bce:	d101      	bne.n	8005bd4 <__sfputs_r+0x12>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e007      	b.n	8005be4 <__sfputs_r+0x22>
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bdc:	f7ff ffdc 	bl	8005b98 <__sfputc_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d1f3      	bne.n	8005bcc <__sfputs_r+0xa>
 8005be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be8 <_vfiprintf_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460d      	mov	r5, r1
 8005bee:	4614      	mov	r4, r2
 8005bf0:	4698      	mov	r8, r3
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	b09d      	sub	sp, #116	; 0x74
 8005bf6:	b118      	cbz	r0, 8005c00 <_vfiprintf_r+0x18>
 8005bf8:	6a03      	ldr	r3, [r0, #32]
 8005bfa:	b90b      	cbnz	r3, 8005c00 <_vfiprintf_r+0x18>
 8005bfc:	f7ff fce0 	bl	80055c0 <__sinit>
 8005c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7ff fecc 	bl	80059aa <__retarget_lock_acquire_recursive>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	d501      	bpl.n	8005c1c <_vfiprintf_r+0x34>
 8005c18:	692b      	ldr	r3, [r5, #16]
 8005c1a:	b99b      	cbnz	r3, 8005c44 <_vfiprintf_r+0x5c>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff fdf2 	bl	8005808 <__swsetup_r>
 8005c24:	b170      	cbz	r0, 8005c44 <_vfiprintf_r+0x5c>
 8005c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c28:	07dc      	lsls	r4, r3, #31
 8005c2a:	d504      	bpl.n	8005c36 <_vfiprintf_r+0x4e>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	b01d      	add	sp, #116	; 0x74
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	0598      	lsls	r0, r3, #22
 8005c3a:	d4f7      	bmi.n	8005c2c <_vfiprintf_r+0x44>
 8005c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3e:	f7ff feb5 	bl	80059ac <__retarget_lock_release_recursive>
 8005c42:	e7f3      	b.n	8005c2c <_vfiprintf_r+0x44>
 8005c44:	2300      	movs	r3, #0
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c4e:	2330      	movs	r3, #48	; 0x30
 8005c50:	f04f 0901 	mov.w	r9, #1
 8005c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005e08 <_vfiprintf_r+0x220>
 8005c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c60:	4623      	mov	r3, r4
 8005c62:	469a      	mov	sl, r3
 8005c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c68:	b10a      	cbz	r2, 8005c6e <_vfiprintf_r+0x86>
 8005c6a:	2a25      	cmp	r2, #37	; 0x25
 8005c6c:	d1f9      	bne.n	8005c62 <_vfiprintf_r+0x7a>
 8005c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c72:	d00b      	beq.n	8005c8c <_vfiprintf_r+0xa4>
 8005c74:	465b      	mov	r3, fp
 8005c76:	4622      	mov	r2, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa1 	bl	8005bc2 <__sfputs_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f000 80a9 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c88:	445a      	add	r2, fp
 8005c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a1 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca0:	f10a 0a01 	add.w	sl, sl, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cac:	931a      	str	r3, [sp, #104]	; 0x68
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb6:	4854      	ldr	r0, [pc, #336]	; (8005e08 <_vfiprintf_r+0x220>)
 8005cb8:	f000 fb82 	bl	80063c0 <memchr>
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	b9d8      	cbnz	r0, 8005cf8 <_vfiprintf_r+0x110>
 8005cc0:	06d1      	lsls	r1, r2, #27
 8005cc2:	bf44      	itt	mi
 8005cc4:	2320      	movmi	r3, #32
 8005cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cca:	0713      	lsls	r3, r2, #28
 8005ccc:	bf44      	itt	mi
 8005cce:	232b      	movmi	r3, #43	; 0x2b
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cda:	d015      	beq.n	8005d08 <_vfiprintf_r+0x120>
 8005cdc:	4654      	mov	r4, sl
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f04f 0c0a 	mov.w	ip, #10
 8005ce4:	9a07      	ldr	r2, [sp, #28]
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cec:	3b30      	subs	r3, #48	; 0x30
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d94d      	bls.n	8005d8e <_vfiprintf_r+0x1a6>
 8005cf2:	b1b0      	cbz	r0, 8005d22 <_vfiprintf_r+0x13a>
 8005cf4:	9207      	str	r2, [sp, #28]
 8005cf6:	e014      	b.n	8005d22 <_vfiprintf_r+0x13a>
 8005cf8:	eba0 0308 	sub.w	r3, r0, r8
 8005cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	46a2      	mov	sl, r4
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	e7d2      	b.n	8005cae <_vfiprintf_r+0xc6>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	9103      	str	r1, [sp, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfbb      	ittet	lt
 8005d14:	425b      	neglt	r3, r3
 8005d16:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1a:	9307      	strge	r3, [sp, #28]
 8005d1c:	9307      	strlt	r3, [sp, #28]
 8005d1e:	bfb8      	it	lt
 8005d20:	9204      	strlt	r2, [sp, #16]
 8005d22:	7823      	ldrb	r3, [r4, #0]
 8005d24:	2b2e      	cmp	r3, #46	; 0x2e
 8005d26:	d10c      	bne.n	8005d42 <_vfiprintf_r+0x15a>
 8005d28:	7863      	ldrb	r3, [r4, #1]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d134      	bne.n	8005d98 <_vfiprintf_r+0x1b0>
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	3402      	adds	r4, #2
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	9203      	str	r2, [sp, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfb8      	it	lt
 8005d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e0c <_vfiprintf_r+0x224>
 8005d46:	2203      	movs	r2, #3
 8005d48:	4650      	mov	r0, sl
 8005d4a:	7821      	ldrb	r1, [r4, #0]
 8005d4c:	f000 fb38 	bl	80063c0 <memchr>
 8005d50:	b138      	cbz	r0, 8005d62 <_vfiprintf_r+0x17a>
 8005d52:	2240      	movs	r2, #64	; 0x40
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	eba0 000a 	sub.w	r0, r0, sl
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	3401      	adds	r4, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	2206      	movs	r2, #6
 8005d68:	4829      	ldr	r0, [pc, #164]	; (8005e10 <_vfiprintf_r+0x228>)
 8005d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d6e:	f000 fb27 	bl	80063c0 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d03f      	beq.n	8005df6 <_vfiprintf_r+0x20e>
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005d78:	bb1b      	cbnz	r3, 8005dc2 <_vfiprintf_r+0x1da>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	3308      	adds	r3, #8
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	443b      	add	r3, r7
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	e768      	b.n	8005c60 <_vfiprintf_r+0x78>
 8005d8e:	460c      	mov	r4, r1
 8005d90:	2001      	movs	r0, #1
 8005d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d96:	e7a6      	b.n	8005ce6 <_vfiprintf_r+0xfe>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f04f 0c0a 	mov.w	ip, #10
 8005d9e:	4619      	mov	r1, r3
 8005da0:	3401      	adds	r4, #1
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	4620      	mov	r0, r4
 8005da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005daa:	3a30      	subs	r2, #48	; 0x30
 8005dac:	2a09      	cmp	r2, #9
 8005dae:	d903      	bls.n	8005db8 <_vfiprintf_r+0x1d0>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <_vfiprintf_r+0x15a>
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	e7c4      	b.n	8005d42 <_vfiprintf_r+0x15a>
 8005db8:	4604      	mov	r4, r0
 8005dba:	2301      	movs	r3, #1
 8005dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc0:	e7f0      	b.n	8005da4 <_vfiprintf_r+0x1bc>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <_vfiprintf_r+0x230>)
 8005dcc:	a904      	add	r1, sp, #16
 8005dce:	f3af 8000 	nop.w
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	1c78      	adds	r0, r7, #1
 8005dd6:	d1d6      	bne.n	8005d86 <_vfiprintf_r+0x19e>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7ff fde1 	bl	80059ac <__retarget_lock_release_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	065b      	lsls	r3, r3, #25
 8005dee:	f53f af1d 	bmi.w	8005c2c <_vfiprintf_r+0x44>
 8005df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df4:	e71c      	b.n	8005c30 <_vfiprintf_r+0x48>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <_vfiprintf_r+0x230>)
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	f000 f87d 	bl	8005f00 <_printf_i>
 8005e06:	e7e4      	b.n	8005dd2 <_vfiprintf_r+0x1ea>
 8005e08:	08006592 	.word	0x08006592
 8005e0c:	08006598 	.word	0x08006598
 8005e10:	0800659c 	.word	0x0800659c
 8005e14:	00000000 	.word	0x00000000
 8005e18:	08005bc3 	.word	0x08005bc3

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4699      	mov	r9, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	4607      	mov	r7, r0
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bfb8      	it	lt
 8005e2e:	4613      	movlt	r3, r2
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e36:	460c      	mov	r4, r1
 8005e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc2b      	bgt.n	8005ebc <_printf_common+0xa0>
 8005e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e68:	1e13      	subs	r3, r2, #0
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d430      	bmi.n	8005ed6 <_printf_common+0xba>
 8005e74:	4649      	mov	r1, r9
 8005e76:	4638      	mov	r0, r7
 8005e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d023      	beq.n	8005eca <_printf_common+0xae>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf14      	ite	ne
 8005e8e:	2500      	movne	r5, #0
 8005e90:	6833      	ldreq	r3, [r6, #0]
 8005e92:	f04f 0600 	mov.w	r6, #0
 8005e96:	bf08      	it	eq
 8005e98:	68e5      	ldreq	r5, [r4, #12]
 8005e9a:	f104 041a 	add.w	r4, r4, #26
 8005e9e:	bf08      	it	eq
 8005ea0:	1aed      	subeq	r5, r5, r3
 8005ea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ea6:	bf08      	it	eq
 8005ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bfc4      	itt	gt
 8005eb0:	1a9b      	subgt	r3, r3, r2
 8005eb2:	18ed      	addgt	r5, r5, r3
 8005eb4:	42b5      	cmp	r5, r6
 8005eb6:	d11a      	bne.n	8005eee <_printf_common+0xd2>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e008      	b.n	8005ece <_printf_common+0xb2>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d103      	bne.n	8005ed2 <_printf_common+0xb6>
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	3501      	adds	r5, #1
 8005ed4:	e7c1      	b.n	8005e5a <_printf_common+0x3e>
 8005ed6:	2030      	movs	r0, #48	; 0x30
 8005ed8:	18e1      	adds	r1, r4, r3
 8005eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee4:	4422      	add	r2, r4
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eec:	e7c2      	b.n	8005e74 <_printf_common+0x58>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	47c0      	blx	r8
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d0e6      	beq.n	8005eca <_printf_common+0xae>
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7d9      	b.n	8005eb4 <_printf_common+0x98>

08005f00 <_printf_i>:
 8005f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	7e0f      	ldrb	r7, [r1, #24]
 8005f06:	4691      	mov	r9, r2
 8005f08:	2f78      	cmp	r7, #120	; 0x78
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	469a      	mov	sl, r3
 8005f10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f16:	d807      	bhi.n	8005f28 <_printf_i+0x28>
 8005f18:	2f62      	cmp	r7, #98	; 0x62
 8005f1a:	d80a      	bhi.n	8005f32 <_printf_i+0x32>
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f000 80d5 	beq.w	80060cc <_printf_i+0x1cc>
 8005f22:	2f58      	cmp	r7, #88	; 0x58
 8005f24:	f000 80c1 	beq.w	80060aa <_printf_i+0x1aa>
 8005f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f30:	e03a      	b.n	8005fa8 <_printf_i+0xa8>
 8005f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f36:	2b15      	cmp	r3, #21
 8005f38:	d8f6      	bhi.n	8005f28 <_printf_i+0x28>
 8005f3a:	a101      	add	r1, pc, #4	; (adr r1, 8005f40 <_printf_i+0x40>)
 8005f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005fad 	.word	0x08005fad
 8005f48:	08005f29 	.word	0x08005f29
 8005f4c:	08005f29 	.word	0x08005f29
 8005f50:	08005f29 	.word	0x08005f29
 8005f54:	08005f29 	.word	0x08005f29
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005f29 	.word	0x08005f29
 8005f60:	08005f29 	.word	0x08005f29
 8005f64:	08005f29 	.word	0x08005f29
 8005f68:	08005f29 	.word	0x08005f29
 8005f6c:	080060b3 	.word	0x080060b3
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	0800606d 	.word	0x0800606d
 8005f78:	08005f29 	.word	0x08005f29
 8005f7c:	08005f29 	.word	0x08005f29
 8005f80:	080060d5 	.word	0x080060d5
 8005f84:	08005f29 	.word	0x08005f29
 8005f88:	08005fd9 	.word	0x08005fd9
 8005f8c:	08005f29 	.word	0x08005f29
 8005f90:	08005f29 	.word	0x08005f29
 8005f94:	08006075 	.word	0x08006075
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	602a      	str	r2, [r5, #0]
 8005fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0a0      	b.n	80060ee <_printf_i+0x1ee>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	0607      	lsls	r7, r0, #24
 8005fb2:	f103 0104 	add.w	r1, r3, #4
 8005fb6:	6029      	str	r1, [r5, #0]
 8005fb8:	d501      	bpl.n	8005fbe <_printf_i+0xbe>
 8005fba:	681e      	ldr	r6, [r3, #0]
 8005fbc:	e003      	b.n	8005fc6 <_printf_i+0xc6>
 8005fbe:	0646      	lsls	r6, r0, #25
 8005fc0:	d5fb      	bpl.n	8005fba <_printf_i+0xba>
 8005fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	da03      	bge.n	8005fd2 <_printf_i+0xd2>
 8005fca:	232d      	movs	r3, #45	; 0x2d
 8005fcc:	4276      	negs	r6, r6
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	4859      	ldr	r0, [pc, #356]	; (800613c <_printf_i+0x23c>)
 8005fd6:	e012      	b.n	8005ffe <_printf_i+0xfe>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	6029      	str	r1, [r5, #0]
 8005fe0:	0605      	lsls	r5, r0, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0xe8>
 8005fe4:	681e      	ldr	r6, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_printf_i+0xee>
 8005fe8:	0641      	lsls	r1, r0, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0xe4>
 8005fec:	881e      	ldrh	r6, [r3, #0]
 8005fee:	2f6f      	cmp	r7, #111	; 0x6f
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2308      	moveq	r3, #8
 8005ff4:	230a      	movne	r3, #10
 8005ff6:	4851      	ldr	r0, [pc, #324]	; (800613c <_printf_i+0x23c>)
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffe:	6865      	ldr	r5, [r4, #4]
 8006000:	2d00      	cmp	r5, #0
 8006002:	bfa8      	it	ge
 8006004:	6821      	ldrge	r1, [r4, #0]
 8006006:	60a5      	str	r5, [r4, #8]
 8006008:	bfa4      	itt	ge
 800600a:	f021 0104 	bicge.w	r1, r1, #4
 800600e:	6021      	strge	r1, [r4, #0]
 8006010:	b90e      	cbnz	r6, 8006016 <_printf_i+0x116>
 8006012:	2d00      	cmp	r5, #0
 8006014:	d04b      	beq.n	80060ae <_printf_i+0x1ae>
 8006016:	4615      	mov	r5, r2
 8006018:	fbb6 f1f3 	udiv	r1, r6, r3
 800601c:	fb03 6711 	mls	r7, r3, r1, r6
 8006020:	5dc7      	ldrb	r7, [r0, r7]
 8006022:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006026:	4637      	mov	r7, r6
 8006028:	42bb      	cmp	r3, r7
 800602a:	460e      	mov	r6, r1
 800602c:	d9f4      	bls.n	8006018 <_printf_i+0x118>
 800602e:	2b08      	cmp	r3, #8
 8006030:	d10b      	bne.n	800604a <_printf_i+0x14a>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	07de      	lsls	r6, r3, #31
 8006036:	d508      	bpl.n	800604a <_printf_i+0x14a>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	6861      	ldr	r1, [r4, #4]
 800603c:	4299      	cmp	r1, r3
 800603e:	bfde      	ittt	le
 8006040:	2330      	movle	r3, #48	; 0x30
 8006042:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006046:	f105 35ff 	addle.w	r5, r5, #4294967295
 800604a:	1b52      	subs	r2, r2, r5
 800604c:	6122      	str	r2, [r4, #16]
 800604e:	464b      	mov	r3, r9
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f8cd a000 	str.w	sl, [sp]
 8006058:	aa03      	add	r2, sp, #12
 800605a:	f7ff fedf 	bl	8005e1c <_printf_common>
 800605e:	3001      	adds	r0, #1
 8006060:	d14a      	bne.n	80060f8 <_printf_i+0x1f8>
 8006062:	f04f 30ff 	mov.w	r0, #4294967295
 8006066:	b004      	add	sp, #16
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	f043 0320 	orr.w	r3, r3, #32
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	2778      	movs	r7, #120	; 0x78
 8006076:	4832      	ldr	r0, [pc, #200]	; (8006140 <_printf_i+0x240>)
 8006078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	6829      	ldr	r1, [r5, #0]
 8006080:	061f      	lsls	r7, r3, #24
 8006082:	f851 6b04 	ldr.w	r6, [r1], #4
 8006086:	d402      	bmi.n	800608e <_printf_i+0x18e>
 8006088:	065f      	lsls	r7, r3, #25
 800608a:	bf48      	it	mi
 800608c:	b2b6      	uxthmi	r6, r6
 800608e:	07df      	lsls	r7, r3, #31
 8006090:	bf48      	it	mi
 8006092:	f043 0320 	orrmi.w	r3, r3, #32
 8006096:	6029      	str	r1, [r5, #0]
 8006098:	bf48      	it	mi
 800609a:	6023      	strmi	r3, [r4, #0]
 800609c:	b91e      	cbnz	r6, 80060a6 <_printf_i+0x1a6>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f023 0320 	bic.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	2310      	movs	r3, #16
 80060a8:	e7a6      	b.n	8005ff8 <_printf_i+0xf8>
 80060aa:	4824      	ldr	r0, [pc, #144]	; (800613c <_printf_i+0x23c>)
 80060ac:	e7e4      	b.n	8006078 <_printf_i+0x178>
 80060ae:	4615      	mov	r5, r2
 80060b0:	e7bd      	b.n	800602e <_printf_i+0x12e>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	6826      	ldr	r6, [r4, #0]
 80060b6:	1d18      	adds	r0, r3, #4
 80060b8:	6961      	ldr	r1, [r4, #20]
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	0635      	lsls	r5, r6, #24
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	d501      	bpl.n	80060c6 <_printf_i+0x1c6>
 80060c2:	6019      	str	r1, [r3, #0]
 80060c4:	e002      	b.n	80060cc <_printf_i+0x1cc>
 80060c6:	0670      	lsls	r0, r6, #25
 80060c8:	d5fb      	bpl.n	80060c2 <_printf_i+0x1c2>
 80060ca:	8019      	strh	r1, [r3, #0]
 80060cc:	2300      	movs	r3, #0
 80060ce:	4615      	mov	r5, r2
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	e7bc      	b.n	800604e <_printf_i+0x14e>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	2100      	movs	r1, #0
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	681d      	ldr	r5, [r3, #0]
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	4628      	mov	r0, r5
 80060e2:	f000 f96d 	bl	80063c0 <memchr>
 80060e6:	b108      	cbz	r0, 80060ec <_printf_i+0x1ec>
 80060e8:	1b40      	subs	r0, r0, r5
 80060ea:	6060      	str	r0, [r4, #4]
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	2300      	movs	r3, #0
 80060f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f6:	e7aa      	b.n	800604e <_printf_i+0x14e>
 80060f8:	462a      	mov	r2, r5
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	47d0      	blx	sl
 8006102:	3001      	adds	r0, #1
 8006104:	d0ad      	beq.n	8006062 <_printf_i+0x162>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	079b      	lsls	r3, r3, #30
 800610a:	d413      	bmi.n	8006134 <_printf_i+0x234>
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	4298      	cmp	r0, r3
 8006112:	bfb8      	it	lt
 8006114:	4618      	movlt	r0, r3
 8006116:	e7a6      	b.n	8006066 <_printf_i+0x166>
 8006118:	2301      	movs	r3, #1
 800611a:	4632      	mov	r2, r6
 800611c:	4649      	mov	r1, r9
 800611e:	4640      	mov	r0, r8
 8006120:	47d0      	blx	sl
 8006122:	3001      	adds	r0, #1
 8006124:	d09d      	beq.n	8006062 <_printf_i+0x162>
 8006126:	3501      	adds	r5, #1
 8006128:	68e3      	ldr	r3, [r4, #12]
 800612a:	9903      	ldr	r1, [sp, #12]
 800612c:	1a5b      	subs	r3, r3, r1
 800612e:	42ab      	cmp	r3, r5
 8006130:	dcf2      	bgt.n	8006118 <_printf_i+0x218>
 8006132:	e7eb      	b.n	800610c <_printf_i+0x20c>
 8006134:	2500      	movs	r5, #0
 8006136:	f104 0619 	add.w	r6, r4, #25
 800613a:	e7f5      	b.n	8006128 <_printf_i+0x228>
 800613c:	080065a3 	.word	0x080065a3
 8006140:	080065b4 	.word	0x080065b4

08006144 <__sflush_r>:
 8006144:	898a      	ldrh	r2, [r1, #12]
 8006146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006148:	4605      	mov	r5, r0
 800614a:	0710      	lsls	r0, r2, #28
 800614c:	460c      	mov	r4, r1
 800614e:	d457      	bmi.n	8006200 <__sflush_r+0xbc>
 8006150:	684b      	ldr	r3, [r1, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	dc04      	bgt.n	8006160 <__sflush_r+0x1c>
 8006156:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	dc01      	bgt.n	8006160 <__sflush_r+0x1c>
 800615c:	2000      	movs	r0, #0
 800615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006162:	2e00      	cmp	r6, #0
 8006164:	d0fa      	beq.n	800615c <__sflush_r+0x18>
 8006166:	2300      	movs	r3, #0
 8006168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800616c:	682f      	ldr	r7, [r5, #0]
 800616e:	6a21      	ldr	r1, [r4, #32]
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	d032      	beq.n	80061da <__sflush_r+0x96>
 8006174:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	075a      	lsls	r2, r3, #29
 800617a:	d505      	bpl.n	8006188 <__sflush_r+0x44>
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	1ac0      	subs	r0, r0, r3
 8006180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006182:	b10b      	cbz	r3, 8006188 <__sflush_r+0x44>
 8006184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006186:	1ac0      	subs	r0, r0, r3
 8006188:	2300      	movs	r3, #0
 800618a:	4602      	mov	r2, r0
 800618c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800618e:	4628      	mov	r0, r5
 8006190:	6a21      	ldr	r1, [r4, #32]
 8006192:	47b0      	blx	r6
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	d106      	bne.n	80061a8 <__sflush_r+0x64>
 800619a:	6829      	ldr	r1, [r5, #0]
 800619c:	291d      	cmp	r1, #29
 800619e:	d82b      	bhi.n	80061f8 <__sflush_r+0xb4>
 80061a0:	4a28      	ldr	r2, [pc, #160]	; (8006244 <__sflush_r+0x100>)
 80061a2:	410a      	asrs	r2, r1
 80061a4:	07d6      	lsls	r6, r2, #31
 80061a6:	d427      	bmi.n	80061f8 <__sflush_r+0xb4>
 80061a8:	2200      	movs	r2, #0
 80061aa:	6062      	str	r2, [r4, #4]
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	04d9      	lsls	r1, r3, #19
 80061b0:	6022      	str	r2, [r4, #0]
 80061b2:	d504      	bpl.n	80061be <__sflush_r+0x7a>
 80061b4:	1c42      	adds	r2, r0, #1
 80061b6:	d101      	bne.n	80061bc <__sflush_r+0x78>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b903      	cbnz	r3, 80061be <__sflush_r+0x7a>
 80061bc:	6560      	str	r0, [r4, #84]	; 0x54
 80061be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061c0:	602f      	str	r7, [r5, #0]
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d0ca      	beq.n	800615c <__sflush_r+0x18>
 80061c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ca:	4299      	cmp	r1, r3
 80061cc:	d002      	beq.n	80061d4 <__sflush_r+0x90>
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7ff fbee 	bl	80059b0 <_free_r>
 80061d4:	2000      	movs	r0, #0
 80061d6:	6360      	str	r0, [r4, #52]	; 0x34
 80061d8:	e7c1      	b.n	800615e <__sflush_r+0x1a>
 80061da:	2301      	movs	r3, #1
 80061dc:	4628      	mov	r0, r5
 80061de:	47b0      	blx	r6
 80061e0:	1c41      	adds	r1, r0, #1
 80061e2:	d1c8      	bne.n	8006176 <__sflush_r+0x32>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0c5      	beq.n	8006176 <__sflush_r+0x32>
 80061ea:	2b1d      	cmp	r3, #29
 80061ec:	d001      	beq.n	80061f2 <__sflush_r+0xae>
 80061ee:	2b16      	cmp	r3, #22
 80061f0:	d101      	bne.n	80061f6 <__sflush_r+0xb2>
 80061f2:	602f      	str	r7, [r5, #0]
 80061f4:	e7b2      	b.n	800615c <__sflush_r+0x18>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	e7ae      	b.n	800615e <__sflush_r+0x1a>
 8006200:	690f      	ldr	r7, [r1, #16]
 8006202:	2f00      	cmp	r7, #0
 8006204:	d0aa      	beq.n	800615c <__sflush_r+0x18>
 8006206:	0793      	lsls	r3, r2, #30
 8006208:	bf18      	it	ne
 800620a:	2300      	movne	r3, #0
 800620c:	680e      	ldr	r6, [r1, #0]
 800620e:	bf08      	it	eq
 8006210:	694b      	ldreq	r3, [r1, #20]
 8006212:	1bf6      	subs	r6, r6, r7
 8006214:	600f      	str	r7, [r1, #0]
 8006216:	608b      	str	r3, [r1, #8]
 8006218:	2e00      	cmp	r6, #0
 800621a:	dd9f      	ble.n	800615c <__sflush_r+0x18>
 800621c:	4633      	mov	r3, r6
 800621e:	463a      	mov	r2, r7
 8006220:	4628      	mov	r0, r5
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006228:	47e0      	blx	ip
 800622a:	2800      	cmp	r0, #0
 800622c:	dc06      	bgt.n	800623c <__sflush_r+0xf8>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	e790      	b.n	800615e <__sflush_r+0x1a>
 800623c:	4407      	add	r7, r0
 800623e:	1a36      	subs	r6, r6, r0
 8006240:	e7ea      	b.n	8006218 <__sflush_r+0xd4>
 8006242:	bf00      	nop
 8006244:	dfbffffe 	.word	0xdfbffffe

08006248 <_fflush_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	4605      	mov	r5, r0
 800624e:	460c      	mov	r4, r1
 8006250:	b913      	cbnz	r3, 8006258 <_fflush_r+0x10>
 8006252:	2500      	movs	r5, #0
 8006254:	4628      	mov	r0, r5
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	b118      	cbz	r0, 8006262 <_fflush_r+0x1a>
 800625a:	6a03      	ldr	r3, [r0, #32]
 800625c:	b90b      	cbnz	r3, 8006262 <_fflush_r+0x1a>
 800625e:	f7ff f9af 	bl	80055c0 <__sinit>
 8006262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f3      	beq.n	8006252 <_fflush_r+0xa>
 800626a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800626c:	07d0      	lsls	r0, r2, #31
 800626e:	d404      	bmi.n	800627a <_fflush_r+0x32>
 8006270:	0599      	lsls	r1, r3, #22
 8006272:	d402      	bmi.n	800627a <_fflush_r+0x32>
 8006274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006276:	f7ff fb98 	bl	80059aa <__retarget_lock_acquire_recursive>
 800627a:	4628      	mov	r0, r5
 800627c:	4621      	mov	r1, r4
 800627e:	f7ff ff61 	bl	8006144 <__sflush_r>
 8006282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006284:	4605      	mov	r5, r0
 8006286:	07da      	lsls	r2, r3, #31
 8006288:	d4e4      	bmi.n	8006254 <_fflush_r+0xc>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	059b      	lsls	r3, r3, #22
 800628e:	d4e1      	bmi.n	8006254 <_fflush_r+0xc>
 8006290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006292:	f7ff fb8b 	bl	80059ac <__retarget_lock_release_recursive>
 8006296:	e7dd      	b.n	8006254 <_fflush_r+0xc>

08006298 <__swhatbuf_r>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a0:	4615      	mov	r5, r2
 80062a2:	2900      	cmp	r1, #0
 80062a4:	461e      	mov	r6, r3
 80062a6:	b096      	sub	sp, #88	; 0x58
 80062a8:	da0c      	bge.n	80062c4 <__swhatbuf_r+0x2c>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	2100      	movs	r1, #0
 80062ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062b2:	bf0c      	ite	eq
 80062b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062b8:	2340      	movne	r3, #64	; 0x40
 80062ba:	2000      	movs	r0, #0
 80062bc:	6031      	str	r1, [r6, #0]
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	b016      	add	sp, #88	; 0x58
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	466a      	mov	r2, sp
 80062c6:	f000 f849 	bl	800635c <_fstat_r>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	dbed      	blt.n	80062aa <__swhatbuf_r+0x12>
 80062ce:	9901      	ldr	r1, [sp, #4]
 80062d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80062d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80062d8:	4259      	negs	r1, r3
 80062da:	4159      	adcs	r1, r3
 80062dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e0:	e7eb      	b.n	80062ba <__swhatbuf_r+0x22>

080062e2 <__smakebuf_r>:
 80062e2:	898b      	ldrh	r3, [r1, #12]
 80062e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062e6:	079d      	lsls	r5, r3, #30
 80062e8:	4606      	mov	r6, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	d507      	bpl.n	80062fe <__smakebuf_r+0x1c>
 80062ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2301      	movs	r3, #1
 80062f8:	6163      	str	r3, [r4, #20]
 80062fa:	b002      	add	sp, #8
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	466a      	mov	r2, sp
 8006300:	ab01      	add	r3, sp, #4
 8006302:	f7ff ffc9 	bl	8006298 <__swhatbuf_r>
 8006306:	9900      	ldr	r1, [sp, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff fbb8 	bl	8005a80 <_malloc_r>
 8006310:	b948      	cbnz	r0, 8006326 <__smakebuf_r+0x44>
 8006312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006316:	059a      	lsls	r2, r3, #22
 8006318:	d4ef      	bmi.n	80062fa <__smakebuf_r+0x18>
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	f043 0302 	orr.w	r3, r3, #2
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	e7e3      	b.n	80062ee <__smakebuf_r+0xc>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	6020      	str	r0, [r4, #0]
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	9b00      	ldr	r3, [sp, #0]
 8006332:	6120      	str	r0, [r4, #16]
 8006334:	6163      	str	r3, [r4, #20]
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	b15b      	cbz	r3, 8006352 <__smakebuf_r+0x70>
 800633a:	4630      	mov	r0, r6
 800633c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006340:	f000 f81e 	bl	8006380 <_isatty_r>
 8006344:	b128      	cbz	r0, 8006352 <__smakebuf_r+0x70>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	431d      	orrs	r5, r3
 8006356:	81a5      	strh	r5, [r4, #12]
 8006358:	e7cf      	b.n	80062fa <__smakebuf_r+0x18>
	...

0800635c <_fstat_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	2300      	movs	r3, #0
 8006360:	4d06      	ldr	r5, [pc, #24]	; (800637c <_fstat_r+0x20>)
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	602b      	str	r3, [r5, #0]
 800636a:	f7fb fc07 	bl	8001b7c <_fstat>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d102      	bne.n	8006378 <_fstat_r+0x1c>
 8006372:	682b      	ldr	r3, [r5, #0]
 8006374:	b103      	cbz	r3, 8006378 <_fstat_r+0x1c>
 8006376:	6023      	str	r3, [r4, #0]
 8006378:	bd38      	pop	{r3, r4, r5, pc}
 800637a:	bf00      	nop
 800637c:	20000318 	.word	0x20000318

08006380 <_isatty_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	2300      	movs	r3, #0
 8006384:	4d05      	ldr	r5, [pc, #20]	; (800639c <_isatty_r+0x1c>)
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fb fc05 	bl	8001b9a <_isatty>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_isatty_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_isatty_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000318 	.word	0x20000318

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	2300      	movs	r3, #0
 80063a4:	4d05      	ldr	r5, [pc, #20]	; (80063bc <_sbrk_r+0x1c>)
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb fc0c 	bl	8001bc8 <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000318 	.word	0x20000318

080063c0 <memchr>:
 80063c0:	4603      	mov	r3, r0
 80063c2:	b510      	push	{r4, lr}
 80063c4:	b2c9      	uxtb	r1, r1
 80063c6:	4402      	add	r2, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	d101      	bne.n	80063d2 <memchr+0x12>
 80063ce:	2000      	movs	r0, #0
 80063d0:	e003      	b.n	80063da <memchr+0x1a>
 80063d2:	7804      	ldrb	r4, [r0, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	428c      	cmp	r4, r1
 80063d8:	d1f6      	bne.n	80063c8 <memchr+0x8>
 80063da:	bd10      	pop	{r4, pc}

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
