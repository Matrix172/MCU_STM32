
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800442c  0800442c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004434  08004434  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000006c  080044a8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080044a8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b09a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df4  00000000  00000000  0002b172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000924  00000000  00000000  0002db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017939  00000000  00000000  0002e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccea  00000000  00000000  00045dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000937b9  00000000  00000000  00052ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039b4  00000000  00000000  000e6270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e9c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	080041c8 	.word	0x080041c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	080041c8 	.word	0x080041c8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 fd75 	bl	8000fba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f958 	bl	8000788 <MX_GPIO_Init>
	MX_TIM3_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_TIM3_Init>
	MX_SPI1_Init();
 80004dc:	f000 f8aa 	bl	8000634 <MX_SPI1_Init>
	MX_ADC_Init();
 80004e0:	f000 f850 	bl	8000584 <MX_ADC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x1c>
	...

080004e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b092      	sub	sp, #72	; 0x48
 80004ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2234      	movs	r2, #52	; 0x34
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 f8d4 	bl	80036a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <SystemClock_Config+0x98>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <SystemClock_Config+0x98>)
 8000514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000518:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2310      	movs	r3, #16
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2300      	movs	r3, #0
 800052c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800052e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000534:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fb2a 	bl	8001b98 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800054a:	f000 faff 	bl	8000b4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	2303      	movs	r3, #3
 8000554:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fe46 	bl	80021f8 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000572:	f000 faeb 	bl	8000b4c <Error_Handler>
	}
}
 8000576:	bf00      	nop
 8000578:	3748      	adds	r7, #72	; 0x48
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40007000 	.word	0x40007000

08000584 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_ADC_Init+0xa8>)
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_ADC_Init+0xac>)
 8000598:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_ADC_Init+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_ADC_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC_Init+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC_Init+0xa8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_ADC_Init+0xa8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC_Init+0xa8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_ADC_Init+0xa8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC_Init+0xa8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_ADC_Init+0xa8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_ADC_Init+0xa8>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC_Init+0xa8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC_Init+0xa8>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC_Init+0xa8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC_Init+0xa8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC_Init+0xa8>)
 80005f6:	f000 fd4f 	bl	8001098 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC_Init+0x80>
	{
		Error_Handler();
 8000600:	f000 faa4 	bl	8000b4c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000608:	2301      	movs	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 800060c:	2307      	movs	r3, #7
 800060e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC_Init+0xa8>)
 8000616:	f000 fe85 	bl	8001324 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 8000620:	f000 fa94 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000088 	.word	0x20000088
 8000630:	40012400 	.word	0x40012400

08000634 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_SPI1_Init+0x64>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_SPI1_Init+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI1_Init+0x64>)
 8000640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000644:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x64>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x64>)
 8000680:	220a      	movs	r2, #10
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_SPI1_Init+0x64>)
 8000686:	f002 f809 	bl	800269c <HAL_SPI_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000690:	f000 fa5c 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000dc 	.word	0x200000dc
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006cc:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <MX_TIM3_Init+0xe4>)
 80006ce:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32000;
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006d6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f2:	4823      	ldr	r0, [pc, #140]	; (8000780 <MX_TIM3_Init+0xe0>)
 80006f4:	f002 f85b 	bl	80027ae <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 80006fe:	f000 fa25 	bl	8000b4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4619      	mov	r1, r3
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000710:	f002 fa72 	bl	8002bf8 <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800071a:	f000 fa17 	bl	8000b4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000720:	f002 f884 	bl	800282c <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 800072a:	f000 fa0f 	bl	8000b4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <MX_TIM3_Init+0xe0>)
 800073e:	f002 fd4b 	bl	80031d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 8000748:	f000 fa00 	bl	8000b4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000764:	f002 f986 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 800076e:	f000 f9ed 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <MX_TIM3_Init+0xe0>)
 8000774:	f000 faee 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134
 8000784:	40000400 	.word	0x40000400

08000788 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_GPIO_Init+0xe8>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <MX_GPIO_Init+0xec>)
 80007ee:	f001 f9a3 	bl	8001b38 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BTNCarte_Pin BTN4_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTNCarte_Pin|BTN4_Pin|BTN3_Pin;
 80007f2:	f242 0360 	movw	r3, #8288	; 0x2060
 80007f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <MX_GPIO_Init+0xf0>)
 800080a:	f001 f805 	bl	8001818 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_GPIO_Init+0xec>)
 8000828:	f000 fff6 	bl	8001818 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800082c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000830:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000836:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xec>)
 8000844:	f000 ffe8 	bl	8001818 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f000 ffac 	bl	80017aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f000 ffc5 	bl	80017e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f000 ffa4 	bl	80017aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000862:	2028      	movs	r0, #40	; 0x28
 8000864:	f000 ffbd 	bl	80017e2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020800 	.word	0x40020800

0800087c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e009      	b.n	80008a2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	60ba      	str	r2, [r7, #8]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fdf0 	bl	800047c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbf1      	blt.n	800088e <_write+0x12>
	}
	return len;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin){
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c4:	d013      	beq.n	80008ee <HAL_GPIO_EXTI_Callback+0x3a>
 80008c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ca:	dc4e      	bgt.n	800096a <HAL_GPIO_EXTI_Callback+0xb6>
 80008cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008d0:	d030      	beq.n	8000934 <HAL_GPIO_EXTI_Callback+0x80>
 80008d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008d6:	dc48      	bgt.n	800096a <HAL_GPIO_EXTI_Callback+0xb6>
 80008d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008dc:	d021      	beq.n	8000922 <HAL_GPIO_EXTI_Callback+0x6e>
 80008de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008e2:	dc42      	bgt.n	800096a <HAL_GPIO_EXTI_Callback+0xb6>
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d037      	beq.n	8000958 <HAL_GPIO_EXTI_Callback+0xa4>
 80008e8:	2b40      	cmp	r3, #64	; 0x40
 80008ea:	d02c      	beq.n	8000946 <HAL_GPIO_EXTI_Callback+0x92>
		printf("BTN4_Pin\n");
		B4(mode);
		break;

	default :
		break;
 80008ec:	e03d      	b.n	800096a <HAL_GPIO_EXTI_Callback+0xb6>
		if (mode < 4){
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	dc0b      	bgt.n	800090e <HAL_GPIO_EXTI_Callback+0x5a>
			mode ++;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 80008fe:	6013      	str	r3, [r2, #0]
			printf("Mode : %d\n", mode);
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000908:	f002 fd86 	bl	8003418 <iprintf>
		break;
 800090c:	e02e      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
			mode = 1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
			printf("Mode : %d\n", mode);
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4817      	ldr	r0, [pc, #92]	; (8000978 <HAL_GPIO_EXTI_Callback+0xc4>)
 800091c:	f002 fd7c 	bl	8003418 <iprintf>
		break;
 8000920:	e024      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
		printf("BTN1_Pin\n");
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000924:	f002 fdde 	bl	80034e4 <puts>
		B1(mode);
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f82d 	bl	800098c <B1>
		break;
 8000932:	e01b      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
		printf("BTN2_Pin\n");
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000936:	f002 fdd5 	bl	80034e4 <puts>
		B2(mode);
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f85c 	bl	80009fc <B2>
		break;
 8000944:	e012      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
		printf("BTN3_Pin\n");
 8000946:	480f      	ldr	r0, [pc, #60]	; (8000984 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000948:	f002 fdcc 	bl	80034e4 <puts>
		B3(mode);
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f88b 	bl	8000a6c <B3>
		break;
 8000956:	e009      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
		printf("BTN4_Pin\n");
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <HAL_GPIO_EXTI_Callback+0xd4>)
 800095a:	f002 fdc3 	bl	80034e4 <puts>
		B4(mode);
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8ba 	bl	8000adc <B4>
		break;
 8000968:	e000      	b.n	800096c <HAL_GPIO_EXTI_Callback+0xb8>
		break;
 800096a:	bf00      	nop
	}
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	080041e0 	.word	0x080041e0
 800097c:	080041ec 	.word	0x080041ec
 8000980:	080041f8 	.word	0x080041f8
 8000984:	08004204 	.word	0x08004204
 8000988:	08004210 	.word	0x08004210

0800098c <B1>:

void B1(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	printf("B1, mode %d\n", mode);
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <B1+0x58>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <B1+0x5c>)
 8000998:	f002 fd3e 	bl	8003418 <iprintf>
	switch(mode){
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <B1+0x58>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d81a      	bhi.n	80009dc <B1+0x50>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <B1+0x20>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	080009c5 	.word	0x080009c5
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009d5 	.word	0x080009d5
	case 1:
		printf("Action bouton 1 mode 1\n");
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <B1+0x60>)
 80009be:	f002 fd91 	bl	80034e4 <puts>
		break;
 80009c2:	e00c      	b.n	80009de <B1+0x52>
	case 2:
		printf("Action bouton 1 mode 2\n");
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <B1+0x64>)
 80009c6:	f002 fd8d 	bl	80034e4 <puts>
		break;
 80009ca:	e008      	b.n	80009de <B1+0x52>
	case 3:
		printf("Action bouton 1 mode 3\n");
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <B1+0x68>)
 80009ce:	f002 fd89 	bl	80034e4 <puts>
		break;
 80009d2:	e004      	b.n	80009de <B1+0x52>
	case 4:
		printf("Action bouton 1 mode 4\n");
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <B1+0x6c>)
 80009d6:	f002 fd85 	bl	80034e4 <puts>
		break;
 80009da:	e000      	b.n	80009de <B1+0x52>
	default:
		break;
 80009dc:	bf00      	nop
	}
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000000 	.word	0x20000000
 80009e8:	0800421c 	.word	0x0800421c
 80009ec:	0800422c 	.word	0x0800422c
 80009f0:	08004244 	.word	0x08004244
 80009f4:	0800425c 	.word	0x0800425c
 80009f8:	08004274 	.word	0x08004274

080009fc <B2>:
void B2(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	printf("B2, mode %d\n", mode);
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <B2+0x58>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <B2+0x5c>)
 8000a08:	f002 fd06 	bl	8003418 <iprintf>
	switch(mode){
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <B2+0x58>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d81a      	bhi.n	8000a4c <B2+0x50>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <B2+0x20>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a2d 	.word	0x08000a2d
 8000a20:	08000a35 	.word	0x08000a35
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a45 	.word	0x08000a45
	case 1:
		printf("Action bouton 2 mode 1\n");
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <B2+0x60>)
 8000a2e:	f002 fd59 	bl	80034e4 <puts>
		break;
 8000a32:	e00c      	b.n	8000a4e <B2+0x52>
	case 2:
		printf("Action bouton 2 mode 2\n");
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <B2+0x64>)
 8000a36:	f002 fd55 	bl	80034e4 <puts>
		break;
 8000a3a:	e008      	b.n	8000a4e <B2+0x52>
	case 3:
		printf("Action bouton 2 mode 3\n");
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <B2+0x68>)
 8000a3e:	f002 fd51 	bl	80034e4 <puts>
		break;
 8000a42:	e004      	b.n	8000a4e <B2+0x52>
	case 4:
		printf("Action bouton 2 mode 4\n");
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <B2+0x6c>)
 8000a46:	f002 fd4d 	bl	80034e4 <puts>
		break;
 8000a4a:	e000      	b.n	8000a4e <B2+0x52>
	default:
		break;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000
 8000a58:	0800428c 	.word	0x0800428c
 8000a5c:	0800429c 	.word	0x0800429c
 8000a60:	080042b4 	.word	0x080042b4
 8000a64:	080042cc 	.word	0x080042cc
 8000a68:	080042e4 	.word	0x080042e4

08000a6c <B3>:
void B3(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	printf("B3, mode %d\n", mode);
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <B3+0x58>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <B3+0x5c>)
 8000a78:	f002 fcce 	bl	8003418 <iprintf>
	switch(mode){
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <B3+0x58>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d81a      	bhi.n	8000abc <B3+0x50>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <B3+0x20>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000a9d 	.word	0x08000a9d
 8000a90:	08000aa5 	.word	0x08000aa5
 8000a94:	08000aad 	.word	0x08000aad
 8000a98:	08000ab5 	.word	0x08000ab5
	case 1:
		printf("Action bouton 3 mode 1\n");
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <B3+0x60>)
 8000a9e:	f002 fd21 	bl	80034e4 <puts>
		break;
 8000aa2:	e00c      	b.n	8000abe <B3+0x52>
	case 2:
		printf("Action bouton 3 mode 2\n");
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <B3+0x64>)
 8000aa6:	f002 fd1d 	bl	80034e4 <puts>
		break;
 8000aaa:	e008      	b.n	8000abe <B3+0x52>
	case 3:
		printf("Action bouton 3 mode 3\n");
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <B3+0x68>)
 8000aae:	f002 fd19 	bl	80034e4 <puts>
		break;
 8000ab2:	e004      	b.n	8000abe <B3+0x52>
	case 4:
		printf("Action bouton 3 mode 4\n");
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <B3+0x6c>)
 8000ab6:	f002 fd15 	bl	80034e4 <puts>
		break;
 8000aba:	e000      	b.n	8000abe <B3+0x52>
	default:
		break;
 8000abc:	bf00      	nop
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	080042fc 	.word	0x080042fc
 8000acc:	0800430c 	.word	0x0800430c
 8000ad0:	08004324 	.word	0x08004324
 8000ad4:	0800433c 	.word	0x0800433c
 8000ad8:	08004354 	.word	0x08004354

08000adc <B4>:
void B4(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	printf("B4, mode %d\n", mode);
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <B4+0x58>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <B4+0x5c>)
 8000ae8:	f002 fc96 	bl	8003418 <iprintf>
	switch(mode){
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <B4+0x58>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d81a      	bhi.n	8000b2c <B4+0x50>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <B4+0x20>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b25 	.word	0x08000b25
	case 1:
		printf("Action bouton 4 mode 1\n");
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <B4+0x60>)
 8000b0e:	f002 fce9 	bl	80034e4 <puts>
		break;
 8000b12:	e00c      	b.n	8000b2e <B4+0x52>
	case 2:
		printf("Action bouton 4 mode 2\n");
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <B4+0x64>)
 8000b16:	f002 fce5 	bl	80034e4 <puts>
		break;
 8000b1a:	e008      	b.n	8000b2e <B4+0x52>
	case 3:
		printf("Action bouton 4 mode 3\n");
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <B4+0x68>)
 8000b1e:	f002 fce1 	bl	80034e4 <puts>
		break;
 8000b22:	e004      	b.n	8000b2e <B4+0x52>
	case 4:
		printf("Action bouton 4 mode 4\n");
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <B4+0x6c>)
 8000b26:	f002 fcdd 	bl	80034e4 <puts>
		break;
 8000b2a:	e000      	b.n	8000b2e <B4+0x52>
	default:
		break;
 8000b2c:	bf00      	nop
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000
 8000b38:	0800436c 	.word	0x0800436c
 8000b3c:	0800437c 	.word	0x0800437c
 8000b40:	08004394 	.word	0x08004394
 8000b44:	080043ac 	.word	0x080043ac
 8000b48:	080043c4 	.word	0x080043c4

08000b4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b68:	6253      	str	r3, [r2, #36]	; 0x24
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6213      	str	r3, [r2, #32]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6253      	str	r3, [r2, #36]	; 0x24
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_MspInit+0x58>)
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <HAL_ADC_MspInit+0x74>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d123      	bne.n	8000c1e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be0:	6213      	str	r3, [r2, #32]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_ADC_MspInit+0x78>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = RV1_Pin|RV2_Pin;
 8000c06:	2303      	movs	r3, #3
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_ADC_MspInit+0x7c>)
 8000c1a:	f000 fdfd 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012400 	.word	0x40012400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0x7c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d127      	bne.n	8000ca6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c60:	6213      	str	r3, [r2, #32]
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8000c86:	23e0      	movs	r3, #224	; 0xe0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000ca2:	f000 fdb9 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12f      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6253      	str	r3, [r2, #36]	; 0x24
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <HAL_TIM_Base_MspInit+0x94>)
 8000d2a:	f000 fd75 	bl	8001818 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201d      	movs	r0, #29
 8000d34:	f000 fd39 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f000 fd52 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40000400 	.word	0x40000400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d11b      	bne.n	8000dae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MOT_Pin;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_TIM_MspPostInit+0x6c>)
 8000daa:	f000 fd35 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f929 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000e16:	2020      	movs	r0, #32
 8000e18:	f000 fea6 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000e1c:	2040      	movs	r0, #64	; 0x40
 8000e1e:	f000 fea3 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM3_IRQHandler+0x10>)
 8000e2e:	f001 fd45 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000134 	.word	0x20000134

08000e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e44:	f000 fe90 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000e48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e4c:	f000 fe8c 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTNCarte_Pin);
 8000e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e54:	f000 fe88 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fc0a 	bl	8003740 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20014000 	.word	0x20014000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000174 	.word	0x20000174
 8000f60:	200002c8 	.word	0x200002c8

08000f64 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f70:	f7ff fff8 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f8c:	4c09      	ldr	r4, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 fbd7 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fa93 	bl	80004c8 <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fac:	0800443c 	.word	0x0800443c
  ldr r2, =_sbss
 8000fb0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fb4:	200002c8 	.word	0x200002c8

08000fb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_IRQHandler>

08000fba <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fbe5 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fdbc 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d022      	beq.n	8001046 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_InitTick+0x6c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_InitTick+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800100c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001010:	fbb2 f3f3 	udiv	r3, r2, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fbf2 	bl	80017fe <HAL_SYSTICK_Config>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10f      	bne.n	8001040 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d809      	bhi.n	800103a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001026:	2200      	movs	r2, #0
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	f000 fbbc 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_InitTick+0x70>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e007      	b.n	800104a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e004      	b.n	800104a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e001      	b.n	800104a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000000c 	.word	0x2000000c
 8001058:	20000004 	.word	0x20000004
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4413      	add	r3, r2
 800106e:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x1c>)
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000178 	.word	0x20000178
 8001080:	2000000c 	.word	0x2000000c

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000178 	.word	0x20000178

08001098 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e127      	b.n	8001308 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d115      	bne.n	80010f2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b8e      	ldr	r3, [pc, #568]	; (8001310 <HAL_ADC_Init+0x278>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a8d      	ldr	r2, [pc, #564]	; (8001310 <HAL_ADC_Init+0x278>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <HAL_ADC_Init+0x278>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fd61 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 80ff 	bne.w	80012fe <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001114:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_ADC_Init+0x27c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	497c      	ldr	r1, [pc, #496]	; (8001314 <HAL_ADC_Init+0x27c>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800112e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001136:	4619      	mov	r1, r3
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001152:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001158:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800117a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800117c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117e:	4313      	orrs	r3, r2
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	2b10      	cmp	r3, #16
 8001188:	d007      	beq.n	800119a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001192:	4313      	orrs	r3, r2
 8001194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001196:	4313      	orrs	r3, r2
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a4:	2b40      	cmp	r3, #64	; 0x40
 80011a6:	d04f      	beq.n	8001248 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ae:	4313      	orrs	r3, r2
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011ba:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6912      	ldr	r2, [r2, #16]
 80011c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80011c4:	d003      	beq.n	80011ce <HAL_ADC_Init+0x136>
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6912      	ldr	r2, [r2, #16]
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d102      	bne.n	80011d4 <HAL_ADC_Init+0x13c>
 80011ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d2:	e000      	b.n	80011d6 <HAL_ADC_Init+0x13e>
 80011d4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80011d6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011da:	4313      	orrs	r3, r2
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d125      	bne.n	8001234 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d114      	bne.n	800121c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80011fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	fa92 f2a2 	rbit	r2, r2
 8001204:	617a      	str	r2, [r7, #20]
  return result;
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	4093      	lsls	r3, r2
 8001210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001216:	4313      	orrs	r3, r2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
 800121a:	e00b      	b.n	8001234 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f043 0220 	orr.w	r2, r3, #32
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_ADC_Init+0x280>)
 800123c:	4013      	ands	r3, r2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001244:	430b      	orrs	r3, r1
 8001246:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_ADC_Init+0x284>)
 8001250:	4013      	ands	r3, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001264:	d003      	beq.n	800126e <HAL_ADC_Init+0x1d6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d119      	bne.n	80012a2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	3b01      	subs	r3, #1
 800127e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001282:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	fa92 f2a2 	rbit	r2, r2
 800128a:	60fa      	str	r2, [r7, #12]
  return result;
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	fab2 f282 	clz	r2, r2
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	fa03 f202 	lsl.w	r2, r3, r2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
 80012a0:	e007      	b.n	80012b2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_ADC_Init+0x288>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10b      	bne.n	80012da <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d8:	e014      	b.n	8001304 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f023 0312 	bic.w	r3, r3, #18
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012fc:	e002      	b.n	8001304 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001308:	4618      	mov	r0, r3
 800130a:	3738      	adds	r7, #56	; 0x38
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40012700 	.word	0x40012700
 8001318:	fcfc16ff 	.word	0xfcfc16ff
 800131c:	c0fff189 	.word	0xc0fff189
 8001320:	bf80fffe 	.word	0xbf80fffe

08001324 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x20>
 8001340:	2302      	movs	r3, #2
 8001342:	e14f      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x2c0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b06      	cmp	r3, #6
 8001352:	d81c      	bhi.n	800138e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	221f      	movs	r2, #31
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4019      	ands	r1, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b05      	subs	r3, #5
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
 800138c:	e07e      	b.n	800148c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d81c      	bhi.n	80013d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3b23      	subs	r3, #35	; 0x23
 80013a8:	221f      	movs	r2, #31
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4019      	ands	r1, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b23      	subs	r3, #35	; 0x23
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013ce:	e05d      	b.n	800148c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d81c      	bhi.n	8001412 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b41      	subs	r3, #65	; 0x41
 80013ea:	221f      	movs	r2, #31
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4019      	ands	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b41      	subs	r3, #65	; 0x41
 8001404:	fa00 f203 	lsl.w	r2, r0, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
 8001410:	e03c      	b.n	800148c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b18      	cmp	r3, #24
 8001418:	d81c      	bhi.n	8001454 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b5f      	subs	r3, #95	; 0x5f
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	4019      	ands	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b5f      	subs	r3, #95	; 0x5f
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
 8001452:	e01b      	b.n	800148c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b7d      	subs	r3, #125	; 0x7d
 8001466:	221f      	movs	r2, #31
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	4019      	ands	r1, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b7d      	subs	r3, #125	; 0x7d
 8001480:	fa00 f203 	lsl.w	r2, r0, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b09      	cmp	r3, #9
 8001492:	d81a      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	2207      	movs	r2, #7
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4019      	ands	r1, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6898      	ldr	r0, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	e05d      	b.n	8001586 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b13      	cmp	r3, #19
 80014d0:	d81c      	bhi.n	800150c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6919      	ldr	r1, [r3, #16]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	2207      	movs	r2, #7
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4019      	ands	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6898      	ldr	r0, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	3b1e      	subs	r3, #30
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	e03c      	b.n	8001586 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b1d      	cmp	r3, #29
 8001512:	d81c      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d9      	ldr	r1, [r3, #12]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	3b3c      	subs	r3, #60	; 0x3c
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6898      	ldr	r0, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	3b3c      	subs	r3, #60	; 0x3c
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	e01b      	b.n	8001586 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b5a      	subs	r3, #90	; 0x5a
 8001560:	2207      	movs	r2, #7
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	4019      	ands	r1, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6898      	ldr	r0, [r3, #8]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3b5a      	subs	r3, #90	; 0x5a
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d003      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001592:	2b11      	cmp	r3, #17
 8001594:	d121      	bne.n	80015da <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11b      	bne.n	80015da <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_ADC_ConfigChannel+0x2cc>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_ADC_ConfigChannel+0x2cc>)
 80015a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ac:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d111      	bne.n	80015da <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_ADC_ConfigChannel+0x2d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_ADC_ConfigChannel+0x2d4>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	0c9a      	lsrs	r2, r3, #18
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f9      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40012700 	.word	0x40012700
 80015f4:	20000004 	.word	0x20000004
 80015f8:	431bde83 	.word	0x431bde83

080015fc <__NVIC_SetPriorityGrouping>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4906      	ldr	r1, [pc, #24]	; (8001694 <__NVIC_EnableIRQ+0x34>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <SysTick_Config>:
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff90 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff2d 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff42 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff90 	bl	80016ec <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5f 	bl	8001698 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff35 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800182e:	e160      	b.n	8001af2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8152 	beq.w	8001aec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d017      	beq.n	80018fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80ac 	beq.w	8001aec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_GPIO_Init+0x2f8>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <HAL_GPIO_Init+0x2f8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_GPIO_Init+0x2f8>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80019ac:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <HAL_GPIO_Init+0x2fc>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x300>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d025      	beq.n	8001a24 <HAL_GPIO_Init+0x20c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x304>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d01f      	beq.n	8001a20 <HAL_GPIO_Init+0x208>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x308>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d019      	beq.n	8001a1c <HAL_GPIO_Init+0x204>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x30c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d013      	beq.n	8001a18 <HAL_GPIO_Init+0x200>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x310>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00d      	beq.n	8001a14 <HAL_GPIO_Init+0x1fc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x314>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_Init+0x1f8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x318>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_GPIO_Init+0x1f4>
 8001a08:	2306      	movs	r3, #6
 8001a0a:	e00c      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	e00a      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a10:	2305      	movs	r3, #5
 8001a12:	e008      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a24:	2300      	movs	r3, #0
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_GPIO_Init+0x2fc>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a44:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a68:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f ae97 	bne.w	8001830 <HAL_GPIO_Init+0x18>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fe94 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e31d      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	4b94      	ldr	r3, [pc, #592]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb4:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d07b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d006      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b87      	ldr	r3, [pc, #540]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06a      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x128>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d166      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e2f7      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x74>
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7e      	ldr	r2, [pc, #504]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e02d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x96>
 8001c14:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a78      	ldr	r2, [pc, #480]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0xd0>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xb8>
 8001c36:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a70      	ldr	r2, [pc, #448]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6d      	ldr	r2, [pc, #436]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd0>
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a69      	ldr	r2, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa08 	bl	8001084 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fa04 	bl	8001084 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e2ad      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe0>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9f4 	bl	8001084 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f9f0 	bl	8001084 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e299      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb2:	4b52      	ldr	r3, [pc, #328]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x108>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d05a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d119      	bne.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d116      	bne.n	8001d0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x160>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e276      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	493d      	ldr	r1, [pc, #244]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0c:	e03a      	b.n	8001d84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d020      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9b2 	bl	8001084 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff f9ae 	bl	8001084 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e257      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	492a      	ldr	r1, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e015      	b.n	8001d84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f991 	bl	8001084 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff f98d 	bl	8001084 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e236      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b8 	beq.w	8001f02 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d170      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x218>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e21a      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d921      	bls.n	8001e04 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fc09 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e208      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	4901      	ldr	r1, [pc, #4]	; (8001dfc <HAL_RCC_OscConfig+0x264>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
 8001dfa:	e020      	b.n	8001e3e <HAL_RCC_OscConfig+0x2a6>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	4b99      	ldr	r3, [pc, #612]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4996      	ldr	r1, [pc, #600]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b95      	ldr	r3, [pc, #596]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	061b      	lsls	r3, r3, #24
 8001e24:	4991      	ldr	r1, [pc, #580]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fbd4 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1d3      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	0b5b      	lsrs	r3, r3, #13
 8001e44:	3301      	adds	r3, #1
 8001e46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	0912      	lsrs	r2, r2, #4
 8001e54:	f002 020f 	and.w	r2, r2, #15
 8001e58:	4985      	ldr	r1, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x4d8>)
 8001e5a:	5c8a      	ldrb	r2, [r1, r2]
 8001e5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e5e:	4a85      	ldr	r2, [pc, #532]	; (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e62:	4b85      	ldr	r3, [pc, #532]	; (8002078 <HAL_RCC_OscConfig+0x4e0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f8c0 	bl	8000fec <HAL_InitTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d045      	beq.n	8001f02 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	e1b5      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d029      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e82:	4b7e      	ldr	r3, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff f8fc 	bl	8001084 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e90:	f7ff f8f8 	bl	8001084 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1a1      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	496c      	ldr	r1, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4967      	ldr	r1, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ed6:	4b69      	ldr	r3, [pc, #420]	; (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f8d2 	bl	8001084 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f8ce 	bl	8001084 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e177      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d030      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f8b2 	bl	8001084 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff f8ae 	bl	8001084 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e157      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x38c>
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f89b 	bl	8001084 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff f897 	bl	8001084 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e140      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80b5 	beq.w	80020e8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	4a36      	ldr	r2, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6253      	str	r3, [r2, #36]	; 0x24
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a32      	ldr	r2, [pc, #200]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f85f 	bl	8001084 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff f85b 	bl	8001084 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e104      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x466>
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6353      	str	r3, [r2, #52]	; 0x34
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_OscConfig+0x4c2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x488>
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 800200c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002010:	6353      	str	r3, [r2, #52]	; 0x34
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800201c:	6353      	str	r3, [r2, #52]	; 0x34
 800201e:	e01c      	b.n	800205a <HAL_RCC_OscConfig+0x4c2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x4aa>
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	6353      	str	r3, [r2, #52]	; 0x34
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6353      	str	r3, [r2, #52]	; 0x34
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x4c2>
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204c:	6353      	str	r3, [r2, #52]	; 0x34
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x4d4>)
 8002054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002058:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff f80f 	bl	8001084 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002068:	e019      	b.n	800209e <HAL_RCC_OscConfig+0x506>
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	080043e8 	.word	0x080043e8
 8002074:	20000004 	.word	0x20000004
 8002078:	20000008 	.word	0x20000008
 800207c:	42470020 	.word	0x42470020
 8002080:	42470680 	.word	0x42470680
 8002084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7fe fffc 	bl	8001084 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e0a3      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0ee      	beq.n	8002088 <HAL_RCC_OscConfig+0x4f0>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7fe ffea 	bl	8001084 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe ffe6 	bl	8001084 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e08d      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ee      	bne.n	80020b4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80020e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d056      	beq.n	80021a4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d13b      	bne.n	8002176 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x65c>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe ffbe 	bl	8001084 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe ffba 	bl	8001084 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e063      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	4319      	orrs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	430b      	orrs	r3, r1
 8002142:	492b      	ldr	r1, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x65c>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe ff99 	bl	8001084 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe ff95 	bl	8001084 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e03e      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x5be>
 8002174:	e036      	b.n	80021e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_RCC_OscConfig+0x65c>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe ff82 	bl	8001084 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe ff7e 	bl	8001084 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e027      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x5ec>
 80021a2:	e01f      	b.n	80021e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_OscConfig+0x658>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470060 	.word	0x42470060

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e11a      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b8f      	ldr	r3, [pc, #572]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d919      	bls.n	800224e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_ClockConfig+0x34>
 8002220:	4b8a      	ldr	r3, [pc, #552]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a89      	ldr	r2, [pc, #548]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b87      	ldr	r3, [pc, #540]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0201 	bic.w	r2, r3, #1
 8002234:	4985      	ldr	r1, [pc, #532]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	4b83      	ldr	r3, [pc, #524]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0f9      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225a:	4b7d      	ldr	r3, [pc, #500]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	497a      	ldr	r1, [pc, #488]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 808e 	beq.w	8002396 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d121      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0d7      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0cb      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0bf      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0b7      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	495c      	ldr	r1, [pc, #368]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7fe fece 	bl	8001084 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7fe fec6 	bl	8001084 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e09b      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xfc>
 8002316:	e03e      	b.n	8002396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d112      	bne.n	8002346 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002322:	f7fe feaf 	bl	8001084 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e084      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b45      	ldr	r3, [pc, #276]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_ClockConfig+0x12a>
 8002344:	e027      	b.n	8002396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d11d      	bne.n	800238a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe fe98 	bl	8001084 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e06d      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d1ee      	bne.n	8002350 <HAL_RCC_ClockConfig+0x158>
 8002372:	e010      	b.n	8002396 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe fe86 	bl	8001084 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e05b      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ee      	bne.n	8002374 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d219      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1be>
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	4923      	ldr	r1, [pc, #140]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_ClockConfig+0x254>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e034      	b.n	8002442 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4917      	ldr	r1, [pc, #92]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490f      	ldr	r1, [pc, #60]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f823 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCC_ClockConfig+0x258>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490b      	ldr	r1, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x25c>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x260>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCC_ClockConfig+0x264>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fdd8 	bl	8000fec <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002440:	7afb      	ldrb	r3, [r7, #11]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00
 8002450:	40023800 	.word	0x40023800
 8002454:	080043e8 	.word	0x080043e8
 8002458:	20000004 	.word	0x20000004
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b08e      	sub	sp, #56	; 0x38
 8002466:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002468:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_RCC_GetSysClockFreq+0x16c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d00d      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 8002478:	2b0c      	cmp	r3, #12
 800247a:	f200 8092 	bhi.w	80025a2 <HAL_RCC_GetSysClockFreq+0x142>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x28>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x2e>
 8002486:	e08c      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x170>)
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800248c:	e097      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x174>)
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002492:	e094      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x178>)
 800249e:	5c9b      	ldrb	r3, [r3, r2]
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	0d9b      	lsrs	r3, r3, #22
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_GetSysClockFreq+0x16c>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d021      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	2200      	movs	r2, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	61fa      	str	r2, [r7, #28]
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x174>)
 80024c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80024c8:	464a      	mov	r2, r9
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	2300      	movs	r3, #0
 80024d0:	4644      	mov	r4, r8
 80024d2:	fb04 f303 	mul.w	r3, r4, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	4a3e      	ldr	r2, [pc, #248]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x174>)
 80024da:	4644      	mov	r4, r8
 80024dc:	fba4 0102 	umull	r0, r1, r4, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	4619      	mov	r1, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2200      	movs	r2, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	617a      	str	r2, [r7, #20]
 80024ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024f0:	f7fd fe44 	bl	800017c <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
 80024fc:	e04e      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	2200      	movs	r2, #0
 8002502:	469a      	mov	sl, r3
 8002504:	4693      	mov	fp, r2
 8002506:	4652      	mov	r2, sl
 8002508:	465b      	mov	r3, fp
 800250a:	f04f 0000 	mov.w	r0, #0
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002518:	0150      	lsls	r0, r2, #5
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	ebb2 080a 	subs.w	r8, r2, sl
 8002522:	eb63 090b 	sbc.w	r9, r3, fp
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800253a:	ebb2 0408 	subs.w	r4, r2, r8
 800253e:	eb63 0509 	sbc.w	r5, r3, r9
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	00eb      	lsls	r3, r5, #3
 800254c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002550:	00e2      	lsls	r2, r4, #3
 8002552:	4614      	mov	r4, r2
 8002554:	461d      	mov	r5, r3
 8002556:	eb14 030a 	adds.w	r3, r4, sl
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	eb45 030b 	adc.w	r3, r5, fp
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800256e:	4629      	mov	r1, r5
 8002570:	028b      	lsls	r3, r1, #10
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	4604      	mov	r4, r0
 8002578:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800257c:	4601      	mov	r1, r0
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	f7fd fdf4 	bl	800017c <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025a0:	e00d      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_GetSysClockFreq+0x16c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0b5b      	lsrs	r3, r3, #13
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	3301      	adds	r3, #1
 80025b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	; 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	016e3600 	.word	0x016e3600
 80025d8:	080043dc 	.word	0x080043dc

080025dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12c      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e016      	b.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6253      	str	r3, [r2, #36]	; 0x24
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800262c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	4a17      	ldr	r2, [pc, #92]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002640:	d105      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002648:	d101      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800264a:	2301      	movs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 0201 	bic.w	r2, r3, #1
 8002668:	490b      	ldr	r1, [pc, #44]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	40023c00 	.word	0x40023c00

0800269c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07b      	b.n	80027a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026be:	d009      	beq.n	80026d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
 80026c6:	e005      	b.n	80026d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe faa0 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	ea42 0103 	orr.w	r1, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0104 	and.w	r1, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0210 	and.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e031      	b.n	8002824 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fe fa71 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f000 faf7 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e031      	b.n	80028a2 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f829 	bl	80028aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fab8 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa53 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa46 	bl	8002d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa55 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa29 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa1c 	bl	8002d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fa2b 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9ff 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f9f2 	bl	8002d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa01 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9d5 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9c8 	bl	8002d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f9d7 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9a3 	bl	8002d86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9b1 	bl	8002dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0ae      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	f200 809f 	bhi.w	8002be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002be1 	.word	0x08002be1
 8002ab0:	08002be1 	.word	0x08002be1
 8002ab4:	08002be1 	.word	0x08002be1
 8002ab8:	08002b1d 	.word	0x08002b1d
 8002abc:	08002be1 	.word	0x08002be1
 8002ac0:	08002be1 	.word	0x08002be1
 8002ac4:	08002be1 	.word	0x08002be1
 8002ac8:	08002b5f 	.word	0x08002b5f
 8002acc:	08002be1 	.word	0x08002be1
 8002ad0:	08002be1 	.word	0x08002be1
 8002ad4:	08002be1 	.word	0x08002be1
 8002ad8:	08002b9f 	.word	0x08002b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f9ec 	bl	8002ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6999      	ldr	r1, [r3, #24]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	619a      	str	r2, [r3, #24]
      break;
 8002b1a:	e064      	b.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa08 	bl	8002f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	619a      	str	r2, [r3, #24]
      break;
 8002b5c:	e043      	b.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa25 	bl	8002fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0208 	orr.w	r2, r2, #8
 8002b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0204 	bic.w	r2, r2, #4
 8002b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69d9      	ldr	r1, [r3, #28]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
      break;
 8002b9c:	e023      	b.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fa42 	bl	800302e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69d9      	ldr	r1, [r3, #28]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	61da      	str	r2, [r3, #28]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
      break;
 8002be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIM_ConfigClockSource+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0b4      	b.n	8002d7e <HAL_TIM_ConfigClockSource+0x186>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d03e      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0xd4>
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	f200 8087 	bhi.w	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	f000 8086 	beq.w	8002d6a <HAL_TIM_ConfigClockSource+0x172>
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d87f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d01a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xa6>
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d87b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d050      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x11a>
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d877      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d03c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c78:	2b50      	cmp	r3, #80	; 0x50
 8002c7a:	d873      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d058      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x13a>
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d86f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d064      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	2b30      	cmp	r3, #48	; 0x30
 8002c8a:	d86b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d060      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d867      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05c      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d05a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	e062      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	f000 fa73 	bl	8003198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
      break;
 8002cca:	e04f      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	f000 fa5c 	bl	8003198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cee:	609a      	str	r2, [r3, #8]
      break;
 8002cf0:	e03c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 f9d3 	bl	80030aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2150      	movs	r1, #80	; 0x50
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fa2a 	bl	8003164 <TIM_ITRx_SetConfig>
      break;
 8002d10:	e02c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 f9f1 	bl	8003106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2160      	movs	r1, #96	; 0x60
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fa1a 	bl	8003164 <TIM_ITRx_SetConfig>
      break;
 8002d30:	e01c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 f9b3 	bl	80030aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2140      	movs	r1, #64	; 0x40
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fa0a 	bl	8003164 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e00c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 fa01 	bl	8003164 <TIM_ITRx_SetConfig>
      break;
 8002d62:	e003      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e000      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <TIM_Base_SetConfig+0xc8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <TIM_Base_SetConfig+0xcc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <TIM_Base_SetConfig+0xd0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x38>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_Base_SetConfig+0xd4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d017      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <TIM_Base_SetConfig+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <TIM_Base_SetConfig+0xcc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00f      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <TIM_Base_SetConfig+0xd0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <TIM_Base_SetConfig+0xd4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <TIM_Base_SetConfig+0xd8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_Base_SetConfig+0x82>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <TIM_Base_SetConfig+0xdc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	40010c00 	.word	0x40010c00
 8002ebc:	40011000 	.word	0x40011000

08002ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 0201 	bic.w	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 0302 	bic.w	r3, r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0320 	bic.w	r3, r3, #32
 8002f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800302e:	b480      	push	{r7}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003064:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f023 0201 	bic.w	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 030a 	bic.w	r3, r3, #10
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f023 0210 	bic.w	r2, r3, #16
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	f043 0307 	orr.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	021a      	lsls	r2, r3, #8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e046      	b.n	800327e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d00e      	beq.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a10      	ldr	r2, [pc, #64]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10c      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4313      	orrs	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40010800 	.word	0x40010800

08003294 <std>:
 8003294:	2300      	movs	r3, #0
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	e9c0 3300 	strd	r3, r3, [r0]
 800329e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032a2:	6083      	str	r3, [r0, #8]
 80032a4:	8181      	strh	r1, [r0, #12]
 80032a6:	6643      	str	r3, [r0, #100]	; 0x64
 80032a8:	81c2      	strh	r2, [r0, #14]
 80032aa:	6183      	str	r3, [r0, #24]
 80032ac:	4619      	mov	r1, r3
 80032ae:	2208      	movs	r2, #8
 80032b0:	305c      	adds	r0, #92	; 0x5c
 80032b2:	f000 f9f7 	bl	80036a4 <memset>
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <std+0x58>)
 80032b8:	6224      	str	r4, [r4, #32]
 80032ba:	6263      	str	r3, [r4, #36]	; 0x24
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <std+0x5c>)
 80032be:	62a3      	str	r3, [r4, #40]	; 0x28
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <std+0x60>)
 80032c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <std+0x64>)
 80032c6:	6323      	str	r3, [r4, #48]	; 0x30
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <std+0x68>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d006      	beq.n	80032dc <std+0x48>
 80032ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80032d2:	4294      	cmp	r4, r2
 80032d4:	d002      	beq.n	80032dc <std+0x48>
 80032d6:	33d0      	adds	r3, #208	; 0xd0
 80032d8:	429c      	cmp	r4, r3
 80032da:	d105      	bne.n	80032e8 <std+0x54>
 80032dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e4:	f000 ba56 	b.w	8003794 <__retarget_lock_init_recursive>
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	bf00      	nop
 80032ec:	080034f5 	.word	0x080034f5
 80032f0:	08003517 	.word	0x08003517
 80032f4:	0800354f 	.word	0x0800354f
 80032f8:	08003573 	.word	0x08003573
 80032fc:	2000017c 	.word	0x2000017c

08003300 <stdio_exit_handler>:
 8003300:	4a02      	ldr	r2, [pc, #8]	; (800330c <stdio_exit_handler+0xc>)
 8003302:	4903      	ldr	r1, [pc, #12]	; (8003310 <stdio_exit_handler+0x10>)
 8003304:	4803      	ldr	r0, [pc, #12]	; (8003314 <stdio_exit_handler+0x14>)
 8003306:	f000 b869 	b.w	80033dc <_fwalk_sglue>
 800330a:	bf00      	nop
 800330c:	20000010 	.word	0x20000010
 8003310:	08004035 	.word	0x08004035
 8003314:	2000001c 	.word	0x2000001c

08003318 <cleanup_stdio>:
 8003318:	6841      	ldr	r1, [r0, #4]
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <cleanup_stdio+0x34>)
 800331c:	b510      	push	{r4, lr}
 800331e:	4299      	cmp	r1, r3
 8003320:	4604      	mov	r4, r0
 8003322:	d001      	beq.n	8003328 <cleanup_stdio+0x10>
 8003324:	f000 fe86 	bl	8004034 <_fflush_r>
 8003328:	68a1      	ldr	r1, [r4, #8]
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <cleanup_stdio+0x38>)
 800332c:	4299      	cmp	r1, r3
 800332e:	d002      	beq.n	8003336 <cleanup_stdio+0x1e>
 8003330:	4620      	mov	r0, r4
 8003332:	f000 fe7f 	bl	8004034 <_fflush_r>
 8003336:	68e1      	ldr	r1, [r4, #12]
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <cleanup_stdio+0x3c>)
 800333a:	4299      	cmp	r1, r3
 800333c:	d004      	beq.n	8003348 <cleanup_stdio+0x30>
 800333e:	4620      	mov	r0, r4
 8003340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003344:	f000 be76 	b.w	8004034 <_fflush_r>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	bf00      	nop
 800334c:	2000017c 	.word	0x2000017c
 8003350:	200001e4 	.word	0x200001e4
 8003354:	2000024c 	.word	0x2000024c

08003358 <global_stdio_init.part.0>:
 8003358:	b510      	push	{r4, lr}
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <global_stdio_init.part.0+0x30>)
 800335c:	4c0b      	ldr	r4, [pc, #44]	; (800338c <global_stdio_init.part.0+0x34>)
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <global_stdio_init.part.0+0x38>)
 8003360:	4620      	mov	r0, r4
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	2104      	movs	r1, #4
 8003366:	2200      	movs	r2, #0
 8003368:	f7ff ff94 	bl	8003294 <std>
 800336c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003370:	2201      	movs	r2, #1
 8003372:	2109      	movs	r1, #9
 8003374:	f7ff ff8e 	bl	8003294 <std>
 8003378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800337c:	2202      	movs	r2, #2
 800337e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003382:	2112      	movs	r1, #18
 8003384:	f7ff bf86 	b.w	8003294 <std>
 8003388:	200002b4 	.word	0x200002b4
 800338c:	2000017c 	.word	0x2000017c
 8003390:	08003301 	.word	0x08003301

08003394 <__sfp_lock_acquire>:
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <__sfp_lock_acquire+0x8>)
 8003396:	f000 b9fe 	b.w	8003796 <__retarget_lock_acquire_recursive>
 800339a:	bf00      	nop
 800339c:	200002bd 	.word	0x200002bd

080033a0 <__sfp_lock_release>:
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <__sfp_lock_release+0x8>)
 80033a2:	f000 b9f9 	b.w	8003798 <__retarget_lock_release_recursive>
 80033a6:	bf00      	nop
 80033a8:	200002bd 	.word	0x200002bd

080033ac <__sinit>:
 80033ac:	b510      	push	{r4, lr}
 80033ae:	4604      	mov	r4, r0
 80033b0:	f7ff fff0 	bl	8003394 <__sfp_lock_acquire>
 80033b4:	6a23      	ldr	r3, [r4, #32]
 80033b6:	b11b      	cbz	r3, 80033c0 <__sinit+0x14>
 80033b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033bc:	f7ff bff0 	b.w	80033a0 <__sfp_lock_release>
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__sinit+0x28>)
 80033c2:	6223      	str	r3, [r4, #32]
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__sinit+0x2c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f5      	bne.n	80033b8 <__sinit+0xc>
 80033cc:	f7ff ffc4 	bl	8003358 <global_stdio_init.part.0>
 80033d0:	e7f2      	b.n	80033b8 <__sinit+0xc>
 80033d2:	bf00      	nop
 80033d4:	08003319 	.word	0x08003319
 80033d8:	200002b4 	.word	0x200002b4

080033dc <_fwalk_sglue>:
 80033dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e0:	4607      	mov	r7, r0
 80033e2:	4688      	mov	r8, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	2600      	movs	r6, #0
 80033e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ec:	f1b9 0901 	subs.w	r9, r9, #1
 80033f0:	d505      	bpl.n	80033fe <_fwalk_sglue+0x22>
 80033f2:	6824      	ldr	r4, [r4, #0]
 80033f4:	2c00      	cmp	r4, #0
 80033f6:	d1f7      	bne.n	80033e8 <_fwalk_sglue+0xc>
 80033f8:	4630      	mov	r0, r6
 80033fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fe:	89ab      	ldrh	r3, [r5, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d907      	bls.n	8003414 <_fwalk_sglue+0x38>
 8003404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003408:	3301      	adds	r3, #1
 800340a:	d003      	beq.n	8003414 <_fwalk_sglue+0x38>
 800340c:	4629      	mov	r1, r5
 800340e:	4638      	mov	r0, r7
 8003410:	47c0      	blx	r8
 8003412:	4306      	orrs	r6, r0
 8003414:	3568      	adds	r5, #104	; 0x68
 8003416:	e7e9      	b.n	80033ec <_fwalk_sglue+0x10>

08003418 <iprintf>:
 8003418:	b40f      	push	{r0, r1, r2, r3}
 800341a:	b507      	push	{r0, r1, r2, lr}
 800341c:	4906      	ldr	r1, [pc, #24]	; (8003438 <iprintf+0x20>)
 800341e:	ab04      	add	r3, sp, #16
 8003420:	6808      	ldr	r0, [r1, #0]
 8003422:	f853 2b04 	ldr.w	r2, [r3], #4
 8003426:	6881      	ldr	r1, [r0, #8]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	f000 fad3 	bl	80039d4 <_vfiprintf_r>
 800342e:	b003      	add	sp, #12
 8003430:	f85d eb04 	ldr.w	lr, [sp], #4
 8003434:	b004      	add	sp, #16
 8003436:	4770      	bx	lr
 8003438:	20000068 	.word	0x20000068

0800343c <_puts_r>:
 800343c:	6a03      	ldr	r3, [r0, #32]
 800343e:	b570      	push	{r4, r5, r6, lr}
 8003440:	4605      	mov	r5, r0
 8003442:	460e      	mov	r6, r1
 8003444:	6884      	ldr	r4, [r0, #8]
 8003446:	b90b      	cbnz	r3, 800344c <_puts_r+0x10>
 8003448:	f7ff ffb0 	bl	80033ac <__sinit>
 800344c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800344e:	07db      	lsls	r3, r3, #31
 8003450:	d405      	bmi.n	800345e <_puts_r+0x22>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	0598      	lsls	r0, r3, #22
 8003456:	d402      	bmi.n	800345e <_puts_r+0x22>
 8003458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345a:	f000 f99c 	bl	8003796 <__retarget_lock_acquire_recursive>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	0719      	lsls	r1, r3, #28
 8003462:	d513      	bpl.n	800348c <_puts_r+0x50>
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	b18b      	cbz	r3, 800348c <_puts_r+0x50>
 8003468:	3e01      	subs	r6, #1
 800346a:	68a3      	ldr	r3, [r4, #8]
 800346c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003470:	3b01      	subs	r3, #1
 8003472:	60a3      	str	r3, [r4, #8]
 8003474:	b9e9      	cbnz	r1, 80034b2 <_puts_r+0x76>
 8003476:	2b00      	cmp	r3, #0
 8003478:	da2e      	bge.n	80034d8 <_puts_r+0x9c>
 800347a:	4622      	mov	r2, r4
 800347c:	210a      	movs	r1, #10
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f87b 	bl	800357a <__swbuf_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d007      	beq.n	8003498 <_puts_r+0x5c>
 8003488:	250a      	movs	r5, #10
 800348a:	e007      	b.n	800349c <_puts_r+0x60>
 800348c:	4621      	mov	r1, r4
 800348e:	4628      	mov	r0, r5
 8003490:	f000 f8b0 	bl	80035f4 <__swsetup_r>
 8003494:	2800      	cmp	r0, #0
 8003496:	d0e7      	beq.n	8003468 <_puts_r+0x2c>
 8003498:	f04f 35ff 	mov.w	r5, #4294967295
 800349c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800349e:	07da      	lsls	r2, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_puts_r+0x72>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_puts_r+0x72>
 80034a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034aa:	f000 f975 	bl	8003798 <__retarget_lock_release_recursive>
 80034ae:	4628      	mov	r0, r5
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da04      	bge.n	80034c0 <_puts_r+0x84>
 80034b6:	69a2      	ldr	r2, [r4, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dc06      	bgt.n	80034ca <_puts_r+0x8e>
 80034bc:	290a      	cmp	r1, #10
 80034be:	d004      	beq.n	80034ca <_puts_r+0x8e>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	7019      	strb	r1, [r3, #0]
 80034c8:	e7cf      	b.n	800346a <_puts_r+0x2e>
 80034ca:	4622      	mov	r2, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 f854 	bl	800357a <__swbuf_r>
 80034d2:	3001      	adds	r0, #1
 80034d4:	d1c9      	bne.n	800346a <_puts_r+0x2e>
 80034d6:	e7df      	b.n	8003498 <_puts_r+0x5c>
 80034d8:	250a      	movs	r5, #10
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	701d      	strb	r5, [r3, #0]
 80034e2:	e7db      	b.n	800349c <_puts_r+0x60>

080034e4 <puts>:
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <puts+0xc>)
 80034e6:	4601      	mov	r1, r0
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	f7ff bfa7 	b.w	800343c <_puts_r>
 80034ee:	bf00      	nop
 80034f0:	20000068 	.word	0x20000068

080034f4 <__sread>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	f000 f8fc 	bl	80036f8 <_read_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	bfab      	itete	ge
 8003504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003506:	89a3      	ldrhlt	r3, [r4, #12]
 8003508:	181b      	addge	r3, r3, r0
 800350a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800350e:	bfac      	ite	ge
 8003510:	6563      	strge	r3, [r4, #84]	; 0x54
 8003512:	81a3      	strhlt	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__swrite>:
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	461f      	mov	r7, r3
 800351c:	898b      	ldrh	r3, [r1, #12]
 800351e:	4605      	mov	r5, r0
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d505      	bpl.n	8003534 <__swrite+0x1e>
 8003528:	2302      	movs	r3, #2
 800352a:	2200      	movs	r2, #0
 800352c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003530:	f000 f8d0 	bl	80036d4 <_lseek_r>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	4632      	mov	r2, r6
 8003538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	4628      	mov	r0, r5
 8003540:	463b      	mov	r3, r7
 8003542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	f000 b8e7 	b.w	800371c <_write_r>

0800354e <__sseek>:
 800354e:	b510      	push	{r4, lr}
 8003550:	460c      	mov	r4, r1
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 f8bd 	bl	80036d4 <_lseek_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	bf15      	itete	ne
 8003560:	6560      	strne	r0, [r4, #84]	; 0x54
 8003562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800356a:	81a3      	strheq	r3, [r4, #12]
 800356c:	bf18      	it	ne
 800356e:	81a3      	strhne	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__sclose>:
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 b89d 	b.w	80036b4 <_close_r>

0800357a <__swbuf_r>:
 800357a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357c:	460e      	mov	r6, r1
 800357e:	4614      	mov	r4, r2
 8003580:	4605      	mov	r5, r0
 8003582:	b118      	cbz	r0, 800358c <__swbuf_r+0x12>
 8003584:	6a03      	ldr	r3, [r0, #32]
 8003586:	b90b      	cbnz	r3, 800358c <__swbuf_r+0x12>
 8003588:	f7ff ff10 	bl	80033ac <__sinit>
 800358c:	69a3      	ldr	r3, [r4, #24]
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	071a      	lsls	r2, r3, #28
 8003594:	d525      	bpl.n	80035e2 <__swbuf_r+0x68>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	b31b      	cbz	r3, 80035e2 <__swbuf_r+0x68>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	b2f6      	uxtb	r6, r6
 80035a0:	1a98      	subs	r0, r3, r2
 80035a2:	6963      	ldr	r3, [r4, #20]
 80035a4:	4637      	mov	r7, r6
 80035a6:	4283      	cmp	r3, r0
 80035a8:	dc04      	bgt.n	80035b4 <__swbuf_r+0x3a>
 80035aa:	4621      	mov	r1, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	f000 fd41 	bl	8004034 <_fflush_r>
 80035b2:	b9e0      	cbnz	r0, 80035ee <__swbuf_r+0x74>
 80035b4:	68a3      	ldr	r3, [r4, #8]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60a3      	str	r3, [r4, #8]
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	701e      	strb	r6, [r3, #0]
 80035c2:	6962      	ldr	r2, [r4, #20]
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d004      	beq.n	80035d4 <__swbuf_r+0x5a>
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	07db      	lsls	r3, r3, #31
 80035ce:	d506      	bpl.n	80035de <__swbuf_r+0x64>
 80035d0:	2e0a      	cmp	r6, #10
 80035d2:	d104      	bne.n	80035de <__swbuf_r+0x64>
 80035d4:	4621      	mov	r1, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 fd2c 	bl	8004034 <_fflush_r>
 80035dc:	b938      	cbnz	r0, 80035ee <__swbuf_r+0x74>
 80035de:	4638      	mov	r0, r7
 80035e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f805 	bl	80035f4 <__swsetup_r>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d0d5      	beq.n	800359a <__swbuf_r+0x20>
 80035ee:	f04f 37ff 	mov.w	r7, #4294967295
 80035f2:	e7f4      	b.n	80035de <__swbuf_r+0x64>

080035f4 <__swsetup_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <__swsetup_r+0xac>)
 80035f8:	4605      	mov	r5, r0
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	460c      	mov	r4, r1
 80035fe:	b118      	cbz	r0, 8003608 <__swsetup_r+0x14>
 8003600:	6a03      	ldr	r3, [r0, #32]
 8003602:	b90b      	cbnz	r3, 8003608 <__swsetup_r+0x14>
 8003604:	f7ff fed2 	bl	80033ac <__sinit>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800360e:	0718      	lsls	r0, r3, #28
 8003610:	d422      	bmi.n	8003658 <__swsetup_r+0x64>
 8003612:	06d9      	lsls	r1, r3, #27
 8003614:	d407      	bmi.n	8003626 <__swsetup_r+0x32>
 8003616:	2309      	movs	r3, #9
 8003618:	602b      	str	r3, [r5, #0]
 800361a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	e034      	b.n	8003690 <__swsetup_r+0x9c>
 8003626:	0758      	lsls	r0, r3, #29
 8003628:	d512      	bpl.n	8003650 <__swsetup_r+0x5c>
 800362a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800362c:	b141      	cbz	r1, 8003640 <__swsetup_r+0x4c>
 800362e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003632:	4299      	cmp	r1, r3
 8003634:	d002      	beq.n	800363c <__swsetup_r+0x48>
 8003636:	4628      	mov	r0, r5
 8003638:	f000 f8b0 	bl	800379c <_free_r>
 800363c:	2300      	movs	r3, #0
 800363e:	6363      	str	r3, [r4, #52]	; 0x34
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	2300      	movs	r3, #0
 800364a:	6063      	str	r3, [r4, #4]
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	b94b      	cbnz	r3, 8003670 <__swsetup_r+0x7c>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003666:	d003      	beq.n	8003670 <__swsetup_r+0x7c>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f000 fd2f 	bl	80040ce <__smakebuf_r>
 8003670:	89a0      	ldrh	r0, [r4, #12]
 8003672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003676:	f010 0301 	ands.w	r3, r0, #1
 800367a:	d00a      	beq.n	8003692 <__swsetup_r+0x9e>
 800367c:	2300      	movs	r3, #0
 800367e:	60a3      	str	r3, [r4, #8]
 8003680:	6963      	ldr	r3, [r4, #20]
 8003682:	425b      	negs	r3, r3
 8003684:	61a3      	str	r3, [r4, #24]
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	b943      	cbnz	r3, 800369c <__swsetup_r+0xa8>
 800368a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800368e:	d1c4      	bne.n	800361a <__swsetup_r+0x26>
 8003690:	bd38      	pop	{r3, r4, r5, pc}
 8003692:	0781      	lsls	r1, r0, #30
 8003694:	bf58      	it	pl
 8003696:	6963      	ldrpl	r3, [r4, #20]
 8003698:	60a3      	str	r3, [r4, #8]
 800369a:	e7f4      	b.n	8003686 <__swsetup_r+0x92>
 800369c:	2000      	movs	r0, #0
 800369e:	e7f7      	b.n	8003690 <__swsetup_r+0x9c>
 80036a0:	20000068 	.word	0x20000068

080036a4 <memset>:
 80036a4:	4603      	mov	r3, r0
 80036a6:	4402      	add	r2, r0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	f803 1b01 	strb.w	r1, [r3], #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <_close_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	2300      	movs	r3, #0
 80036b8:	4d05      	ldr	r5, [pc, #20]	; (80036d0 <_close_r+0x1c>)
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd fbe9 	bl	8000e96 <_close>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_close_r+0x1a>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_close_r+0x1a>
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	200002b8 	.word	0x200002b8

080036d4 <_lseek_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	2200      	movs	r2, #0
 80036de:	4d05      	ldr	r5, [pc, #20]	; (80036f4 <_lseek_r+0x20>)
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fbfb 	bl	8000ede <_lseek>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_lseek_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_lseek_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	200002b8 	.word	0x200002b8

080036f8 <_read_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	2200      	movs	r2, #0
 8003702:	4d05      	ldr	r5, [pc, #20]	; (8003718 <_read_r+0x20>)
 8003704:	602a      	str	r2, [r5, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7fd fba8 	bl	8000e5c <_read>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_read_r+0x1e>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_read_r+0x1e>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	200002b8 	.word	0x200002b8

0800371c <_write_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	2200      	movs	r2, #0
 8003726:	4d05      	ldr	r5, [pc, #20]	; (800373c <_write_r+0x20>)
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fd f8a6 	bl	800087c <_write>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_write_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_write_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200002b8 	.word	0x200002b8

08003740 <__errno>:
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <__errno+0x8>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000068 	.word	0x20000068

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	2600      	movs	r6, #0
 8003750:	4d0c      	ldr	r5, [pc, #48]	; (8003784 <__libc_init_array+0x38>)
 8003752:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003754:	1b64      	subs	r4, r4, r5
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	f000 fd34 	bl	80041c8 <_init>
 8003760:	2600      	movs	r6, #0
 8003762:	4d0a      	ldr	r5, [pc, #40]	; (800378c <__libc_init_array+0x40>)
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <__libc_init_array+0x44>)
 8003766:	1b64      	subs	r4, r4, r5
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08004434 	.word	0x08004434
 8003788:	08004434 	.word	0x08004434
 800378c:	08004434 	.word	0x08004434
 8003790:	08004438 	.word	0x08004438

08003794 <__retarget_lock_init_recursive>:
 8003794:	4770      	bx	lr

08003796 <__retarget_lock_acquire_recursive>:
 8003796:	4770      	bx	lr

08003798 <__retarget_lock_release_recursive>:
 8003798:	4770      	bx	lr
	...

0800379c <_free_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4605      	mov	r5, r0
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d040      	beq.n	8003826 <_free_r+0x8a>
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f0c      	subs	r4, r1, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfb8      	it	lt
 80037ae:	18e4      	addlt	r4, r4, r3
 80037b0:	f000 f8dc 	bl	800396c <__malloc_lock>
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <_free_r+0x8c>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	b933      	cbnz	r3, 80037c8 <_free_r+0x2c>
 80037ba:	6063      	str	r3, [r4, #4]
 80037bc:	6014      	str	r4, [r2, #0]
 80037be:	4628      	mov	r0, r5
 80037c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c4:	f000 b8d8 	b.w	8003978 <__malloc_unlock>
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	d908      	bls.n	80037de <_free_r+0x42>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428b      	cmp	r3, r1
 80037d2:	bf01      	itttt	eq
 80037d4:	6819      	ldreq	r1, [r3, #0]
 80037d6:	685b      	ldreq	r3, [r3, #4]
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	e7ed      	b.n	80037ba <_free_r+0x1e>
 80037de:	461a      	mov	r2, r3
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b10b      	cbz	r3, 80037e8 <_free_r+0x4c>
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d9fa      	bls.n	80037de <_free_r+0x42>
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	1850      	adds	r0, r2, r1
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d10b      	bne.n	8003808 <_free_r+0x6c>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	4401      	add	r1, r0
 80037f4:	1850      	adds	r0, r2, r1
 80037f6:	4283      	cmp	r3, r0
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	d1e0      	bne.n	80037be <_free_r+0x22>
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4408      	add	r0, r1
 8003802:	6010      	str	r0, [r2, #0]
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	e7da      	b.n	80037be <_free_r+0x22>
 8003808:	d902      	bls.n	8003810 <_free_r+0x74>
 800380a:	230c      	movs	r3, #12
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	e7d6      	b.n	80037be <_free_r+0x22>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	1821      	adds	r1, r4, r0
 8003814:	428b      	cmp	r3, r1
 8003816:	bf01      	itttt	eq
 8003818:	6819      	ldreq	r1, [r3, #0]
 800381a:	685b      	ldreq	r3, [r3, #4]
 800381c:	1809      	addeq	r1, r1, r0
 800381e:	6021      	streq	r1, [r4, #0]
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	6054      	str	r4, [r2, #4]
 8003824:	e7cb      	b.n	80037be <_free_r+0x22>
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	200002c0 	.word	0x200002c0

0800382c <sbrk_aligned>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4e0e      	ldr	r6, [pc, #56]	; (8003868 <sbrk_aligned+0x3c>)
 8003830:	460c      	mov	r4, r1
 8003832:	6831      	ldr	r1, [r6, #0]
 8003834:	4605      	mov	r5, r0
 8003836:	b911      	cbnz	r1, 800383e <sbrk_aligned+0x12>
 8003838:	f000 fca8 	bl	800418c <_sbrk_r>
 800383c:	6030      	str	r0, [r6, #0]
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 fca3 	bl	800418c <_sbrk_r>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d00a      	beq.n	8003860 <sbrk_aligned+0x34>
 800384a:	1cc4      	adds	r4, r0, #3
 800384c:	f024 0403 	bic.w	r4, r4, #3
 8003850:	42a0      	cmp	r0, r4
 8003852:	d007      	beq.n	8003864 <sbrk_aligned+0x38>
 8003854:	1a21      	subs	r1, r4, r0
 8003856:	4628      	mov	r0, r5
 8003858:	f000 fc98 	bl	800418c <_sbrk_r>
 800385c:	3001      	adds	r0, #1
 800385e:	d101      	bne.n	8003864 <sbrk_aligned+0x38>
 8003860:	f04f 34ff 	mov.w	r4, #4294967295
 8003864:	4620      	mov	r0, r4
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	200002c4 	.word	0x200002c4

0800386c <_malloc_r>:
 800386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003870:	1ccd      	adds	r5, r1, #3
 8003872:	f025 0503 	bic.w	r5, r5, #3
 8003876:	3508      	adds	r5, #8
 8003878:	2d0c      	cmp	r5, #12
 800387a:	bf38      	it	cc
 800387c:	250c      	movcc	r5, #12
 800387e:	2d00      	cmp	r5, #0
 8003880:	4607      	mov	r7, r0
 8003882:	db01      	blt.n	8003888 <_malloc_r+0x1c>
 8003884:	42a9      	cmp	r1, r5
 8003886:	d905      	bls.n	8003894 <_malloc_r+0x28>
 8003888:	230c      	movs	r3, #12
 800388a:	2600      	movs	r6, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003894:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003968 <_malloc_r+0xfc>
 8003898:	f000 f868 	bl	800396c <__malloc_lock>
 800389c:	f8d8 3000 	ldr.w	r3, [r8]
 80038a0:	461c      	mov	r4, r3
 80038a2:	bb5c      	cbnz	r4, 80038fc <_malloc_r+0x90>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4638      	mov	r0, r7
 80038a8:	f7ff ffc0 	bl	800382c <sbrk_aligned>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	4604      	mov	r4, r0
 80038b0:	d155      	bne.n	800395e <_malloc_r+0xf2>
 80038b2:	f8d8 4000 	ldr.w	r4, [r8]
 80038b6:	4626      	mov	r6, r4
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d145      	bne.n	8003948 <_malloc_r+0xdc>
 80038bc:	2c00      	cmp	r4, #0
 80038be:	d048      	beq.n	8003952 <_malloc_r+0xe6>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	4631      	mov	r1, r6
 80038c4:	4638      	mov	r0, r7
 80038c6:	eb04 0903 	add.w	r9, r4, r3
 80038ca:	f000 fc5f 	bl	800418c <_sbrk_r>
 80038ce:	4581      	cmp	r9, r0
 80038d0:	d13f      	bne.n	8003952 <_malloc_r+0xe6>
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	4638      	mov	r0, r7
 80038d6:	1a6d      	subs	r5, r5, r1
 80038d8:	4629      	mov	r1, r5
 80038da:	f7ff ffa7 	bl	800382c <sbrk_aligned>
 80038de:	3001      	adds	r0, #1
 80038e0:	d037      	beq.n	8003952 <_malloc_r+0xe6>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	442b      	add	r3, r5
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	f8d8 3000 	ldr.w	r3, [r8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d038      	beq.n	8003962 <_malloc_r+0xf6>
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	42a2      	cmp	r2, r4
 80038f4:	d12b      	bne.n	800394e <_malloc_r+0xe2>
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e00f      	b.n	800391c <_malloc_r+0xb0>
 80038fc:	6822      	ldr	r2, [r4, #0]
 80038fe:	1b52      	subs	r2, r2, r5
 8003900:	d41f      	bmi.n	8003942 <_malloc_r+0xd6>
 8003902:	2a0b      	cmp	r2, #11
 8003904:	d917      	bls.n	8003936 <_malloc_r+0xca>
 8003906:	1961      	adds	r1, r4, r5
 8003908:	42a3      	cmp	r3, r4
 800390a:	6025      	str	r5, [r4, #0]
 800390c:	bf18      	it	ne
 800390e:	6059      	strne	r1, [r3, #4]
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	bf08      	it	eq
 8003914:	f8c8 1000 	streq.w	r1, [r8]
 8003918:	5162      	str	r2, [r4, r5]
 800391a:	604b      	str	r3, [r1, #4]
 800391c:	4638      	mov	r0, r7
 800391e:	f104 060b 	add.w	r6, r4, #11
 8003922:	f000 f829 	bl	8003978 <__malloc_unlock>
 8003926:	f026 0607 	bic.w	r6, r6, #7
 800392a:	1d23      	adds	r3, r4, #4
 800392c:	1af2      	subs	r2, r6, r3
 800392e:	d0ae      	beq.n	800388e <_malloc_r+0x22>
 8003930:	1b9b      	subs	r3, r3, r6
 8003932:	50a3      	str	r3, [r4, r2]
 8003934:	e7ab      	b.n	800388e <_malloc_r+0x22>
 8003936:	42a3      	cmp	r3, r4
 8003938:	6862      	ldr	r2, [r4, #4]
 800393a:	d1dd      	bne.n	80038f8 <_malloc_r+0x8c>
 800393c:	f8c8 2000 	str.w	r2, [r8]
 8003940:	e7ec      	b.n	800391c <_malloc_r+0xb0>
 8003942:	4623      	mov	r3, r4
 8003944:	6864      	ldr	r4, [r4, #4]
 8003946:	e7ac      	b.n	80038a2 <_malloc_r+0x36>
 8003948:	4634      	mov	r4, r6
 800394a:	6876      	ldr	r6, [r6, #4]
 800394c:	e7b4      	b.n	80038b8 <_malloc_r+0x4c>
 800394e:	4613      	mov	r3, r2
 8003950:	e7cc      	b.n	80038ec <_malloc_r+0x80>
 8003952:	230c      	movs	r3, #12
 8003954:	4638      	mov	r0, r7
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	f000 f80e 	bl	8003978 <__malloc_unlock>
 800395c:	e797      	b.n	800388e <_malloc_r+0x22>
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	e7dc      	b.n	800391c <_malloc_r+0xb0>
 8003962:	605b      	str	r3, [r3, #4]
 8003964:	deff      	udf	#255	; 0xff
 8003966:	bf00      	nop
 8003968:	200002c0 	.word	0x200002c0

0800396c <__malloc_lock>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__malloc_lock+0x8>)
 800396e:	f7ff bf12 	b.w	8003796 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	200002bc 	.word	0x200002bc

08003978 <__malloc_unlock>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__malloc_unlock+0x8>)
 800397a:	f7ff bf0d 	b.w	8003798 <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	200002bc 	.word	0x200002bc

08003984 <__sfputc_r>:
 8003984:	6893      	ldr	r3, [r2, #8]
 8003986:	b410      	push	{r4}
 8003988:	3b01      	subs	r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	da07      	bge.n	80039a0 <__sfputc_r+0x1c>
 8003990:	6994      	ldr	r4, [r2, #24]
 8003992:	42a3      	cmp	r3, r4
 8003994:	db01      	blt.n	800399a <__sfputc_r+0x16>
 8003996:	290a      	cmp	r1, #10
 8003998:	d102      	bne.n	80039a0 <__sfputc_r+0x1c>
 800399a:	bc10      	pop	{r4}
 800399c:	f7ff bded 	b.w	800357a <__swbuf_r>
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	1c58      	adds	r0, r3, #1
 80039a4:	6010      	str	r0, [r2, #0]
 80039a6:	7019      	strb	r1, [r3, #0]
 80039a8:	4608      	mov	r0, r1
 80039aa:	bc10      	pop	{r4}
 80039ac:	4770      	bx	lr

080039ae <__sfputs_r>:
 80039ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b0:	4606      	mov	r6, r0
 80039b2:	460f      	mov	r7, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	18d5      	adds	r5, r2, r3
 80039b8:	42ac      	cmp	r4, r5
 80039ba:	d101      	bne.n	80039c0 <__sfputs_r+0x12>
 80039bc:	2000      	movs	r0, #0
 80039be:	e007      	b.n	80039d0 <__sfputs_r+0x22>
 80039c0:	463a      	mov	r2, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c8:	f7ff ffdc 	bl	8003984 <__sfputc_r>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d1f3      	bne.n	80039b8 <__sfputs_r+0xa>
 80039d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039d4 <_vfiprintf_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	460d      	mov	r5, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4698      	mov	r8, r3
 80039de:	4606      	mov	r6, r0
 80039e0:	b09d      	sub	sp, #116	; 0x74
 80039e2:	b118      	cbz	r0, 80039ec <_vfiprintf_r+0x18>
 80039e4:	6a03      	ldr	r3, [r0, #32]
 80039e6:	b90b      	cbnz	r3, 80039ec <_vfiprintf_r+0x18>
 80039e8:	f7ff fce0 	bl	80033ac <__sinit>
 80039ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	d405      	bmi.n	80039fe <_vfiprintf_r+0x2a>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	059a      	lsls	r2, r3, #22
 80039f6:	d402      	bmi.n	80039fe <_vfiprintf_r+0x2a>
 80039f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fa:	f7ff fecc 	bl	8003796 <__retarget_lock_acquire_recursive>
 80039fe:	89ab      	ldrh	r3, [r5, #12]
 8003a00:	071b      	lsls	r3, r3, #28
 8003a02:	d501      	bpl.n	8003a08 <_vfiprintf_r+0x34>
 8003a04:	692b      	ldr	r3, [r5, #16]
 8003a06:	b99b      	cbnz	r3, 8003a30 <_vfiprintf_r+0x5c>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7ff fdf2 	bl	80035f4 <__swsetup_r>
 8003a10:	b170      	cbz	r0, 8003a30 <_vfiprintf_r+0x5c>
 8003a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a14:	07dc      	lsls	r4, r3, #31
 8003a16:	d504      	bpl.n	8003a22 <_vfiprintf_r+0x4e>
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	b01d      	add	sp, #116	; 0x74
 8003a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a22:	89ab      	ldrh	r3, [r5, #12]
 8003a24:	0598      	lsls	r0, r3, #22
 8003a26:	d4f7      	bmi.n	8003a18 <_vfiprintf_r+0x44>
 8003a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a2a:	f7ff feb5 	bl	8003798 <__retarget_lock_release_recursive>
 8003a2e:	e7f3      	b.n	8003a18 <_vfiprintf_r+0x44>
 8003a30:	2300      	movs	r3, #0
 8003a32:	9309      	str	r3, [sp, #36]	; 0x24
 8003a34:	2320      	movs	r3, #32
 8003a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a3a:	2330      	movs	r3, #48	; 0x30
 8003a3c:	f04f 0901 	mov.w	r9, #1
 8003a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003bf4 <_vfiprintf_r+0x220>
 8003a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	469a      	mov	sl, r3
 8003a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a54:	b10a      	cbz	r2, 8003a5a <_vfiprintf_r+0x86>
 8003a56:	2a25      	cmp	r2, #37	; 0x25
 8003a58:	d1f9      	bne.n	8003a4e <_vfiprintf_r+0x7a>
 8003a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a5e:	d00b      	beq.n	8003a78 <_vfiprintf_r+0xa4>
 8003a60:	465b      	mov	r3, fp
 8003a62:	4622      	mov	r2, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff ffa1 	bl	80039ae <__sfputs_r>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	f000 80a9 	beq.w	8003bc4 <_vfiprintf_r+0x1f0>
 8003a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a74:	445a      	add	r2, fp
 8003a76:	9209      	str	r2, [sp, #36]	; 0x24
 8003a78:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a1 	beq.w	8003bc4 <_vfiprintf_r+0x1f0>
 8003a82:	2300      	movs	r3, #0
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a8c:	f10a 0a01 	add.w	sl, sl, #1
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	9307      	str	r3, [sp, #28]
 8003a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a98:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9a:	4654      	mov	r4, sl
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa2:	4854      	ldr	r0, [pc, #336]	; (8003bf4 <_vfiprintf_r+0x220>)
 8003aa4:	f000 fb82 	bl	80041ac <memchr>
 8003aa8:	9a04      	ldr	r2, [sp, #16]
 8003aaa:	b9d8      	cbnz	r0, 8003ae4 <_vfiprintf_r+0x110>
 8003aac:	06d1      	lsls	r1, r2, #27
 8003aae:	bf44      	itt	mi
 8003ab0:	2320      	movmi	r3, #32
 8003ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab6:	0713      	lsls	r3, r2, #28
 8003ab8:	bf44      	itt	mi
 8003aba:	232b      	movmi	r3, #43	; 0x2b
 8003abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac6:	d015      	beq.n	8003af4 <_vfiprintf_r+0x120>
 8003ac8:	4654      	mov	r4, sl
 8003aca:	2000      	movs	r0, #0
 8003acc:	f04f 0c0a 	mov.w	ip, #10
 8003ad0:	9a07      	ldr	r2, [sp, #28]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad8:	3b30      	subs	r3, #48	; 0x30
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d94d      	bls.n	8003b7a <_vfiprintf_r+0x1a6>
 8003ade:	b1b0      	cbz	r0, 8003b0e <_vfiprintf_r+0x13a>
 8003ae0:	9207      	str	r2, [sp, #28]
 8003ae2:	e014      	b.n	8003b0e <_vfiprintf_r+0x13a>
 8003ae4:	eba0 0308 	sub.w	r3, r0, r8
 8003ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8003aec:	4313      	orrs	r3, r2
 8003aee:	46a2      	mov	sl, r4
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	e7d2      	b.n	8003a9a <_vfiprintf_r+0xc6>
 8003af4:	9b03      	ldr	r3, [sp, #12]
 8003af6:	1d19      	adds	r1, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	9103      	str	r1, [sp, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bfbb      	ittet	lt
 8003b00:	425b      	neglt	r3, r3
 8003b02:	f042 0202 	orrlt.w	r2, r2, #2
 8003b06:	9307      	strge	r3, [sp, #28]
 8003b08:	9307      	strlt	r3, [sp, #28]
 8003b0a:	bfb8      	it	lt
 8003b0c:	9204      	strlt	r2, [sp, #16]
 8003b0e:	7823      	ldrb	r3, [r4, #0]
 8003b10:	2b2e      	cmp	r3, #46	; 0x2e
 8003b12:	d10c      	bne.n	8003b2e <_vfiprintf_r+0x15a>
 8003b14:	7863      	ldrb	r3, [r4, #1]
 8003b16:	2b2a      	cmp	r3, #42	; 0x2a
 8003b18:	d134      	bne.n	8003b84 <_vfiprintf_r+0x1b0>
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	3402      	adds	r4, #2
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9203      	str	r2, [sp, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bfb8      	it	lt
 8003b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bf8 <_vfiprintf_r+0x224>
 8003b32:	2203      	movs	r2, #3
 8003b34:	4650      	mov	r0, sl
 8003b36:	7821      	ldrb	r1, [r4, #0]
 8003b38:	f000 fb38 	bl	80041ac <memchr>
 8003b3c:	b138      	cbz	r0, 8003b4e <_vfiprintf_r+0x17a>
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	eba0 000a 	sub.w	r0, r0, sl
 8003b46:	4082      	lsls	r2, r0
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	3401      	adds	r4, #1
 8003b4c:	9304      	str	r3, [sp, #16]
 8003b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b52:	2206      	movs	r2, #6
 8003b54:	4829      	ldr	r0, [pc, #164]	; (8003bfc <_vfiprintf_r+0x228>)
 8003b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b5a:	f000 fb27 	bl	80041ac <memchr>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d03f      	beq.n	8003be2 <_vfiprintf_r+0x20e>
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <_vfiprintf_r+0x22c>)
 8003b64:	bb1b      	cbnz	r3, 8003bae <_vfiprintf_r+0x1da>
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	3307      	adds	r3, #7
 8003b6a:	f023 0307 	bic.w	r3, r3, #7
 8003b6e:	3308      	adds	r3, #8
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b74:	443b      	add	r3, r7
 8003b76:	9309      	str	r3, [sp, #36]	; 0x24
 8003b78:	e768      	b.n	8003a4c <_vfiprintf_r+0x78>
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b82:	e7a6      	b.n	8003ad2 <_vfiprintf_r+0xfe>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f04f 0c0a 	mov.w	ip, #10
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	3401      	adds	r4, #1
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b96:	3a30      	subs	r2, #48	; 0x30
 8003b98:	2a09      	cmp	r2, #9
 8003b9a:	d903      	bls.n	8003ba4 <_vfiprintf_r+0x1d0>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0c6      	beq.n	8003b2e <_vfiprintf_r+0x15a>
 8003ba0:	9105      	str	r1, [sp, #20]
 8003ba2:	e7c4      	b.n	8003b2e <_vfiprintf_r+0x15a>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bac:	e7f0      	b.n	8003b90 <_vfiprintf_r+0x1bc>
 8003bae:	ab03      	add	r3, sp, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <_vfiprintf_r+0x230>)
 8003bb8:	a904      	add	r1, sp, #16
 8003bba:	f3af 8000 	nop.w
 8003bbe:	4607      	mov	r7, r0
 8003bc0:	1c78      	adds	r0, r7, #1
 8003bc2:	d1d6      	bne.n	8003b72 <_vfiprintf_r+0x19e>
 8003bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bc6:	07d9      	lsls	r1, r3, #31
 8003bc8:	d405      	bmi.n	8003bd6 <_vfiprintf_r+0x202>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	059a      	lsls	r2, r3, #22
 8003bce:	d402      	bmi.n	8003bd6 <_vfiprintf_r+0x202>
 8003bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd2:	f7ff fde1 	bl	8003798 <__retarget_lock_release_recursive>
 8003bd6:	89ab      	ldrh	r3, [r5, #12]
 8003bd8:	065b      	lsls	r3, r3, #25
 8003bda:	f53f af1d 	bmi.w	8003a18 <_vfiprintf_r+0x44>
 8003bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be0:	e71c      	b.n	8003a1c <_vfiprintf_r+0x48>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4630      	mov	r0, r6
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <_vfiprintf_r+0x230>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	f000 f87d 	bl	8003cec <_printf_i>
 8003bf2:	e7e4      	b.n	8003bbe <_vfiprintf_r+0x1ea>
 8003bf4:	080043f8 	.word	0x080043f8
 8003bf8:	080043fe 	.word	0x080043fe
 8003bfc:	08004402 	.word	0x08004402
 8003c00:	00000000 	.word	0x00000000
 8003c04:	080039af 	.word	0x080039af

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	4607      	mov	r7, r0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfb8      	it	lt
 8003c1a:	4613      	movlt	r3, r2
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c22:	460c      	mov	r4, r1
 8003c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc2b      	bgt.n	8003ca8 <_printf_common+0xa0>
 8003c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d430      	bmi.n	8003cc2 <_printf_common+0xba>
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d023      	beq.n	8003cb6 <_printf_common+0xae>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf14      	ite	ne
 8003c7a:	2500      	movne	r5, #0
 8003c7c:	6833      	ldreq	r3, [r6, #0]
 8003c7e:	f04f 0600 	mov.w	r6, #0
 8003c82:	bf08      	it	eq
 8003c84:	68e5      	ldreq	r5, [r4, #12]
 8003c86:	f104 041a 	add.w	r4, r4, #26
 8003c8a:	bf08      	it	eq
 8003c8c:	1aed      	subeq	r5, r5, r3
 8003c8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c92:	bf08      	it	eq
 8003c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bfc4      	itt	gt
 8003c9c:	1a9b      	subgt	r3, r3, r2
 8003c9e:	18ed      	addgt	r5, r5, r3
 8003ca0:	42b5      	cmp	r5, r6
 8003ca2:	d11a      	bne.n	8003cda <_printf_common+0xd2>
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e008      	b.n	8003cba <_printf_common+0xb2>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4652      	mov	r2, sl
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d103      	bne.n	8003cbe <_printf_common+0xb6>
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbe:	3501      	adds	r5, #1
 8003cc0:	e7c1      	b.n	8003c46 <_printf_common+0x3e>
 8003cc2:	2030      	movs	r0, #48	; 0x30
 8003cc4:	18e1      	adds	r1, r4, r3
 8003cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cd0:	4422      	add	r2, r4
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd8:	e7c2      	b.n	8003c60 <_printf_common+0x58>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4622      	mov	r2, r4
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d0e6      	beq.n	8003cb6 <_printf_common+0xae>
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7d9      	b.n	8003ca0 <_printf_common+0x98>

08003cec <_printf_i>:
 8003cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	7e0f      	ldrb	r7, [r1, #24]
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	2f78      	cmp	r7, #120	; 0x78
 8003cf6:	4680      	mov	r8, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	469a      	mov	sl, r3
 8003cfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d02:	d807      	bhi.n	8003d14 <_printf_i+0x28>
 8003d04:	2f62      	cmp	r7, #98	; 0x62
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x32>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	f000 80d5 	beq.w	8003eb8 <_printf_i+0x1cc>
 8003d0e:	2f58      	cmp	r7, #88	; 0x58
 8003d10:	f000 80c1 	beq.w	8003e96 <_printf_i+0x1aa>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d1c:	e03a      	b.n	8003d94 <_printf_i+0xa8>
 8003d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	d8f6      	bhi.n	8003d14 <_printf_i+0x28>
 8003d26:	a101      	add	r1, pc, #4	; (adr r1, 8003d2c <_printf_i+0x40>)
 8003d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d99 	.word	0x08003d99
 8003d34:	08003d15 	.word	0x08003d15
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d15 	.word	0x08003d15
 8003d40:	08003d15 	.word	0x08003d15
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003d15 	.word	0x08003d15
 8003d4c:	08003d15 	.word	0x08003d15
 8003d50:	08003d15 	.word	0x08003d15
 8003d54:	08003d15 	.word	0x08003d15
 8003d58:	08003e9f 	.word	0x08003e9f
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003e59 	.word	0x08003e59
 8003d64:	08003d15 	.word	0x08003d15
 8003d68:	08003d15 	.word	0x08003d15
 8003d6c:	08003ec1 	.word	0x08003ec1
 8003d70:	08003d15 	.word	0x08003d15
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003d15 	.word	0x08003d15
 8003d7c:	08003d15 	.word	0x08003d15
 8003d80:	08003e61 	.word	0x08003e61
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	602a      	str	r2, [r5, #0]
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a0      	b.n	8003eda <_printf_i+0x1ee>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	0607      	lsls	r7, r0, #24
 8003d9e:	f103 0104 	add.w	r1, r3, #4
 8003da2:	6029      	str	r1, [r5, #0]
 8003da4:	d501      	bpl.n	8003daa <_printf_i+0xbe>
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0xc6>
 8003daa:	0646      	lsls	r6, r0, #25
 8003dac:	d5fb      	bpl.n	8003da6 <_printf_i+0xba>
 8003dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003db2:	2e00      	cmp	r6, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0xd2>
 8003db6:	232d      	movs	r3, #45	; 0x2d
 8003db8:	4276      	negs	r6, r6
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	4859      	ldr	r0, [pc, #356]	; (8003f28 <_printf_i+0x23c>)
 8003dc2:	e012      	b.n	8003dea <_printf_i+0xfe>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1d19      	adds	r1, r3, #4
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	0605      	lsls	r5, r0, #24
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0xe8>
 8003dd0:	681e      	ldr	r6, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0xee>
 8003dd4:	0641      	lsls	r1, r0, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0xe4>
 8003dd8:	881e      	ldrh	r6, [r3, #0]
 8003dda:	2f6f      	cmp	r7, #111	; 0x6f
 8003ddc:	bf0c      	ite	eq
 8003dde:	2308      	moveq	r3, #8
 8003de0:	230a      	movne	r3, #10
 8003de2:	4851      	ldr	r0, [pc, #324]	; (8003f28 <_printf_i+0x23c>)
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dea:	6865      	ldr	r5, [r4, #4]
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	bfa8      	it	ge
 8003df0:	6821      	ldrge	r1, [r4, #0]
 8003df2:	60a5      	str	r5, [r4, #8]
 8003df4:	bfa4      	itt	ge
 8003df6:	f021 0104 	bicge.w	r1, r1, #4
 8003dfa:	6021      	strge	r1, [r4, #0]
 8003dfc:	b90e      	cbnz	r6, 8003e02 <_printf_i+0x116>
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	d04b      	beq.n	8003e9a <_printf_i+0x1ae>
 8003e02:	4615      	mov	r5, r2
 8003e04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e08:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0c:	5dc7      	ldrb	r7, [r0, r7]
 8003e0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e12:	4637      	mov	r7, r6
 8003e14:	42bb      	cmp	r3, r7
 8003e16:	460e      	mov	r6, r1
 8003e18:	d9f4      	bls.n	8003e04 <_printf_i+0x118>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d10b      	bne.n	8003e36 <_printf_i+0x14a>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	07de      	lsls	r6, r3, #31
 8003e22:	d508      	bpl.n	8003e36 <_printf_i+0x14a>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	6861      	ldr	r1, [r4, #4]
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	bfde      	ittt	le
 8003e2c:	2330      	movle	r3, #48	; 0x30
 8003e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	6122      	str	r2, [r4, #16]
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f8cd a000 	str.w	sl, [sp]
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	f7ff fedf 	bl	8003c08 <_printf_common>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d14a      	bne.n	8003ee4 <_printf_i+0x1f8>
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	b004      	add	sp, #16
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	2778      	movs	r7, #120	; 0x78
 8003e62:	4832      	ldr	r0, [pc, #200]	; (8003f2c <_printf_i+0x240>)
 8003e64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	6829      	ldr	r1, [r5, #0]
 8003e6c:	061f      	lsls	r7, r3, #24
 8003e6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e72:	d402      	bmi.n	8003e7a <_printf_i+0x18e>
 8003e74:	065f      	lsls	r7, r3, #25
 8003e76:	bf48      	it	mi
 8003e78:	b2b6      	uxthmi	r6, r6
 8003e7a:	07df      	lsls	r7, r3, #31
 8003e7c:	bf48      	it	mi
 8003e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e82:	6029      	str	r1, [r5, #0]
 8003e84:	bf48      	it	mi
 8003e86:	6023      	strmi	r3, [r4, #0]
 8003e88:	b91e      	cbnz	r6, 8003e92 <_printf_i+0x1a6>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f023 0320 	bic.w	r3, r3, #32
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	2310      	movs	r3, #16
 8003e94:	e7a6      	b.n	8003de4 <_printf_i+0xf8>
 8003e96:	4824      	ldr	r0, [pc, #144]	; (8003f28 <_printf_i+0x23c>)
 8003e98:	e7e4      	b.n	8003e64 <_printf_i+0x178>
 8003e9a:	4615      	mov	r5, r2
 8003e9c:	e7bd      	b.n	8003e1a <_printf_i+0x12e>
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	6826      	ldr	r6, [r4, #0]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6961      	ldr	r1, [r4, #20]
 8003ea6:	6028      	str	r0, [r5, #0]
 8003ea8:	0635      	lsls	r5, r6, #24
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	d501      	bpl.n	8003eb2 <_printf_i+0x1c6>
 8003eae:	6019      	str	r1, [r3, #0]
 8003eb0:	e002      	b.n	8003eb8 <_printf_i+0x1cc>
 8003eb2:	0670      	lsls	r0, r6, #25
 8003eb4:	d5fb      	bpl.n	8003eae <_printf_i+0x1c2>
 8003eb6:	8019      	strh	r1, [r3, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4615      	mov	r5, r2
 8003ebc:	6123      	str	r3, [r4, #16]
 8003ebe:	e7bc      	b.n	8003e3a <_printf_i+0x14e>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	1d1a      	adds	r2, r3, #4
 8003ec6:	602a      	str	r2, [r5, #0]
 8003ec8:	681d      	ldr	r5, [r3, #0]
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f96d 	bl	80041ac <memchr>
 8003ed2:	b108      	cbz	r0, 8003ed8 <_printf_i+0x1ec>
 8003ed4:	1b40      	subs	r0, r0, r5
 8003ed6:	6060      	str	r0, [r4, #4]
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	6123      	str	r3, [r4, #16]
 8003edc:	2300      	movs	r3, #0
 8003ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee2:	e7aa      	b.n	8003e3a <_printf_i+0x14e>
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	47d0      	blx	sl
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d0ad      	beq.n	8003e4e <_printf_i+0x162>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	079b      	lsls	r3, r3, #30
 8003ef6:	d413      	bmi.n	8003f20 <_printf_i+0x234>
 8003ef8:	68e0      	ldr	r0, [r4, #12]
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	4298      	cmp	r0, r3
 8003efe:	bfb8      	it	lt
 8003f00:	4618      	movlt	r0, r3
 8003f02:	e7a6      	b.n	8003e52 <_printf_i+0x166>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4632      	mov	r2, r6
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	47d0      	blx	sl
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d09d      	beq.n	8003e4e <_printf_i+0x162>
 8003f12:	3501      	adds	r5, #1
 8003f14:	68e3      	ldr	r3, [r4, #12]
 8003f16:	9903      	ldr	r1, [sp, #12]
 8003f18:	1a5b      	subs	r3, r3, r1
 8003f1a:	42ab      	cmp	r3, r5
 8003f1c:	dcf2      	bgt.n	8003f04 <_printf_i+0x218>
 8003f1e:	e7eb      	b.n	8003ef8 <_printf_i+0x20c>
 8003f20:	2500      	movs	r5, #0
 8003f22:	f104 0619 	add.w	r6, r4, #25
 8003f26:	e7f5      	b.n	8003f14 <_printf_i+0x228>
 8003f28:	08004409 	.word	0x08004409
 8003f2c:	0800441a 	.word	0x0800441a

08003f30 <__sflush_r>:
 8003f30:	898a      	ldrh	r2, [r1, #12]
 8003f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f34:	4605      	mov	r5, r0
 8003f36:	0710      	lsls	r0, r2, #28
 8003f38:	460c      	mov	r4, r1
 8003f3a:	d457      	bmi.n	8003fec <__sflush_r+0xbc>
 8003f3c:	684b      	ldr	r3, [r1, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dc04      	bgt.n	8003f4c <__sflush_r+0x1c>
 8003f42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	dc01      	bgt.n	8003f4c <__sflush_r+0x1c>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d0fa      	beq.n	8003f48 <__sflush_r+0x18>
 8003f52:	2300      	movs	r3, #0
 8003f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f58:	682f      	ldr	r7, [r5, #0]
 8003f5a:	6a21      	ldr	r1, [r4, #32]
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	d032      	beq.n	8003fc6 <__sflush_r+0x96>
 8003f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	075a      	lsls	r2, r3, #29
 8003f66:	d505      	bpl.n	8003f74 <__sflush_r+0x44>
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	1ac0      	subs	r0, r0, r3
 8003f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f6e:	b10b      	cbz	r3, 8003f74 <__sflush_r+0x44>
 8003f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f72:	1ac0      	subs	r0, r0, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	4602      	mov	r2, r0
 8003f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	47b0      	blx	r6
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	d106      	bne.n	8003f94 <__sflush_r+0x64>
 8003f86:	6829      	ldr	r1, [r5, #0]
 8003f88:	291d      	cmp	r1, #29
 8003f8a:	d82b      	bhi.n	8003fe4 <__sflush_r+0xb4>
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <__sflush_r+0x100>)
 8003f8e:	410a      	asrs	r2, r1
 8003f90:	07d6      	lsls	r6, r2, #31
 8003f92:	d427      	bmi.n	8003fe4 <__sflush_r+0xb4>
 8003f94:	2200      	movs	r2, #0
 8003f96:	6062      	str	r2, [r4, #4]
 8003f98:	6922      	ldr	r2, [r4, #16]
 8003f9a:	04d9      	lsls	r1, r3, #19
 8003f9c:	6022      	str	r2, [r4, #0]
 8003f9e:	d504      	bpl.n	8003faa <__sflush_r+0x7a>
 8003fa0:	1c42      	adds	r2, r0, #1
 8003fa2:	d101      	bne.n	8003fa8 <__sflush_r+0x78>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b903      	cbnz	r3, 8003faa <__sflush_r+0x7a>
 8003fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8003faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fac:	602f      	str	r7, [r5, #0]
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d0ca      	beq.n	8003f48 <__sflush_r+0x18>
 8003fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	d002      	beq.n	8003fc0 <__sflush_r+0x90>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fbee 	bl	800379c <_free_r>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8003fc4:	e7c1      	b.n	8003f4a <__sflush_r+0x1a>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b0      	blx	r6
 8003fcc:	1c41      	adds	r1, r0, #1
 8003fce:	d1c8      	bne.n	8003f62 <__sflush_r+0x32>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0c5      	beq.n	8003f62 <__sflush_r+0x32>
 8003fd6:	2b1d      	cmp	r3, #29
 8003fd8:	d001      	beq.n	8003fde <__sflush_r+0xae>
 8003fda:	2b16      	cmp	r3, #22
 8003fdc:	d101      	bne.n	8003fe2 <__sflush_r+0xb2>
 8003fde:	602f      	str	r7, [r5, #0]
 8003fe0:	e7b2      	b.n	8003f48 <__sflush_r+0x18>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	e7ae      	b.n	8003f4a <__sflush_r+0x1a>
 8003fec:	690f      	ldr	r7, [r1, #16]
 8003fee:	2f00      	cmp	r7, #0
 8003ff0:	d0aa      	beq.n	8003f48 <__sflush_r+0x18>
 8003ff2:	0793      	lsls	r3, r2, #30
 8003ff4:	bf18      	it	ne
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	680e      	ldr	r6, [r1, #0]
 8003ffa:	bf08      	it	eq
 8003ffc:	694b      	ldreq	r3, [r1, #20]
 8003ffe:	1bf6      	subs	r6, r6, r7
 8004000:	600f      	str	r7, [r1, #0]
 8004002:	608b      	str	r3, [r1, #8]
 8004004:	2e00      	cmp	r6, #0
 8004006:	dd9f      	ble.n	8003f48 <__sflush_r+0x18>
 8004008:	4633      	mov	r3, r6
 800400a:	463a      	mov	r2, r7
 800400c:	4628      	mov	r0, r5
 800400e:	6a21      	ldr	r1, [r4, #32]
 8004010:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004014:	47e0      	blx	ip
 8004016:	2800      	cmp	r0, #0
 8004018:	dc06      	bgt.n	8004028 <__sflush_r+0xf8>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	e790      	b.n	8003f4a <__sflush_r+0x1a>
 8004028:	4407      	add	r7, r0
 800402a:	1a36      	subs	r6, r6, r0
 800402c:	e7ea      	b.n	8004004 <__sflush_r+0xd4>
 800402e:	bf00      	nop
 8004030:	dfbffffe 	.word	0xdfbffffe

08004034 <_fflush_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	4605      	mov	r5, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b913      	cbnz	r3, 8004044 <_fflush_r+0x10>
 800403e:	2500      	movs	r5, #0
 8004040:	4628      	mov	r0, r5
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	b118      	cbz	r0, 800404e <_fflush_r+0x1a>
 8004046:	6a03      	ldr	r3, [r0, #32]
 8004048:	b90b      	cbnz	r3, 800404e <_fflush_r+0x1a>
 800404a:	f7ff f9af 	bl	80033ac <__sinit>
 800404e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f3      	beq.n	800403e <_fflush_r+0xa>
 8004056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d404      	bmi.n	8004066 <_fflush_r+0x32>
 800405c:	0599      	lsls	r1, r3, #22
 800405e:	d402      	bmi.n	8004066 <_fflush_r+0x32>
 8004060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004062:	f7ff fb98 	bl	8003796 <__retarget_lock_acquire_recursive>
 8004066:	4628      	mov	r0, r5
 8004068:	4621      	mov	r1, r4
 800406a:	f7ff ff61 	bl	8003f30 <__sflush_r>
 800406e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004070:	4605      	mov	r5, r0
 8004072:	07da      	lsls	r2, r3, #31
 8004074:	d4e4      	bmi.n	8004040 <_fflush_r+0xc>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	059b      	lsls	r3, r3, #22
 800407a:	d4e1      	bmi.n	8004040 <_fflush_r+0xc>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f7ff fb8b 	bl	8003798 <__retarget_lock_release_recursive>
 8004082:	e7dd      	b.n	8004040 <_fflush_r+0xc>

08004084 <__swhatbuf_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	460c      	mov	r4, r1
 8004088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408c:	4615      	mov	r5, r2
 800408e:	2900      	cmp	r1, #0
 8004090:	461e      	mov	r6, r3
 8004092:	b096      	sub	sp, #88	; 0x58
 8004094:	da0c      	bge.n	80040b0 <__swhatbuf_r+0x2c>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	2100      	movs	r1, #0
 800409a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800409e:	bf0c      	ite	eq
 80040a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80040a4:	2340      	movne	r3, #64	; 0x40
 80040a6:	2000      	movs	r0, #0
 80040a8:	6031      	str	r1, [r6, #0]
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	b016      	add	sp, #88	; 0x58
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	466a      	mov	r2, sp
 80040b2:	f000 f849 	bl	8004148 <_fstat_r>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	dbed      	blt.n	8004096 <__swhatbuf_r+0x12>
 80040ba:	9901      	ldr	r1, [sp, #4]
 80040bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80040c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80040c4:	4259      	negs	r1, r3
 80040c6:	4159      	adcs	r1, r3
 80040c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040cc:	e7eb      	b.n	80040a6 <__swhatbuf_r+0x22>

080040ce <__smakebuf_r>:
 80040ce:	898b      	ldrh	r3, [r1, #12]
 80040d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040d2:	079d      	lsls	r5, r3, #30
 80040d4:	4606      	mov	r6, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	d507      	bpl.n	80040ea <__smakebuf_r+0x1c>
 80040da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	6123      	str	r3, [r4, #16]
 80040e2:	2301      	movs	r3, #1
 80040e4:	6163      	str	r3, [r4, #20]
 80040e6:	b002      	add	sp, #8
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
 80040ea:	466a      	mov	r2, sp
 80040ec:	ab01      	add	r3, sp, #4
 80040ee:	f7ff ffc9 	bl	8004084 <__swhatbuf_r>
 80040f2:	9900      	ldr	r1, [sp, #0]
 80040f4:	4605      	mov	r5, r0
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7ff fbb8 	bl	800386c <_malloc_r>
 80040fc:	b948      	cbnz	r0, 8004112 <__smakebuf_r+0x44>
 80040fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004102:	059a      	lsls	r2, r3, #22
 8004104:	d4ef      	bmi.n	80040e6 <__smakebuf_r+0x18>
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	e7e3      	b.n	80040da <__smakebuf_r+0xc>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	6020      	str	r0, [r4, #0]
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	9b00      	ldr	r3, [sp, #0]
 800411e:	6120      	str	r0, [r4, #16]
 8004120:	6163      	str	r3, [r4, #20]
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	b15b      	cbz	r3, 800413e <__smakebuf_r+0x70>
 8004126:	4630      	mov	r0, r6
 8004128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412c:	f000 f81e 	bl	800416c <_isatty_r>
 8004130:	b128      	cbz	r0, 800413e <__smakebuf_r+0x70>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	431d      	orrs	r5, r3
 8004142:	81a5      	strh	r5, [r4, #12]
 8004144:	e7cf      	b.n	80040e6 <__smakebuf_r+0x18>
	...

08004148 <_fstat_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	2300      	movs	r3, #0
 800414c:	4d06      	ldr	r5, [pc, #24]	; (8004168 <_fstat_r+0x20>)
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	f7fc fea9 	bl	8000eac <_fstat>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d102      	bne.n	8004164 <_fstat_r+0x1c>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	b103      	cbz	r3, 8004164 <_fstat_r+0x1c>
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	bf00      	nop
 8004168:	200002b8 	.word	0x200002b8

0800416c <_isatty_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	2300      	movs	r3, #0
 8004170:	4d05      	ldr	r5, [pc, #20]	; (8004188 <_isatty_r+0x1c>)
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fc fea7 	bl	8000eca <_isatty>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_isatty_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_isatty_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	200002b8 	.word	0x200002b8

0800418c <_sbrk_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	2300      	movs	r3, #0
 8004190:	4d05      	ldr	r5, [pc, #20]	; (80041a8 <_sbrk_r+0x1c>)
 8004192:	4604      	mov	r4, r0
 8004194:	4608      	mov	r0, r1
 8004196:	602b      	str	r3, [r5, #0]
 8004198:	f7fc feae 	bl	8000ef8 <_sbrk>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_sbrk_r+0x1a>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_sbrk_r+0x1a>
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	200002b8 	.word	0x200002b8

080041ac <memchr>:
 80041ac:	4603      	mov	r3, r0
 80041ae:	b510      	push	{r4, lr}
 80041b0:	b2c9      	uxtb	r1, r1
 80041b2:	4402      	add	r2, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	d101      	bne.n	80041be <memchr+0x12>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e003      	b.n	80041c6 <memchr+0x1a>
 80041be:	7804      	ldrb	r4, [r0, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	428c      	cmp	r4, r1
 80041c4:	d1f6      	bne.n	80041b4 <memchr+0x8>
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <_init>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr

080041d4 <_fini>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr
